var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'Strategy Counts';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('CC', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Strategy Counts', 'CC', function() {
      plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, "shape"), "circle"); }));;
    });
  }),
  new PenBundle.Pen('CD', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Strategy Counts', 'CD', function() {
      plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, "shape"), "circle 2"); }));;
    });
  }),
  new PenBundle.Pen('DC', plotOps.makePenOps, false, new PenBundle.State(44, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Strategy Counts', 'DC', function() {
      plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, "shape"), "square"); }));;
    });
  }),
  new PenBundle.Pen('DD', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Strategy Counts', 'DD', function() {
      plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, "shape"), "square 2"); }));;
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "time", "count", true, true, true, 0, 10, 0, 1, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])(["ptr", "cooperate-with-same?", "cooperate-with-different?"], [])(';; agents have a probablity to reproduce and a strategy turtles-own [ ptr cooperate-with-same? cooperate-with-different? ]  globals [   ;; the remaining variables support the replication of published experiments   meet                  ;; how many interactions occurred this turn   meet-agg              ;; how many interactions occurred through the run   last100meet           ;; meet for the last 100 ticks   meetown               ;; what number of individuals met someone of their own color this turn   meetown-agg           ;; what number of individuals met someone of their own color throughout the run   last100meetown        ;; meetown for the last 100 ticks   meetother             ;; what number of individuals met someone of a different color this turn   meetother-agg         ;; what number of individuals met someone of a different color throughout the run   last100meetother      ;; meetother for the last 100 ticks   coopown               ;; how many interactions this turn were cooperating with the same color   coopown-agg           ;; how many interactions throughout the run were cooperating with the same color   last100coopown        ;; coopown for the last 100 ticks   coopother             ;; how many interactions this turn were cooperating with a different color   coopother-agg         ;; how many interactions throughout the run were cooperating with a different color   defother              ;; how many interactions this turn were defecting with a different color   defother-agg          ;; how many interactions throughout the run were defecting with a different color   last100defother       ;; defother for the last 100 ticks   last100cc             ;; how many cooperate-cooperate genotypes have there been in the last 100 ticks   last100cd             ;; how many cooperate-defect genotypes have there been in the last 100 ticks   last100dc             ;; how many defect-cooperate genotypes have there been in the last 100 ticks   last100dd             ;; how many defect-defect genotypes have there been in the last 100 ticks   last100consist-ethno  ;; how many interactions consistent with ethnocentrism in the last 100 ticks   last100coop           ;; how many interactions have been cooperation in the last 100 ticks ]  to setup-empty   clear-all   initialize-variables   reset-ticks end  ;; creates a world with an agent on each patch to setup-full   clear-all   initialize-variables   ask patches [ create-turtle ]   reset-ticks end  to initialize-variables   ;; initialize all the variables   set meetown 0   set meetown-agg 0   set meet 0   set meet-agg 0   set coopown 0   set coopown-agg 0   set defother 0   set defother-agg 0   set meetother 0   set meetother-agg 0   set coopother 0   set coopother-agg 0   set last100dd []   set last100cd []   set last100cc []   set last100dc []   set last100coopown []   set last100defother []   set last100consist-ethno []   set last100meetown []   set last100meetother []   set last100meet []   set last100coop [] end  ;; creates a new agent in the world to create-turtle  ;; patch procedure   sprout 1 [     set color random-color     ;; determine the strategy for interacting with someone of the same color     set cooperate-with-same? (random-float 1 < immigrant-chance-cooperate-with-same)     ;; determine the strategy for interacting with someone of a different color     set cooperate-with-different? (random-float 1 < immigrant-chance-cooperate-with-different)     ;; change the shape of the agent on the basis of the strategy     update-shape   ] end  to-report random-color   report one-of [red blue yellow green] end  ;; this is used to clear stats that change between each tick to clear-stats   set meetown 0   set meet 0   set coopown 0   set defother 0   set meetother 0   set coopother 0 end  ;; the main routine to go   clear-stats     ;; clear the turn based stats   immigrate       ;; new agents immigrate into the world    ;; reset the probability to reproduce   ask turtles [ set ptr initial-ptr ]    ;; have all of the agents interact with other agents if they can   ask turtles [ interact ]   ;; now they reproduce   ask turtles [ reproduce ]   death           ;; kill some of the agents   update-stats    ;; update the states for the aggregate and last 100 ticks   tick end  ;; random individuals enter the world on empty cells to immigrate   let empty-patches patches with [not any? turtles-here]   ;; we can\'t have more immigrants than there are empty patches   let how-many min list immigrants-per-day (count empty-patches)   ask n-of how-many empty-patches [ create-turtle ] end  to interact  ;; turtle procedure    ;; interact with Von Neumann neighborhood   ask turtles-on neighbors4 [     ;; the commands inside the ASK are written from the point of view     ;; of the agent being interacted with.  To refer back to the agent     ;; that initiated the interaction, we use the MYSELF primitive.     set meet meet + 1     set meet-agg meet-agg + 1     ;; do one thing if the individual interacting is the same color as me     if color = [color] of myself [       ;; record the fact the agent met someone of the own color       set meetown meetown + 1       set meetown-agg meetown-agg + 1       ;; if I cooperate then I reduce my PTR and increase my neighbors       if [cooperate-with-same?] of myself [         set coopown coopown + 1         set coopown-agg coopown-agg + 1         ask myself [ set ptr ptr - cost-of-giving ]         set ptr ptr + gain-of-receiving       ]     ]     ;; if we are different colors we take a different strategy     if color != [color] of myself [       ;; record stats on encounters       set meetother meetother + 1       set meetother-agg meetother-agg + 1       ;; if we cooperate with different colors then reduce our PTR and increase our neighbors       ifelse [cooperate-with-different?] of myself [         set coopother coopother + 1         set coopother-agg coopother-agg + 1         ask myself [ set ptr ptr - cost-of-giving ]         set ptr ptr + gain-of-receiving       ]       [         set defother defother + 1         set defother-agg defother-agg + 1       ]     ]   ] end  ;; use PTR to determine if the agent gets to reproduce to reproduce  ;; turtle procedure   ;; if a random variable is less than the PTR the agent can reproduce   if random-float 1 < ptr [     ;; find an empty location to reproduce into     let destination one-of neighbors4 with [not any? turtles-here]     if destination != nobody [       ;; if the location exists hatch a copy of the current turtle in the new location       ;;  but mutate the child       hatch 1 [         move-to destination         mutate       ]     ]   ] end  ;; modify the children of agents according to the mutation rate to mutate  ;; turtle procedure   ;; mutate the color   if random-float 1 < mutation-rate [     let old-color color     while [color = old-color]       [ set color random-color ]   ]   ;; mutate the strategy flags;   ;; use NOT to toggle the flag   if random-float 1 < mutation-rate [     set cooperate-with-same? not cooperate-with-same?   ]   if random-float 1 < mutation-rate [     set cooperate-with-different? not cooperate-with-different?   ]   ;; make sure the shape of the agent reflects its strategy   update-shape end  to death   ;; check to see if a random variable is less than the death rate for each agent   ask turtles [     if random-float 1 < death-rate [ die ]   ] end  ;; make sure the shape matches the strategy to update-shape   ;; if the agent cooperates with same they are a circle   ifelse cooperate-with-same? [     ifelse cooperate-with-different?       [ set shape \"circle\" ]    ;; filled in circle (altruist)       [ set shape \"circle 2\" ]  ;; empty circle (ethnocentric)   ]   ;; if the agent doesn\'t cooperate with same they are a square   [     ifelse cooperate-with-different?       [ set shape \"square\" ]    ;; filled in square (cosmopolitan)       [ set shape \"square 2\" ]  ;; empty square (egoist)   ] end  ;; this routine calculates a moving average of some stats over the last 100 ticks to update-stats   set last100dd        shorten lput (count turtles with [shape = \"square 2\"]) last100dd   set last100cc        shorten lput (count turtles with [shape = \"circle\"]) last100cc   set last100cd        shorten lput (count turtles with [shape = \"circle 2\"]) last100cd   set last100dc        shorten lput (count turtles with [shape = \"square\"]) last100dc   set last100coopown   shorten lput coopown last100coopown   set last100defother  shorten lput defother last100defother   set last100meetown   shorten lput meetown last100meetown   set last100coop      shorten lput (coopown + coopother) last100coop   set last100meet      shorten lput meet last100meet   set last100meetother shorten lput meetother last100meetother end  ;; this is used to keep all of the last100 lists the right length to-report shorten [the-list]   ifelse length the-list > 100     [ report butfirst the-list ]     [ report the-list ] end  ;; these are used in the BehaviorSpace experiments  to-report meetown-percent   report meetown / max list 1 meet end to-report meetown-agg-percent   report meetown-agg / max list 1 meet-agg end to-report coopown-percent   report coopown / max list 1 meetown end to-report coopown-agg-percent   report coopown-agg / max list 1 meetown-agg end to-report defother-percent   report defother / max list 1 meetother end to-report defother-agg-percent   report defother-agg / max list 1 meetother-agg end to-report consist-ethno-percent   report (defother + coopown) / (max list 1 meet ) end to-report consist-ethno-agg-percent   report (defother-agg + coopown-agg) / (max list 1 meet-agg ) end to-report coop-percent   report (coopown + coopother) / (max list 1 meet ) end to-report coop-agg-percent   report (coopown-agg + coopother-agg) / (max list 1 meet-agg) end to-report cc-count   report sum last100cc / max list 1 length last100cc end to-report cd-count   report sum last100cd / max list 1 length last100cd end to-report dc-count   report sum last100dc / max list 1 length last100dc end to-report dd-count   report sum last100dd / max list 1 length last100dd end to-report cc-percent   report cc-count / (max list 1 (cc-count + cd-count + dc-count + dd-count)) end to-report cd-percent   report cd-count / (max list 1 (cc-count + cd-count + dc-count + dd-count)) end to-report dc-percent   report dc-count / (max list 1 (cc-count + cd-count + dc-count + dd-count)) end to-report dd-percent   report dd-count / (max list 1 (cc-count + cd-count + dc-count + dd-count)) end to-report last100coopown-percent   report sum last100coopown / max list 1 sum last100meetown end to-report last100defother-percent   report sum last100defother / max list 1 sum last100meetother end to-report last100consist-ethno-percent   report (sum last100defother + sum last100coopown) / max list 1 sum last100meet end to-report last100meetown-percent   report sum last100meetown / max list 1 sum last100meet end to-report last100coop-percent   report sum last100coop / max list 1 sum last100meet end   ; Copyright 2003 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":323,"y":10,"width":467,"height":468,"dimensions":{"minPxcor":0,"maxPxcor":50,"minPycor":0,"maxPycor":50,"patchSize":9,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.001; })","type":"slider","variable":"mutation-rate","x":5,"y":150,"width":166,"height":33,"oldSize":true,"display":"mutation-rate","min":"0","max":"1","default":0.005,"step":"0.0010","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.05; })","type":"slider","variable":"death-rate","x":5,"y":184,"width":166,"height":33,"oldSize":true,"display":"death-rate","min":"0","max":"1","default":0.1,"step":"0.05","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"immigrants-per-day","x":5,"y":218,"width":166,"height":33,"oldSize":true,"display":"immigrants-per-day","min":"0","max":"100","default":1,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","type":"slider","variable":"initial-PTR","x":172,"y":150,"width":146,"height":33,"oldSize":true,"display":"initial-PTR","min":"0","max":"1","default":0.12,"step":"0.01","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","type":"slider","variable":"cost-of-giving","x":172,"y":184,"width":146,"height":33,"oldSize":true,"display":"cost-of-giving","min":"0","max":"1","default":0.01,"step":"0.01","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","type":"slider","variable":"gain-of-receiving","x":172,"y":218,"width":146,"height":33,"oldSize":true,"display":"gain-of-receiving","min":"0","max":"1","default":0.03,"step":"0.01","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup-empty\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup-empty","x":20,"y":29,"width":108,"height":33,"oldSize":true,"display":"setup empty","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":222,"y":29,"width":73,"height":33,"oldSize":true,"forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Strategy Counts', 'CC', function() {     plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, \"shape\"), \"circle\"); }));;   }); }","type":"pen","display":"CC","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"circle\"]","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Strategy Counts', 'CD', function() {     plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, \"shape\"), \"circle 2\"); }));;   }); }","type":"pen","display":"CD","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"circle 2\"]","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Strategy Counts', 'DC', function() {     plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, \"shape\"), \"square\"); }));;   }); }","type":"pen","display":"DC","interval":1,"mode":0,"color":-4079321,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"square\"]","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Strategy Counts', 'DD', function() {     plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(66, 71, \"shape\"), \"square 2\"); }));;   }); }","type":"pen","display":"DD","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"square 2\"]","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Strategy Counts","x":6,"y":323,"width":312,"height":202,"oldSize":true,"xAxis":"time","yAxis":"count","xmin":0,"xmax":10,"ymin":0,"ymax":1,"autoPlotX":true,"autoPlotY":true,"legendOn":true,"setupCode":"","updateCode":"","pens":[{"display":"CC","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"circle\"]","type":"pen"},{"display":"CD","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"circle 2\"]","type":"pen"},{"display":"DC","interval":1,"mode":0,"color":-4079321,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"square\"]","type":"pen"},{"display":"DD","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks count turtles with [shape = \"square 2\"]","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup-full\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup-full","x":130,"y":29,"width":89,"height":33,"oldSize":true,"display":"setup full","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","type":"slider","variable":"immigrant-chance-cooperate-with-same","x":5,"y":252,"width":313,"height":33,"oldSize":true,"display":"immigrant-chance-cooperate-with-same","min":"0","max":"1","default":0.5,"step":"0.01","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","type":"slider","variable":"immigrant-chance-cooperate-with-different","x":5,"y":286,"width":313,"height":33,"oldSize":true,"display":"immigrant-chance-cooperate-with-different","min":"0","max":"1","default":0.5,"step":"0.01","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"display":"Circles cooperate with same color Squares defect with same color Filled-in shapes cooperate with different color Empty shapes defect with different color ","x":9,"y":77,"width":295,"height":65,"fontSize":11,"markdown":false,"textColorLight":"-16777216","type":"textBox","compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["mutation-rate", "death-rate", "immigrants-per-day", "initial-ptr", "cost-of-giving", "gain-of-receiving", "immigrant-chance-cooperate-with-same", "immigrant-chance-cooperate-with-different", "meet", "meet-agg", "last100meet", "meetown", "meetown-agg", "last100meetown", "meetother", "meetother-agg", "last100meetother", "coopown", "coopown-agg", "last100coopown", "coopother", "coopother-agg", "defother", "defother-agg", "last100defother", "last100cc", "last100cd", "last100dc", "last100dd", "last100consist-ethno", "last100coop"], ["mutation-rate", "death-rate", "immigrants-per-day", "initial-ptr", "cost-of-giving", "gain-of-receiving", "immigrant-chance-cooperate-with-same", "immigrant-chance-cooperate-with-different"], [], 0, 50, 0, 50, 9, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup-empty", 2261, 2322, (function() {
  world.clearAll();
  var R = ProcedurePrims.callCommand("initialize-variables"); if (R === DeathInterrupt) { return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-full", 2377, 2469, (function() {
  world.clearAll();
  var R = ProcedurePrims.callCommand("initialize-variables"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.patches(), function() { var R = ProcedurePrims.callCommand("create-turtle"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2425, 2428, R); return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("initialize-variables", 2477, 2999, (function() {
  world.observer.setGlobal("meetown", 0);
  world.observer.setGlobal("meetown-agg", 0);
  world.observer.setGlobal("meet", 0);
  world.observer.setGlobal("meet-agg", 0);
  world.observer.setGlobal("coopown", 0);
  world.observer.setGlobal("coopown-agg", 0);
  world.observer.setGlobal("defother", 0);
  world.observer.setGlobal("defother-agg", 0);
  world.observer.setGlobal("meetother", 0);
  world.observer.setGlobal("meetother-agg", 0);
  world.observer.setGlobal("coopother", 0);
  world.observer.setGlobal("coopother-agg", 0);
  world.observer.setGlobal("last100dd", []);
  world.observer.setGlobal("last100cd", []);
  world.observer.setGlobal("last100cc", []);
  world.observer.setGlobal("last100dc", []);
  world.observer.setGlobal("last100coopown", []);
  world.observer.setGlobal("last100defother", []);
  world.observer.setGlobal("last100consist-ethno", []);
  world.observer.setGlobal("last100meetown", []);
  world.observer.setGlobal("last100meetother", []);
  world.observer.setGlobal("last100meet", []);
  world.observer.setGlobal("last100coop", []);
}))
ProcedurePrims.defineCommand("create-turtle", 3043, 3545, (function() {
  var R = ProcedurePrims.ask(SelfManager.self().sprout(1, "TURTLES"), function() {
    PrimChecks.turtleOrLink.setVariable(3098, 3103, "color", PrimChecks.procedure.callReporter(3104, 3116, "random-color"));
    PrimChecks.turtle.setVariable(3202, 3222, "cooperate-with-same?", Prims.lt(PrimChecks.math.randomFloat(1), world.observer.getGlobal("immigrant-chance-cooperate-with-same")));
    PrimChecks.turtle.setVariable(3369, 3394, "cooperate-with-different?", Prims.lt(PrimChecks.math.randomFloat(1), world.observer.getGlobal("immigrant-chance-cooperate-with-different")));
    var R = ProcedurePrims.callCommand("update-shape"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3079, 3085, R); return R; }
}))
ProcedurePrims.defineReporter("random-color", 3560, 3613, (function() {
  return PrimChecks.procedure.report(3575, 3581, PrimChecks.list.oneOf(3582, 3588, [15, 105, 45, 55]));
}))
ProcedurePrims.defineCommand("clear-stats", 3682, 3792, (function() {
  world.observer.setGlobal("meetown", 0);
  world.observer.setGlobal("meet", 0);
  world.observer.setGlobal("coopown", 0);
  world.observer.setGlobal("defother", 0);
  world.observer.setGlobal("meetother", 0);
  world.observer.setGlobal("coopother", 0);
}))
ProcedurePrims.defineCommand("go", 3820, 4282, (function() {
  var R = ProcedurePrims.callCommand("clear-stats"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("immigrate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { PrimChecks.turtle.setVariable(3989, 3992, "ptr", world.observer.getGlobal("initial-ptr")); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3971, 3974, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("interact"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4077, 4080, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("reproduce"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4128, 4131, R); return R; }
  var R = ProcedurePrims.callCommand("death"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("update-stats"); if (R === DeathInterrupt) { return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("immigrate", 4343, 4591, (function() {
  let emptyHpatches = PrimChecks.agentset.with(4381, 4385, world.patches(), function() { return PrimChecks.math.not(PrimChecks.agentset.any(SelfManager.self().turtlesHere())); }); ProcedurePrims.stack().currentContext().registerStringRunVar("EMPTY-PATCHES", emptyHpatches);
  let howHmany = PrimChecks.list.min(4489, 4492, ListPrims.list(world.observer.getGlobal("immigrants-per-day"), PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 4518, 4523, 112, emptyHpatches)))); ProcedurePrims.stack().currentContext().registerStringRunVar("HOW-MANY", howHmany);
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4541, 4544, 1904, PrimChecks.list.nOf(4545, 4549, PrimChecks.validator.checkArg('N-OF', 4545, 4549, 1, howHmany), PrimChecks.validator.checkArg('N-OF', 4545, 4549, 120, emptyHpatches))), function() { var R = ProcedurePrims.callCommand("create-turtle"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4541, 4544, R); return R; }
}))
ProcedurePrims.defineCommand("interact", 4599, 6139, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.turtlesOn(SelfManager.self().getNeighbors4()), function() {
    world.observer.setGlobal("meet", PrimChecks.math.plus(4931, 4932, PrimChecks.validator.checkArg('+', 4931, 4932, 1, world.observer.getGlobal("meet")), 1));
    world.observer.setGlobal("meet-agg", PrimChecks.math.plus(4961, 4962, PrimChecks.validator.checkArg('+', 4961, 4962, 1, world.observer.getGlobal("meet-agg")), 1));
    if (Prims.equality(PrimChecks.turtleOrLink.getVariable(5046, 5051, "color"), PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtleOrLink.getVariable(5055, 5060, "color"); }))) {
      world.observer.setGlobal("meetown", PrimChecks.math.plus(5164, 5165, PrimChecks.validator.checkArg('+', 5164, 5165, 1, world.observer.getGlobal("meetown")), 1));
      world.observer.setGlobal("meetown-agg", PrimChecks.math.plus(5202, 5203, PrimChecks.validator.checkArg('+', 5202, 5203, 1, world.observer.getGlobal("meetown-agg")), 1));
      if (PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtle.getVariable(5287, 5307, "cooperate-with-same?"); })) {
        world.observer.setGlobal("coopown", PrimChecks.math.plus(5349, 5350, PrimChecks.validator.checkArg('+', 5349, 5350, 1, world.observer.getGlobal("coopown")), 1));
        world.observer.setGlobal("coopown-agg", PrimChecks.math.plus(5389, 5390, PrimChecks.validator.checkArg('+', 5389, 5390, 1, world.observer.getGlobal("coopown-agg")), 1));
        var R = ProcedurePrims.ask(SelfManager.myself(), function() {
          PrimChecks.turtle.setVariable(5418, 5421, "ptr", PrimChecks.math.minus(5426, 5427, PrimChecks.validator.checkArg('-', 5426, 5427, 1, PrimChecks.turtle.getVariable(5422, 5425, "ptr")), PrimChecks.validator.checkArg('-', 5426, 5427, 1, world.observer.getGlobal("cost-of-giving"))));
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5401, 5404, R); return R; }
        PrimChecks.turtle.setVariable(5457, 5460, "ptr", PrimChecks.math.plus(5465, 5466, PrimChecks.validator.checkArg('+', 5465, 5466, 1, PrimChecks.turtle.getVariable(5461, 5464, "ptr")), PrimChecks.validator.checkArg('+', 5465, 5466, 1, world.observer.getGlobal("gain-of-receiving"))));
      }
    }
    if (!Prims.equality(PrimChecks.turtleOrLink.getVariable(5569, 5574, "color"), PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtleOrLink.getVariable(5579, 5584, "color"); }))) {
      world.observer.setGlobal("meetother", PrimChecks.math.plus(5664, 5665, PrimChecks.validator.checkArg('+', 5664, 5665, 1, world.observer.getGlobal("meetother")), 1));
      world.observer.setGlobal("meetother-agg", PrimChecks.math.plus(5706, 5707, PrimChecks.validator.checkArg('+', 5706, 5707, 1, world.observer.getGlobal("meetother-agg")), 1));
      if (PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtle.getVariable(5818, 5843, "cooperate-with-different?"); })) {
        world.observer.setGlobal("coopother", PrimChecks.math.plus(5889, 5890, PrimChecks.validator.checkArg('+', 5889, 5890, 1, world.observer.getGlobal("coopother")), 1));
        world.observer.setGlobal("coopother-agg", PrimChecks.math.plus(5933, 5934, PrimChecks.validator.checkArg('+', 5933, 5934, 1, world.observer.getGlobal("coopother-agg")), 1));
        var R = ProcedurePrims.ask(SelfManager.myself(), function() {
          PrimChecks.turtle.setVariable(5962, 5965, "ptr", PrimChecks.math.minus(5970, 5971, PrimChecks.validator.checkArg('-', 5970, 5971, 1, PrimChecks.turtle.getVariable(5966, 5969, "ptr")), PrimChecks.validator.checkArg('-', 5970, 5971, 1, world.observer.getGlobal("cost-of-giving"))));
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5945, 5948, R); return R; }
        PrimChecks.turtle.setVariable(6001, 6004, "ptr", PrimChecks.math.plus(6009, 6010, PrimChecks.validator.checkArg('+', 6009, 6010, 1, PrimChecks.turtle.getVariable(6005, 6008, "ptr")), PrimChecks.validator.checkArg('+', 6009, 6010, 1, world.observer.getGlobal("gain-of-receiving"))));
      }
      else {
        world.observer.setGlobal("defother", PrimChecks.math.plus(6075, 6076, PrimChecks.validator.checkArg('+', 6075, 6076, 1, world.observer.getGlobal("defother")), 1));
        world.observer.setGlobal("defother-agg", PrimChecks.math.plus(6117, 6118, PrimChecks.validator.checkArg('+', 6117, 6118, 1, world.observer.getGlobal("defother-agg")), 1));
      }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4676, 4679, R); return R; }
}))
ProcedurePrims.defineCommand("reproduce", 6202, 6675, (function() {
  if (Prims.lt(PrimChecks.math.randomFloat(1), PrimChecks.turtle.getVariable(6328, 6331, "ptr"))) {
    let destination = PrimChecks.agentset.oneOfWith(null, null, SelfManager.self().getNeighbors4(), function() { return PrimChecks.math.not(PrimChecks.agentset.any(SelfManager.self().turtlesHere())); }); ProcedurePrims.stack().currentContext().registerStringRunVar("DESTINATION", destination);
    if (!Prims.equality(destination, Nobody)) {
      var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
        SelfManager.self().moveTo(destination);
        var R = ProcedurePrims.callCommand("mutate"); if (R === DeathInterrupt) { return R; }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6604, 6609, R); return R; }
    }
  }
}))
ProcedurePrims.defineCommand("mutate", 6747, 7273, (function() {
  if (Prims.lt(PrimChecks.math.randomFloat(1), world.observer.getGlobal("mutation-rate"))) {
    let oldHcolor = PrimChecks.turtleOrLink.getVariable(6855, 6860, "color"); ProcedurePrims.stack().currentContext().registerStringRunVar("OLD-COLOR", oldHcolor);
    while (Prims.equality(PrimChecks.turtleOrLink.getVariable(6872, 6877, "color"), oldHcolor)) {
      PrimChecks.turtleOrLink.setVariable(6903, 6908, "color", PrimChecks.procedure.callReporter(6909, 6921, "random-color"));
    }
  }
  if (Prims.lt(PrimChecks.math.randomFloat(1), world.observer.getGlobal("mutation-rate"))) {
    PrimChecks.turtle.setVariable(7040, 7060, "cooperate-with-same?", PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 7061, 7064, 2, PrimChecks.turtle.getVariable(7065, 7085, "cooperate-with-same?"))));
  }
  if (Prims.lt(PrimChecks.math.randomFloat(1), world.observer.getGlobal("mutation-rate"))) {
    PrimChecks.turtle.setVariable(7138, 7163, "cooperate-with-different?", PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 7164, 7167, 2, PrimChecks.turtle.getVariable(7168, 7193, "cooperate-with-different?"))));
  }
  var R = ProcedurePrims.callCommand("update-shape"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("death", 7281, 7434, (function() {
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if (Prims.lt(PrimChecks.math.randomFloat(1), world.observer.getGlobal("death-rate"))) {
      return SelfManager.self().die();
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(7371, 7374, R); return R; }
}))
ProcedurePrims.defineCommand("update-shape", 7486, 7988, (function() {
  if (PrimChecks.turtle.getVariable(7565, 7585, "cooperate-with-same?")) {
    if (PrimChecks.turtle.getVariable(7599, 7624, "cooperate-with-different?")) {
      PrimChecks.turtleOrLink.setVariable(7637, 7642, "shape", "circle");
    }
    else {
      PrimChecks.turtleOrLink.setVariable(7700, 7705, "shape", "circle 2");
    }
  }
  else {
    if (PrimChecks.turtle.getVariable(7834, 7859, "cooperate-with-different?")) {
      PrimChecks.turtleOrLink.setVariable(7872, 7877, "shape", "square");
    }
    else {
      PrimChecks.turtleOrLink.setVariable(7939, 7944, "shape", "square 2");
    }
  }
}))
ProcedurePrims.defineCommand("update-stats", 8078, 8804, (function() {
  world.observer.setGlobal("last100dd", PrimChecks.procedure.callReporter(8114, 8121, "shorten", PrimChecks.list.lput(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(8148, 8153, "shape"), "square 2"); }), PrimChecks.validator.checkArg('LPUT', 8122, 8126, 8, world.observer.getGlobal("last100dd")))));
  world.observer.setGlobal("last100cc", PrimChecks.procedure.callReporter(8202, 8209, "shorten", PrimChecks.list.lput(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(8236, 8241, "shape"), "circle"); }), PrimChecks.validator.checkArg('LPUT', 8210, 8214, 8, world.observer.getGlobal("last100cc")))));
  world.observer.setGlobal("last100cd", PrimChecks.procedure.callReporter(8288, 8295, "shorten", PrimChecks.list.lput(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(8322, 8327, "shape"), "circle 2"); }), PrimChecks.validator.checkArg('LPUT', 8296, 8300, 8, world.observer.getGlobal("last100cd")))));
  world.observer.setGlobal("last100dc", PrimChecks.procedure.callReporter(8376, 8383, "shorten", PrimChecks.list.lput(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(8410, 8415, "shape"), "square"); }), PrimChecks.validator.checkArg('LPUT', 8384, 8388, 8, world.observer.getGlobal("last100dc")))));
  world.observer.setGlobal("last100coopown", PrimChecks.procedure.callReporter(8462, 8469, "shorten", PrimChecks.list.lput(world.observer.getGlobal("coopown"), PrimChecks.validator.checkArg('LPUT', 8470, 8474, 8, world.observer.getGlobal("last100coopown")))));
  world.observer.setGlobal("last100defother", PrimChecks.procedure.callReporter(8521, 8528, "shorten", PrimChecks.list.lput(world.observer.getGlobal("defother"), PrimChecks.validator.checkArg('LPUT', 8529, 8533, 8, world.observer.getGlobal("last100defother")))));
  world.observer.setGlobal("last100meetown", PrimChecks.procedure.callReporter(8582, 8589, "shorten", PrimChecks.list.lput(world.observer.getGlobal("meetown"), PrimChecks.validator.checkArg('LPUT', 8590, 8594, 8, world.observer.getGlobal("last100meetown")))));
  world.observer.setGlobal("last100coop", PrimChecks.procedure.callReporter(8641, 8648, "shorten", PrimChecks.list.lput(PrimChecks.math.plus(8663, 8664, PrimChecks.validator.checkArg('+', 8663, 8664, 1, world.observer.getGlobal("coopown")), PrimChecks.validator.checkArg('+', 8663, 8664, 1, world.observer.getGlobal("coopother"))), PrimChecks.validator.checkArg('LPUT', 8649, 8653, 8, world.observer.getGlobal("last100coop")))));
  world.observer.setGlobal("last100meet", PrimChecks.procedure.callReporter(8711, 8718, "shorten", PrimChecks.list.lput(world.observer.getGlobal("meet"), PrimChecks.validator.checkArg('LPUT', 8719, 8723, 8, world.observer.getGlobal("last100meet")))));
  world.observer.setGlobal("last100meetother", PrimChecks.procedure.callReporter(8764, 8771, "shorten", PrimChecks.list.lput(world.observer.getGlobal("meetother"), PrimChecks.validator.checkArg('LPUT', 8772, 8776, 8, world.observer.getGlobal("last100meetother")))));
}))
ProcedurePrims.defineReporter("shorten", 8885, 8992, (function(theHlist) {
  if (Prims.gt(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 8913, 8919, 12, theHlist)), 100)) {
    return PrimChecks.procedure.report(8941, 8947, PrimChecks.list.butFirst('butfirst', 8948, 8956, PrimChecks.validator.checkArg('BUTFIRST', 8948, 8956, 12, theHlist)));
  }
  else {
    return PrimChecks.procedure.report(8974, 8980, theHlist);
  }
}))
ProcedurePrims.defineReporter("meetown-percent", 9059, 9110, (function() {
  return PrimChecks.procedure.report(9077, 9083, PrimChecks.math.div(9092, 9093, PrimChecks.validator.checkArg('/', 9092, 9093, 1, world.observer.getGlobal("meetown")), PrimChecks.list.max(9094, 9097, ListPrims.list(1, world.observer.getGlobal("meet")))));
}))
ProcedurePrims.defineReporter("meetown-agg-percent", 9124, 9187, (function() {
  return PrimChecks.procedure.report(9146, 9152, PrimChecks.math.div(9165, 9166, PrimChecks.validator.checkArg('/', 9165, 9166, 1, world.observer.getGlobal("meetown-agg")), PrimChecks.list.max(9167, 9170, ListPrims.list(1, world.observer.getGlobal("meet-agg")))));
}))
ProcedurePrims.defineReporter("coopown-percent", 9201, 9255, (function() {
  return PrimChecks.procedure.report(9219, 9225, PrimChecks.math.div(9234, 9235, PrimChecks.validator.checkArg('/', 9234, 9235, 1, world.observer.getGlobal("coopown")), PrimChecks.list.max(9236, 9239, ListPrims.list(1, world.observer.getGlobal("meetown")))));
}))
ProcedurePrims.defineReporter("coopown-agg-percent", 9269, 9335, (function() {
  return PrimChecks.procedure.report(9291, 9297, PrimChecks.math.div(9310, 9311, PrimChecks.validator.checkArg('/', 9310, 9311, 1, world.observer.getGlobal("coopown-agg")), PrimChecks.list.max(9312, 9315, ListPrims.list(1, world.observer.getGlobal("meetown-agg")))));
}))
ProcedurePrims.defineReporter("defother-percent", 9349, 9407, (function() {
  return PrimChecks.procedure.report(9368, 9374, PrimChecks.math.div(9384, 9385, PrimChecks.validator.checkArg('/', 9384, 9385, 1, world.observer.getGlobal("defother")), PrimChecks.list.max(9386, 9389, ListPrims.list(1, world.observer.getGlobal("meetother")))));
}))
ProcedurePrims.defineReporter("defother-agg-percent", 9421, 9491, (function() {
  return PrimChecks.procedure.report(9444, 9450, PrimChecks.math.div(9464, 9465, PrimChecks.validator.checkArg('/', 9464, 9465, 1, world.observer.getGlobal("defother-agg")), PrimChecks.list.max(9466, 9469, ListPrims.list(1, world.observer.getGlobal("meetother-agg")))));
}))
ProcedurePrims.defineReporter("consist-ethno-percent", 9505, 9578, (function() {
  return PrimChecks.procedure.report(9529, 9535, PrimChecks.math.div(9557, 9558, PrimChecks.math.plus(9546, 9547, PrimChecks.validator.checkArg('+', 9546, 9547, 1, world.observer.getGlobal("defother")), PrimChecks.validator.checkArg('+', 9546, 9547, 1, world.observer.getGlobal("coopown"))), PrimChecks.list.max(9560, 9563, ListPrims.list(1, world.observer.getGlobal("meet")))));
}))
ProcedurePrims.defineReporter("consist-ethno-agg-percent", 9592, 9681, (function() {
  return PrimChecks.procedure.report(9620, 9626, PrimChecks.math.div(9656, 9657, PrimChecks.math.plus(9641, 9642, PrimChecks.validator.checkArg('+', 9641, 9642, 1, world.observer.getGlobal("defother-agg")), PrimChecks.validator.checkArg('+', 9641, 9642, 1, world.observer.getGlobal("coopown-agg"))), PrimChecks.list.max(9659, 9662, ListPrims.list(1, world.observer.getGlobal("meet-agg")))));
}))
ProcedurePrims.defineReporter("coop-percent", 9695, 9760, (function() {
  return PrimChecks.procedure.report(9710, 9716, PrimChecks.math.div(9739, 9740, PrimChecks.math.plus(9726, 9727, PrimChecks.validator.checkArg('+', 9726, 9727, 1, world.observer.getGlobal("coopown")), PrimChecks.validator.checkArg('+', 9726, 9727, 1, world.observer.getGlobal("coopother"))), PrimChecks.list.max(9742, 9745, ListPrims.list(1, world.observer.getGlobal("meet")))));
}))
ProcedurePrims.defineReporter("coop-agg-percent", 9774, 9854, (function() {
  return PrimChecks.procedure.report(9793, 9799, PrimChecks.math.div(9830, 9831, PrimChecks.math.plus(9813, 9814, PrimChecks.validator.checkArg('+', 9813, 9814, 1, world.observer.getGlobal("coopown-agg")), PrimChecks.validator.checkArg('+', 9813, 9814, 1, world.observer.getGlobal("coopother-agg"))), PrimChecks.list.max(9833, 9836, ListPrims.list(1, world.observer.getGlobal("meet-agg")))));
}))
ProcedurePrims.defineReporter("cc-count", 9868, 9930, (function() {
  return PrimChecks.procedure.report(9879, 9885, PrimChecks.math.div(9900, 9901, PrimChecks.list.sum(9886, 9889, PrimChecks.validator.checkArg('SUM', 9886, 9889, 8, world.observer.getGlobal("last100cc"))), PrimChecks.list.max(9902, 9905, ListPrims.list(1, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 9913, 9919, 12, world.observer.getGlobal("last100cc")))))));
}))
ProcedurePrims.defineReporter("cd-count", 9944, 10006, (function() {
  return PrimChecks.procedure.report(9955, 9961, PrimChecks.math.div(9976, 9977, PrimChecks.list.sum(9962, 9965, PrimChecks.validator.checkArg('SUM', 9962, 9965, 8, world.observer.getGlobal("last100cd"))), PrimChecks.list.max(9978, 9981, ListPrims.list(1, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 9989, 9995, 12, world.observer.getGlobal("last100cd")))))));
}))
ProcedurePrims.defineReporter("dc-count", 10020, 10082, (function() {
  return PrimChecks.procedure.report(10031, 10037, PrimChecks.math.div(10052, 10053, PrimChecks.list.sum(10038, 10041, PrimChecks.validator.checkArg('SUM', 10038, 10041, 8, world.observer.getGlobal("last100dc"))), PrimChecks.list.max(10054, 10057, ListPrims.list(1, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 10065, 10071, 12, world.observer.getGlobal("last100dc")))))));
}))
ProcedurePrims.defineReporter("dd-count", 10096, 10158, (function() {
  return PrimChecks.procedure.report(10107, 10113, PrimChecks.math.div(10128, 10129, PrimChecks.list.sum(10114, 10117, PrimChecks.validator.checkArg('SUM', 10114, 10117, 8, world.observer.getGlobal("last100dd"))), PrimChecks.list.max(10130, 10133, ListPrims.list(1, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 10141, 10147, 12, world.observer.getGlobal("last100dd")))))));
}))
ProcedurePrims.defineReporter("cc-percent", 10172, 10260, (function() {
  return PrimChecks.procedure.report(10185, 10191, PrimChecks.math.div(10201, 10202, PrimChecks.validator.checkArg('/', 10201, 10202, 1, PrimChecks.procedure.callReporter(10192, 10200, "cc-count")), PrimChecks.list.max(10204, 10207, ListPrims.list(1, PrimChecks.math.plus(10247, 10248, PrimChecks.math.plus(10236, 10237, PrimChecks.math.plus(10225, 10226, PrimChecks.validator.checkArg('+', 10225, 10226, 1, PrimChecks.procedure.callReporter(10216, 10224, "cc-count")), PrimChecks.validator.checkArg('+', 10225, 10226, 1, PrimChecks.procedure.callReporter(10227, 10235, "cd-count"))), PrimChecks.validator.checkArg('+', 10236, 10237, 1, PrimChecks.procedure.callReporter(10238, 10246, "dc-count"))), PrimChecks.validator.checkArg('+', 10247, 10248, 1, PrimChecks.procedure.callReporter(10249, 10257, "dd-count")))))));
}))
ProcedurePrims.defineReporter("cd-percent", 10274, 10362, (function() {
  return PrimChecks.procedure.report(10287, 10293, PrimChecks.math.div(10303, 10304, PrimChecks.validator.checkArg('/', 10303, 10304, 1, PrimChecks.procedure.callReporter(10294, 10302, "cd-count")), PrimChecks.list.max(10306, 10309, ListPrims.list(1, PrimChecks.math.plus(10349, 10350, PrimChecks.math.plus(10338, 10339, PrimChecks.math.plus(10327, 10328, PrimChecks.validator.checkArg('+', 10327, 10328, 1, PrimChecks.procedure.callReporter(10318, 10326, "cc-count")), PrimChecks.validator.checkArg('+', 10327, 10328, 1, PrimChecks.procedure.callReporter(10329, 10337, "cd-count"))), PrimChecks.validator.checkArg('+', 10338, 10339, 1, PrimChecks.procedure.callReporter(10340, 10348, "dc-count"))), PrimChecks.validator.checkArg('+', 10349, 10350, 1, PrimChecks.procedure.callReporter(10351, 10359, "dd-count")))))));
}))
ProcedurePrims.defineReporter("dc-percent", 10376, 10464, (function() {
  return PrimChecks.procedure.report(10389, 10395, PrimChecks.math.div(10405, 10406, PrimChecks.validator.checkArg('/', 10405, 10406, 1, PrimChecks.procedure.callReporter(10396, 10404, "dc-count")), PrimChecks.list.max(10408, 10411, ListPrims.list(1, PrimChecks.math.plus(10451, 10452, PrimChecks.math.plus(10440, 10441, PrimChecks.math.plus(10429, 10430, PrimChecks.validator.checkArg('+', 10429, 10430, 1, PrimChecks.procedure.callReporter(10420, 10428, "cc-count")), PrimChecks.validator.checkArg('+', 10429, 10430, 1, PrimChecks.procedure.callReporter(10431, 10439, "cd-count"))), PrimChecks.validator.checkArg('+', 10440, 10441, 1, PrimChecks.procedure.callReporter(10442, 10450, "dc-count"))), PrimChecks.validator.checkArg('+', 10451, 10452, 1, PrimChecks.procedure.callReporter(10453, 10461, "dd-count")))))));
}))
ProcedurePrims.defineReporter("dd-percent", 10478, 10566, (function() {
  return PrimChecks.procedure.report(10491, 10497, PrimChecks.math.div(10507, 10508, PrimChecks.validator.checkArg('/', 10507, 10508, 1, PrimChecks.procedure.callReporter(10498, 10506, "dd-count")), PrimChecks.list.max(10510, 10513, ListPrims.list(1, PrimChecks.math.plus(10553, 10554, PrimChecks.math.plus(10542, 10543, PrimChecks.math.plus(10531, 10532, PrimChecks.validator.checkArg('+', 10531, 10532, 1, PrimChecks.procedure.callReporter(10522, 10530, "cc-count")), PrimChecks.validator.checkArg('+', 10531, 10532, 1, PrimChecks.procedure.callReporter(10533, 10541, "cd-count"))), PrimChecks.validator.checkArg('+', 10542, 10543, 1, PrimChecks.procedure.callReporter(10544, 10552, "dc-count"))), PrimChecks.validator.checkArg('+', 10553, 10554, 1, PrimChecks.procedure.callReporter(10555, 10563, "dd-count")))))));
}))
ProcedurePrims.defineReporter("last100coopown-percent", 10580, 10663, (function() {
  return PrimChecks.procedure.report(10605, 10611, PrimChecks.math.div(10631, 10632, PrimChecks.list.sum(10612, 10615, PrimChecks.validator.checkArg('SUM', 10612, 10615, 8, world.observer.getGlobal("last100coopown"))), PrimChecks.list.max(10633, 10636, ListPrims.list(1, PrimChecks.list.sum(10644, 10647, PrimChecks.validator.checkArg('SUM', 10644, 10647, 8, world.observer.getGlobal("last100meetown")))))));
}))
ProcedurePrims.defineReporter("last100defother-percent", 10677, 10764, (function() {
  return PrimChecks.procedure.report(10703, 10709, PrimChecks.math.div(10730, 10731, PrimChecks.list.sum(10710, 10713, PrimChecks.validator.checkArg('SUM', 10710, 10713, 8, world.observer.getGlobal("last100defother"))), PrimChecks.list.max(10732, 10735, ListPrims.list(1, PrimChecks.list.sum(10743, 10746, PrimChecks.validator.checkArg('SUM', 10743, 10746, 8, world.observer.getGlobal("last100meetother")))))));
}))
ProcedurePrims.defineReporter("last100consist-ethno-percent", 10778, 10888, (function() {
  return PrimChecks.procedure.report(10809, 10815, PrimChecks.math.div(10859, 10860, PrimChecks.math.plus(10837, 10838, PrimChecks.list.sum(10817, 10820, PrimChecks.validator.checkArg('SUM', 10817, 10820, 8, world.observer.getGlobal("last100defother"))), PrimChecks.list.sum(10839, 10842, PrimChecks.validator.checkArg('SUM', 10839, 10842, 8, world.observer.getGlobal("last100coopown")))), PrimChecks.list.max(10861, 10864, ListPrims.list(1, PrimChecks.list.sum(10872, 10875, PrimChecks.validator.checkArg('SUM', 10872, 10875, 8, world.observer.getGlobal("last100meet")))))));
}))
ProcedurePrims.defineReporter("last100meetown-percent", 10902, 10982, (function() {
  return PrimChecks.procedure.report(10927, 10933, PrimChecks.math.div(10953, 10954, PrimChecks.list.sum(10934, 10937, PrimChecks.validator.checkArg('SUM', 10934, 10937, 8, world.observer.getGlobal("last100meetown"))), PrimChecks.list.max(10955, 10958, ListPrims.list(1, PrimChecks.list.sum(10966, 10969, PrimChecks.validator.checkArg('SUM', 10966, 10969, 8, world.observer.getGlobal("last100meet")))))));
}))
ProcedurePrims.defineReporter("last100coop-percent", 10996, 11070, (function() {
  return PrimChecks.procedure.report(11018, 11024, PrimChecks.math.div(11041, 11042, PrimChecks.list.sum(11025, 11028, PrimChecks.validator.checkArg('SUM', 11025, 11028, 8, world.observer.getGlobal("last100coop"))), PrimChecks.list.max(11043, 11046, ListPrims.list(1, PrimChecks.list.sum(11054, 11057, PrimChecks.validator.checkArg('SUM', 11054, 11057, 8, world.observer.getGlobal("last100meet")))))));
}))
world.observer.setGlobal("mutation-rate", 0.005);
world.observer.setGlobal("death-rate", 0.1);
world.observer.setGlobal("immigrants-per-day", 1);
world.observer.setGlobal("initial-ptr", 0.12);
world.observer.setGlobal("cost-of-giving", 0.01);
world.observer.setGlobal("gain-of-receiving", 0.03);
world.observer.setGlobal("immigrant-chance-cooperate-with-same", 0.5);
world.observer.setGlobal("immigrant-chance-cooperate-with-different", 0.5);