var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person lefty":{"name":"person lefty","editableColorIndex":0,"rotate":false,"elements":[{"x":170,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,180,150,165,195,210,225,255,270,240,255],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":187,"ymin":79,"xmax":232,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,300,285,225],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,120,135,195],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person righty":{"name":"person righty","editableColorIndex":0,"rotate":false,"elements":[{"x":50,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[45,60,30,45,75,90,105,135,150,120,135],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":67,"ymin":79,"xmax":112,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,180,165,105],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[45,0,15,75],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'Populations';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('HIV-', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Populations', 'HIV-', function() {
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() {
        return PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 58, 61, 2, PrimChecks.turtle.getVariable(62, 71, "infected?")));
      }));;
    });
  }),
  new PenBundle.Pen('HIV+', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Populations', 'HIV+', function() {
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(58, 64, "known?"); }));;
    });
  }),
  new PenBundle.Pen('HIV?', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Populations', 'HIV?', function() {
      plotManager.plotValue(PrimChecks.math.minus(69, 70, PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(58, 67, "infected?"); }), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(91, 97, "known?"); })));;
    });
  })];
  var setup   = function() {
    return ProcedurePrims.runInPlotContext('Populations', undefined, function() {
      plotManager.setYRange(0, PrimChecks.math.plus(68, 69, PrimChecks.validator.checkArg('+', 68, 69, 1, world.observer.getGlobal("initial-people")), 50));;
    });
  };
  var update  = function() {};
  return new Plot(name, pens, plotOps, "weeks", "people", true, true, true, 0, 52, 0, 350, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])(["infected?", "known?", "infection-length", "coupled?", "couple-length", "commitment", "coupling-tendency", "condom-use", "test-frequency", "partner"], [])('globals [   infection-chance  ;; The chance out of 100 that an infected person will pass on                     ;;   infection during one week of couplehood.   symptoms-show     ;; How long a person will be infected before symptoms occur                     ;;   which may cause the person to get tested.   slider-check-1    ;; Temporary variables for slider values, so that if sliders   slider-check-2    ;;   are changed on the fly, the model will notice and   slider-check-3    ;;   change people\'s tendencies appropriately.   slider-check-4 ]  turtles-own [   infected?          ;; If true, the person is infected.  It may be known or unknown.   known?             ;; If true, the infection is known (and infected? must also be true).   infection-length   ;; How long the person has been infected.   coupled?           ;; If true, the person is in a sexually active couple.   couple-length      ;; How long the person has been in a couple.   ;; the next four values are controlled by sliders   commitment         ;; How long the person will stay in a couple-relationship.   coupling-tendency  ;; How likely the person is to join a couple.   condom-use         ;; The percent chance a person uses protection.   test-frequency     ;; Number of times a person will get tested per year.   partner            ;; The person that is our current partner in a couple. ]  ;;; ;;; SETUP PROCEDURES ;;;  to setup   clear-all   setup-globals   setup-people   reset-ticks end  to setup-globals   set infection-chance 50    ;; if you have unprotected sex with an infected partner,                              ;; you have a 50% chance of being infected   set symptoms-show 200    ;; symptoms show up 200 weeks after infection   set slider-check-1 average-commitment   set slider-check-2 average-coupling-tendency   set slider-check-3 average-condom-use   set slider-check-4 average-test-frequency end  ;; Create carrying-capacity number of people half are righty and half are lefty ;;   and some are sick.  Also assigns colors to people with the ASSIGN-COLORS routine.  to setup-people   create-turtles initial-people     [ setxy random-xcor random-ycor       set known? false       set coupled? false       set partner nobody       ifelse random 2 = 0         [ set shape \"person righty\" ]         [ set shape \"person lefty\" ]       ;; 2.5% of the people start out infected, but they don\'t know it       set infected? (who < initial-people * 0.025)       if infected?         [ set infection-length random-float symptoms-show ]       assign-commitment       assign-coupling-tendency       assign-condom-use       assign-test-frequency       assign-color ] end  ;; Different people are displayed in 3 different colors depending on health ;; green is not infected ;; blue is infected but doesn\'t know it ;; red is infected and knows it  to assign-color  ;; turtle procedure   ifelse not infected?     [ set color green ]     [ ifelse known?       [ set color red ]       [ set color blue ] ] end  ;; The following four procedures assign core turtle variables.  They use ;; the helper procedure RANDOM-NEAR so that the turtle variables have an ;; approximately \"normal\" distribution around the average values set by ;; the sliders.  to assign-commitment  ;; turtle procedure   set commitment random-near average-commitment end  to assign-coupling-tendency  ;; turtle procedure   set coupling-tendency random-near average-coupling-tendency end  to assign-condom-use  ;; turtle procedure   set condom-use random-near average-condom-use end  to assign-test-frequency  ;; turtle procedure   set test-frequency random-near average-test-frequency end  to-report random-near [center]  ;; turtle procedure   let result 0   repeat 40     [ set result (result + random-float center) ]   report result / 20 end  ;;; ;;; GO PROCEDURES ;;;  to go   if all? turtles [known?]     [ stop ]   check-sliders   ask turtles     [ if infected?         [ set infection-length infection-length + 1 ]       if coupled?         [ set couple-length couple-length + 1 ] ]   ask turtles     [ if not coupled?         [ move ] ]   ;; Righties are always the ones to initiate mating.  This is purely   ;; arbitrary choice which makes the coding easier.   ask turtles     [ if not coupled? and shape = \"person righty\" and (random-float 10 < coupling-tendency)         [ couple ] ]   ask turtles [ uncouple ]   ask turtles [ infect ]   ask turtles [ test ]   ask turtles [ assign-color ]   tick end  ;; Each tick a check is made to see if sliders have been changed. ;; If one has been, the corresponding turtle variable is adjusted  to check-sliders   if (slider-check-1 != average-commitment)     [ ask turtles [ assign-commitment ]       set slider-check-1 average-commitment ]   if (slider-check-2 != average-coupling-tendency)     [ ask turtles [ assign-coupling-tendency ]       set slider-check-2 average-coupling-tendency ]   if (slider-check-3 != average-condom-use)     [ ask turtles [ assign-condom-use ]       set slider-check-3 average-condom-use ]   if (slider-check-4 != average-test-frequency )     [ ask turtles [ assign-test-frequency ]       set slider-check-4 average-test-frequency ] end  ;; People move about at random.  to move  ;; turtle procedure   rt random-float 360   fd 1 end  ;; People have a chance to couple depending on their tendency to have sex and ;; if they meet.  To better show that coupling has occurred, the patches below ;; the couple turn gray.  to couple  ;; turtle procedure -- righties only!   let potential-partner one-of (turtles-at -1 0)                           with [not coupled? and shape = \"person lefty\"]   if potential-partner != nobody     [ if random-float 10 < [coupling-tendency] of potential-partner       [ set partner potential-partner         set coupled? true         ask partner [ set coupled? true ]         ask partner [ set partner myself ]         move-to patch-here ;; move to center of patch         ask potential-partner [move-to patch-here] ;; partner moves to center of patch         set pcolor gray - 3         ask (patch-at -1 0) [ set pcolor gray - 3 ] ] ] end  ;; If two peoples are together for longer than either person\'s commitment variable ;; allows, the couple breaks up.  to uncouple  ;; turtle procedure   if coupled? and (shape = \"person righty\")     [ if (couple-length > commitment) or          ([couple-length] of partner) > ([commitment] of partner)         [ set coupled? false           set couple-length 0           ask partner [ set couple-length 0 ]           set pcolor black           ask (patch-at -1 0) [ set pcolor black ]           ask partner [ set partner nobody ]           ask partner [ set coupled? false ]           set partner nobody ] ] end  ;; Infection can occur if either person is infected, but the infection is unknown. ;; This model assumes that people with known infections will continue to couple, ;; but will automatically practice safe sex, regardless of their condom-use tendency. ;; Note also that for condom use to occur, both people must want to use one.  If ;; either person chooses not to use a condom, infection is possible.  Changing the ;; primitive to AND in the third line will make it such that if either person ;; wants to use a condom, infection will not occur.  to infect  ;; turtle procedure   if coupled? and infected? and not known?     [ if random-float 10 > condom-use or          random-float 10 > ([condom-use] of partner)         [ if random-float 100 < infection-chance             [ ask partner [ set infected? true ] ] ] ] end  ;; People have a tendency to check out their health status based on a slider value. ;; This tendency is checked against a random number in this procedure. However, after being infected for ;; some amount of time called SYMPTOMS-SHOW, there is a 5% chance that the person will ;; become ill and go to a doctor and be tested even without the tendency to check.  to test  ;; turtle procedure   if random-float 52 < test-frequency     [ if infected?         [ set known? true ] ]   if infection-length > symptoms-show     [ if random-float 100 < 5         [ set known? true ] ] end  ;;; ;;; MONITOR PROCEDURES ;;;  to-report %infected   ifelse any? turtles     [ report (count turtles with [infected?] / count turtles) * 100 ]     [ report 0 ] end   ; Copyright 1997 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":288,"y":10,"width":433,"height":434,"dimensions":{"minPxcor":-12,"maxPxcor":12,"minPycor":-12,"maxPycor":12,"patchSize":17,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"weeks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","source":"setup","x":12,"y":81,"width":83,"height":33,"display":"setup","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","source":"go","x":96,"y":81,"width":83,"height":33,"display":"go","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return PrimChecks.procedure.callReporter(49, 58, \"%infected\"); })","source":"%infected","x":184,"y":74,"width":83,"height":45,"oldSize":true,"display":"% infected","precision":2,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 50; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 500; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"initial-people","x":7,"y":37,"width":269,"height":33,"oldSize":true,"display":"initial-people","min":"50","max":"500","default":300,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 200; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"average-commitment","x":7,"y":162,"width":269,"height":33,"oldSize":true,"display":"average-commitment","min":"1","max":"200","default":50,"step":"1","units":"weeks","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 10; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"average-coupling-tendency","x":7,"y":127,"width":269,"height":33,"oldSize":true,"display":"average-coupling-tendency","min":"0","max":"10","default":5,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 10; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"average-condom-use","x":7,"y":197,"width":269,"height":33,"oldSize":true,"display":"average-condom-use","min":"0","max":"10","default":0,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 2; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","variable":"average-test-frequency","x":7,"y":232,"width":269,"height":33,"oldSize":true,"display":"average-test-frequency","min":"0","max":"2","default":0,"step":"0.01","units":"times/year","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Populations', undefined, function() {     plotManager.setYRange(0, PrimChecks.math.plus(68, 69, PrimChecks.validator.checkArg('+', 68, 69, 1, world.observer.getGlobal(\"initial-people\")), 50));;   }); }","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Populations', 'HIV-', function() {     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() {       return PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 58, 61, 2, PrimChecks.turtle.getVariable(62, 71, \"infected?\")));     }));;   }); }","display":"HIV-","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [not infected?]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Populations', 'HIV+', function() {     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(58, 64, \"known?\"); }));;   }); }","display":"HIV+","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [known?]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Populations', 'HIV?', function() {     plotManager.plotValue(PrimChecks.math.minus(69, 70, PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(58, 67, \"infected?\"); }), PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(91, 97, \"known?\"); })));;   }); }","display":"HIV?","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [infected?] - count turtles with [known?]","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"Populations","x":7,"y":268,"width":269,"height":199,"oldSize":true,"xAxis":"weeks","yAxis":"people","xmin":0,"xmax":52,"ymin":0,"ymax":350,"autoPlotX":true,"autoPlotY":true,"legendOn":true,"setupCode":"set-plot-y-range 0 (initial-people + 50)","updateCode":"","pens":[{"display":"HIV-","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [not infected?]","type":"pen"},{"display":"HIV+","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [known?]","type":"pen"},{"display":"HIV?","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [infected?] - count turtles with [known?]","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["initial-people", "average-commitment", "average-coupling-tendency", "average-condom-use", "average-test-frequency", "infection-chance", "symptoms-show", "slider-check-1", "slider-check-2", "slider-check-3", "slider-check-4"], ["initial-people", "average-commitment", "average-coupling-tendency", "average-condom-use", "average-test-frequency"], [], -12, 12, -12, 12, 17, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 1399, 1462, (function() {
  world.clearAll();
  var R = ProcedurePrims.callCommand("setup-globals"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("setup-people"); if (R === DeathInterrupt) { return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-globals", 1470, 1888, (function() {
  world.observer.setGlobal("infection-chance", 50);
  world.observer.setGlobal("symptoms-show", 200);
  world.observer.setGlobal("slider-check-1", world.observer.getGlobal("average-commitment"));
  world.observer.setGlobal("slider-check-2", world.observer.getGlobal("average-coupling-tendency"));
  world.observer.setGlobal("slider-check-3", world.observer.getGlobal("average-condom-use"));
  world.observer.setGlobal("slider-check-4", world.observer.getGlobal("average-test-frequency"));
}))
ProcedurePrims.defineCommand("setup-people", 2064, 2648, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(world.observer.getGlobal("initial-people"), ""), function() {
    PrimChecks.turtle.setXY(2115, 2120, RandomPrims.randomFloatInRange(world.topology.minPxcor, world.topology.maxPxcor), RandomPrims.randomFloatInRange(world.topology.minPycor, world.topology.maxPycor));
    PrimChecks.turtle.setVariable(2155, 2161, "known?", false);
    PrimChecks.turtle.setVariable(2178, 2186, "coupled?", false);
    PrimChecks.turtle.setVariable(2203, 2210, "partner", Nobody);
    if (Prims.equality(RandomPrims.randomLong(2), 0)) {
      PrimChecks.turtleOrLink.setVariable(2258, 2263, "shape", "person righty");
    }
    else {
      PrimChecks.turtleOrLink.setVariable(2296, 2301, "shape", "person lefty");
    }
    PrimChecks.turtle.setVariable(2400, 2409, "infected?", Prims.lt(PrimChecks.turtle.getVariable(2411, 2414, "who"), PrimChecks.math.mult(2432, 2433, PrimChecks.validator.checkArg('*', 2432, 2433, 1, world.observer.getGlobal("initial-people")), 0.025)));
    if (PrimChecks.turtle.getVariable(2450, 2459, "infected?")) {
      PrimChecks.turtle.setVariable(2474, 2490, "infection-length", PrimChecks.math.randomFloat(PrimChecks.validator.checkArg('RANDOM-FLOAT', 2491, 2503, 1, world.observer.getGlobal("symptoms-show"))));
    }
    var R = ProcedurePrims.callCommand("assign-commitment"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("assign-coupling-tendency"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("assign-condom-use"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("assign-test-frequency"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("assign-color"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2079, 2093, R); return R; }
}))
ProcedurePrims.defineCommand("assign-color", 2830, 2982, (function() {
  if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2873, 2876, 2, PrimChecks.turtle.getVariable(2877, 2886, "infected?")))) {
    PrimChecks.turtleOrLink.setVariable(2897, 2902, "color", 55);
  }
  else {
    if (PrimChecks.turtle.getVariable(2924, 2930, "known?")) {
      PrimChecks.turtleOrLink.setVariable(2943, 2948, "color", 15);
    }
    else {
      PrimChecks.turtleOrLink.setVariable(2967, 2972, "color", 105);
    }
  }
}))
ProcedurePrims.defineCommand("assign-commitment", 3225, 3312, (function() {
  PrimChecks.turtle.setVariable(3270, 3280, "commitment", PrimChecks.procedure.callReporter(3281, 3292, "random-near", world.observer.getGlobal("average-commitment")));
}))
ProcedurePrims.defineCommand("assign-coupling-tendency", 3320, 3428, (function() {
  PrimChecks.turtle.setVariable(3372, 3389, "coupling-tendency", PrimChecks.procedure.callReporter(3390, 3401, "random-near", world.observer.getGlobal("average-coupling-tendency")));
}))
ProcedurePrims.defineCommand("assign-condom-use", 3436, 3523, (function() {
  PrimChecks.turtle.setVariable(3481, 3491, "condom-use", PrimChecks.procedure.callReporter(3492, 3503, "random-near", world.observer.getGlobal("average-condom-use")));
}))
ProcedurePrims.defineCommand("assign-test-frequency", 3531, 3630, (function() {
  PrimChecks.turtle.setVariable(3580, 3594, "test-frequency", PrimChecks.procedure.callReporter(3595, 3606, "random-near", world.observer.getGlobal("average-test-frequency")));
}))
ProcedurePrims.defineReporter("random-near", 3645, 3785, (function(center) {
  let result = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("RESULT", result);
  for (let _index_3704_3710 = 0, _repeatcount_3704_3710 = StrictMath.floor(40); _index_3704_3710 < _repeatcount_3704_3710; _index_3704_3710++) {
    result = PrimChecks.math.plus(3739, 3740, PrimChecks.validator.checkArg('+', 3739, 3740, 1, result), PrimChecks.math.randomFloat(PrimChecks.validator.checkArg('RANDOM-FLOAT', 3741, 3753, 1, center))); ProcedurePrims.stack().currentContext().updateStringRunVar("RESULT", result);
  }
  return PrimChecks.procedure.report(3766, 3772, PrimChecks.math.div(3780, 3781, PrimChecks.validator.checkArg('/', 3780, 3781, 1, result), 20));
}))
ProcedurePrims.defineCommand("go", 3820, 4454, (function() {
  if (PrimChecks.agentset.all(3828, 3832, world.turtles(), function() { return PrimChecks.turtle.getVariable(3842, 3848, "known?"); })) {
    return PrimChecks.procedure.stop(3856, 3860);
  }
  var R = ProcedurePrims.callCommand("check-sliders"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if (PrimChecks.turtle.getVariable(3902, 3911, "infected?")) {
      PrimChecks.turtle.setVariable(3926, 3942, "infection-length", PrimChecks.math.plus(3960, 3961, PrimChecks.validator.checkArg('+', 3960, 3961, 1, PrimChecks.turtle.getVariable(3943, 3959, "infection-length")), 1));
    }
    if (PrimChecks.turtle.getVariable(3975, 3983, "coupled?")) {
      PrimChecks.turtle.setVariable(3998, 4011, "couple-length", PrimChecks.math.plus(4026, 4027, PrimChecks.validator.checkArg('+', 4026, 4027, 1, PrimChecks.turtle.getVariable(4012, 4025, "couple-length")), 1));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3881, 3884, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 4057, 4060, 2, PrimChecks.turtle.getVariable(4061, 4069, "coupled?")))) {
      var R = ProcedurePrims.callCommand("move"); if (R === DeathInterrupt) { return R; }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4036, 4039, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if (((PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 4235, 4238, 2, PrimChecks.turtle.getVariable(4239, 4247, "coupled?"))) && Prims.equality(PrimChecks.turtleOrLink.getVariable(4252, 4257, "shape"), "person righty")) && Prims.lt(PrimChecks.math.randomFloat(10), PrimChecks.turtle.getVariable(4301, 4318, "coupling-tendency")))) {
      var R = ProcedurePrims.callCommand("couple"); if (R === DeathInterrupt) { return R; }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4214, 4217, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("uncouple"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4343, 4346, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("infect"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4370, 4373, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("test"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4395, 4398, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("assign-color"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4418, 4421, R); return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("check-sliders", 4595, 5163, (function() {
  if (!Prims.equality(world.observer.getGlobal("slider-check-1"), world.observer.getGlobal("average-commitment"))) {
    var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("assign-commitment"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4659, 4662, R); return R; }
    world.observer.setGlobal("slider-check-1", world.observer.getGlobal("average-commitment"));
  }
  if (!Prims.equality(world.observer.getGlobal("slider-check-2"), world.observer.getGlobal("average-coupling-tendency"))) {
    var R = ProcedurePrims.ask(world.turtles(), function() {
      var R = ProcedurePrims.callCommand("assign-coupling-tendency"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4796, 4799, R); return R; }
    world.observer.setGlobal("slider-check-2", world.observer.getGlobal("average-coupling-tendency"));
  }
  if (!Prims.equality(world.observer.getGlobal("slider-check-3"), world.observer.getGlobal("average-condom-use"))) {
    var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("assign-condom-use"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4940, 4943, R); return R; }
    world.observer.setGlobal("slider-check-3", world.observer.getGlobal("average-condom-use"));
  }
  if (!Prims.equality(world.observer.getGlobal("slider-check-4"), world.observer.getGlobal("average-test-frequency"))) {
    var R = ProcedurePrims.ask(world.turtles(), function() {
      var R = ProcedurePrims.callCommand("assign-test-frequency"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5075, 5078, R); return R; }
    world.observer.setGlobal("slider-check-4", world.observer.getGlobal("average-test-frequency"));
  }
}))
ProcedurePrims.defineCommand("move", 5204, 5259, (function() {
  SelfManager.self().right(PrimChecks.math.randomFloat(360));
  SelfManager.self()._optimalFdOne();
}))
ProcedurePrims.defineCommand("couple", 5450, 6095, (function() {
  let potentialHpartner = PrimChecks.agentset.oneOfWith(null, null, SelfManager.self().turtlesAt(-1, 0), function() {
    return (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 5577, 5580, 2, PrimChecks.turtle.getVariable(5581, 5589, "coupled?"))) && Prims.equality(PrimChecks.turtleOrLink.getVariable(5594, 5599, "shape"), "person lefty"));
  }); ProcedurePrims.stack().currentContext().registerStringRunVar("POTENTIAL-PARTNER", potentialHpartner);
  if (!Prims.equality(potentialHpartner, Nobody)) {
    if (Prims.lt(PrimChecks.math.randomFloat(10), PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 5700, 5702, 1904, potentialHpartner), function() { return PrimChecks.turtle.getVariable(5681, 5698, "coupling-tendency"); }))) {
      PrimChecks.turtle.setVariable(5733, 5740, "partner", potentialHpartner);
      PrimChecks.turtle.setVariable(5771, 5779, "coupled?", true);
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5793, 5796, 1904, PrimChecks.turtle.getVariable(5797, 5804, "partner")), function() { PrimChecks.turtle.setVariable(5811, 5819, "coupled?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5793, 5796, R); return R; }
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5835, 5838, 1904, PrimChecks.turtle.getVariable(5839, 5846, "partner")), function() { PrimChecks.turtle.setVariable(5853, 5860, "partner", SelfManager.myself()); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5835, 5838, R); return R; }
      SelfManager.self().moveTo(SelfManager.self().getPatchHere());
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5932, 5935, 1904, potentialHpartner), function() { SelfManager.self().moveTo(SelfManager.self().getPatchHere()); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5932, 5935, R); return R; }
      PrimChecks.patch.setVariable(6023, 6029, "pcolor", PrimChecks.math.minus(6035, 6036, 5, 3));
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6047, 6050, 1904, SelfManager.self()._optimalPatchWest()), function() { PrimChecks.patch.setVariable(6073, 6079, "pcolor", PrimChecks.math.minus(6085, 6086, 5, 3)); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6047, 6050, R); return R; }
    }
  }
}))
ProcedurePrims.defineCommand("uncouple", 6220, 6707, (function() {
  if ((PrimChecks.validator.checkArg('AND', 6264, 6267, 2, PrimChecks.turtle.getVariable(6255, 6263, "coupled?")) && Prims.equality(PrimChecks.turtleOrLink.getVariable(6269, 6274, "shape"), "person righty"))) {
    if ((Prims.gt(PrimChecks.turtle.getVariable(6304, 6317, "couple-length"), PrimChecks.turtle.getVariable(6320, 6330, "commitment")) || Prims.gt(PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 6361, 6363, 1904, PrimChecks.turtle.getVariable(6364, 6371, "partner")), function() { return PrimChecks.turtle.getVariable(6346, 6359, "couple-length"); }), PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 6389, 6391, 1904, PrimChecks.turtle.getVariable(6392, 6399, "partner")), function() { return PrimChecks.turtle.getVariable(6377, 6387, "commitment"); })))) {
      PrimChecks.turtle.setVariable(6415, 6423, "coupled?", false);
      PrimChecks.turtle.setVariable(6444, 6457, "couple-length", 0);
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6470, 6473, 1904, PrimChecks.turtle.getVariable(6474, 6481, "partner")), function() { PrimChecks.turtle.setVariable(6488, 6501, "couple-length", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6470, 6473, R); return R; }
      PrimChecks.patch.setVariable(6520, 6526, "pcolor", 0);
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6543, 6546, 1904, SelfManager.self()._optimalPatchWest()), function() { PrimChecks.patch.setVariable(6569, 6575, "pcolor", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6543, 6546, R); return R; }
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6594, 6597, 1904, PrimChecks.turtle.getVariable(6598, 6605, "partner")), function() { PrimChecks.turtle.setVariable(6612, 6619, "partner", Nobody); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6594, 6597, R); return R; }
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6639, 6642, 1904, PrimChecks.turtle.getVariable(6643, 6650, "partner")), function() { PrimChecks.turtle.setVariable(6657, 6665, "coupled?", false); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6639, 6642, R); return R; }
      PrimChecks.turtle.setVariable(6688, 6695, "partner", Nobody);
    }
  }
}))
ProcedurePrims.defineCommand("infect", 7260, 7529, (function() {
  if (((PrimChecks.validator.checkArg('AND', 7302, 7305, 2, PrimChecks.turtle.getVariable(7293, 7301, "coupled?")) && PrimChecks.validator.checkArg('AND', 7302, 7305, 2, PrimChecks.turtle.getVariable(7306, 7315, "infected?"))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 7320, 7323, 2, PrimChecks.turtle.getVariable(7324, 7330, "known?"))))) {
    if ((Prims.gt(PrimChecks.math.randomFloat(10), PrimChecks.turtle.getVariable(7358, 7368, "condom-use")) || Prims.gt(PrimChecks.math.randomFloat(10), PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 7413, 7415, 1904, PrimChecks.turtle.getVariable(7416, 7423, "partner")), function() { return PrimChecks.turtle.getVariable(7401, 7411, "condom-use"); })))) {
      if (Prims.lt(PrimChecks.math.randomFloat(100), world.observer.getGlobal("infection-chance"))) {
        var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 7488, 7491, 1904, PrimChecks.turtle.getVariable(7492, 7499, "partner")), function() { PrimChecks.turtle.setVariable(7506, 7515, "infected?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(7488, 7491, R); return R; }
      }
    }
  }
}))
ProcedurePrims.defineCommand("test", 7897, 8108, (function() {
  if (Prims.lt(PrimChecks.math.randomFloat(52), PrimChecks.turtle.getVariable(7946, 7960, "test-frequency"))) {
    if (PrimChecks.turtle.getVariable(7970, 7979, "infected?")) {
      PrimChecks.turtle.setVariable(7994, 8000, "known?", true);
    }
  }
  if (Prims.gt(PrimChecks.turtle.getVariable(8015, 8031, "infection-length"), world.observer.getGlobal("symptoms-show"))) {
    if (Prims.lt(PrimChecks.math.randomFloat(100), 5)) {
      PrimChecks.turtle.setVariable(8092, 8098, "known?", true);
    }
  }
}))
ProcedurePrims.defineReporter("%infected", 8155, 8274, (function() {
  if (PrimChecks.agentset.any(world.turtles())) {
    return PrimChecks.procedure.report(8193, 8199, PrimChecks.math.mult(8249, 8250, PrimChecks.math.div(8232, 8233, PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return PrimChecks.turtle.getVariable(8221, 8230, "infected?"); }), PrimChecks.agentset.count(world.turtles())), 100));
  }
  else {
    return PrimChecks.procedure.report(8263, 8269, 0);
  }
}))
world.observer.setGlobal("initial-people", 300);
world.observer.setGlobal("average-commitment", 50);
world.observer.setGlobal("average-coupling-tendency", 5);
world.observer.setGlobal("average-condom-use", 0);
world.observer.setGlobal("average-test-frequency", 0);