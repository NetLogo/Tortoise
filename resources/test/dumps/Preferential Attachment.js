var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var resources = {  };
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'Degree Distribution (log-log)';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Point), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Degree Distribution (log-log)', 'default', function() {
      if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 36, 39, 2, world.observer.getGlobal("plot?")))) {
        return PrimChecks.procedure.stop(48, 52);
      }
      let maxHdegree = PrimChecks.list.max(70, 73, PrimChecks.validator.checkArg('MAX', 70, 73, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.agentset.count(LinkPrims.linkNeighbors("LINKS")); }))); ProcedurePrims.stack().currentContext().registerStringRunVar("MAX-DEGREE", maxHdegree);
      plotManager.resetPen();
      let degree = 1; ProcedurePrims.stack().currentContext().registerStringRunVar("DEGREE", degree);
      while (Prims.lte(degree, maxHdegree)) {
        let matches = PrimChecks.agentset.with(460, 464, world.turtles(), function() { return Prims.equality(PrimChecks.agentset.count(LinkPrims.linkNeighbors("LINKS")), degree); }); ProcedurePrims.stack().currentContext().registerStringRunVar("MATCHES", matches);
        if (PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 502, 506, 112, matches))) {
          plotManager.plotPoint(PrimChecks.math.log(528, 531, PrimChecks.validator.checkArg('LOG', 528, 531, 1, degree), 10), PrimChecks.math.log(555, 558, PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 560, 565, 112, matches)), 10));
        }
        degree = PrimChecks.math.plus(600, 601, PrimChecks.validator.checkArg('+', 600, 601, 1, degree), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("DEGREE", degree);
      };
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "log(degree)", "log(# of nodes)", false, true, true, 0, 0.3, 0, 0.3, setup, update);
})(), (function() {
  var name    = 'Degree Distribution';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Bar), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Degree Distribution', 'default', function() {
      if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 36, 39, 2, world.observer.getGlobal("plot?")))) {
        return PrimChecks.procedure.stop(48, 52);
      }
      let maxHdegree = PrimChecks.list.max(70, 73, PrimChecks.validator.checkArg('MAX', 70, 73, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.agentset.count(LinkPrims.linkNeighbors("LINKS")); }))); ProcedurePrims.stack().currentContext().registerStringRunVar("MAX-DEGREE", maxHdegree);
      plotManager.resetPen();
      plotManager.setXRange(1, PrimChecks.math.plus(187, 188, PrimChecks.validator.checkArg('+', 187, 188, 1, maxHdegree), 1));
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.agentset.count(LinkPrims.linkNeighbors("LINKS")); }));;
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "degree", "# of nodes", false, true, true, 1, 10, 0, 10, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])([], [])(';;;;;;;;;;;;;;;;;;;;;;;; ;;; Setup Procedures ;;; ;;;;;;;;;;;;;;;;;;;;;;;;  to setup   clear-all   set-default-shape turtles \"circle\"   ;; make the initial network of two turtles and an edge   make-node nobody        ;; first node, unattached   make-node turtle 0      ;; second node, attached to first node   reset-ticks end  ;;;;;;;;;;;;;;;;;;;;;;; ;;; Main Procedures ;;; ;;;;;;;;;;;;;;;;;;;;;;;  to go   ;; new edge is green, old edges are gray   ask links [ set color gray ]   make-node find-partner         ;; find partner & use it as attachment                                  ;; point for new node   tick   if layout? [ layout ] end  ;; used for creating a new node to make-node [old-node]   create-turtles 1   [     set color red     if old-node != nobody       [ create-link-with old-node [ set color green ]         ;; position the new node near its partner         move-to old-node         fd 8       ]   ] end  ;; This code is the heart of the \"preferential attachment\" mechanism, and acts like ;; a lottery where each node gets a ticket for every connection it already has. ;; While the basic idea is the same as in the Lottery Example (in the Code Examples ;; section of the Models Library), things are made simpler here by the fact that we ;; can just use the links as if they were the \"tickets\": we first pick a random link, ;; and than we pick one of the two ends of that link. to-report find-partner   report [one-of both-ends] of one-of links end  ;;;;;;;;;;;;;; ;;; Layout ;;; ;;;;;;;;;;;;;;  ;; resize-nodes, change back and forth from size based on degree to a size of 1 to resize-nodes   ifelse all? turtles [size <= 1]   [     ;; a node is a circle with diameter determined by     ;; the SIZE variable; using SQRT makes the circle\'s     ;; area proportional to its degree     ask turtles [ set size sqrt count link-neighbors ]   ]   [     ask turtles [ set size 1 ]   ] end  to layout   ;; the number 3 here is arbitrary; more repetitions slows down the   ;; model, but too few gives poor layouts   repeat 3 [     ;; the more turtles we have to fit into the same amount of space,     ;; the smaller the inputs to layout-spring we\'ll need to use     let factor sqrt count turtles     ;; numbers here are arbitrarily chosen for pleasing appearance     layout-spring turtles links (1 / factor) (7 / factor) (1 / factor)     display  ;; for smooth animation   ]   ;; don\'t bump the edges of the world   let x-offset max [xcor] of turtles + min [xcor] of turtles   let y-offset max [ycor] of turtles + min [ycor] of turtles   ;; big jumps look funny, so only adjust a little each time   set x-offset limit-magnitude x-offset 0.1   set y-offset limit-magnitude y-offset 0.1   ask turtles [ setxy (xcor - x-offset / 2) (ycor - y-offset / 2) ] end  to-report limit-magnitude [number limit]   if number > limit [ report limit ]   if number < (- limit) [ report (- limit) ]   report number end   ; Copyright 2005 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":345,"y":10,"width":459,"height":459,"dimensions":{"minPxcor":-45,"maxPxcor":45,"minPycor":-45,"maxPycor":45,"patchSize":5,"wrappingAllowedInX":false,"wrappingAllowedInY":false},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":60,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Degree Distribution (log-log)', 'default', function() {     if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 36, 39, 2, world.observer.getGlobal(\"plot?\")))) {       return PrimChecks.procedure.stop(48, 52);     }     let maxHdegree = PrimChecks.list.max(70, 73, PrimChecks.validator.checkArg('MAX', 70, 73, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.agentset.count(LinkPrims.linkNeighbors(\"LINKS\")); }))); ProcedurePrims.stack().currentContext().registerStringRunVar(\"MAX-DEGREE\", maxHdegree);     plotManager.resetPen();     let degree = 1; ProcedurePrims.stack().currentContext().registerStringRunVar(\"DEGREE\", degree);     while (Prims.lte(degree, maxHdegree)) {       let matches = PrimChecks.agentset.with(460, 464, world.turtles(), function() { return Prims.equality(PrimChecks.agentset.count(LinkPrims.linkNeighbors(\"LINKS\")), degree); }); ProcedurePrims.stack().currentContext().registerStringRunVar(\"MATCHES\", matches);       if (PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 502, 506, 112, matches))) {         plotManager.plotPoint(PrimChecks.math.log(528, 531, PrimChecks.validator.checkArg('LOG', 528, 531, 1, degree), 10), PrimChecks.math.log(555, 558, PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 560, 565, 112, matches)), 10));       }       degree = PrimChecks.math.plus(600, 601, PrimChecks.validator.checkArg('+', 600, 601, 1, degree), 1); ProcedurePrims.stack().currentContext().updateStringRunVar(\"DEGREE\", degree);     };   }); }","type":"pen","display":"default","interval":1,"mode":2,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if not plot? [ stop ] let max-degree max [count link-neighbors] of turtles ;; for this plot, the axes are logarithmic, so we can't ;; use \"histogram-from\"; we have to plot the points ;; ourselves one at a time plot-pen-reset  ;; erase what we plotted before ;; the way we create the network there is never a zero degree node, ;; so start plotting at degree one let degree 1 while [degree <= max-degree] [   let matches turtles with [count link-neighbors = degree]   if any? matches     [ plotxy log degree 10              log (count matches) 10 ]   set degree degree + 1 ]","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Degree Distribution (log-log)","x":8,"y":330,"width":325,"height":166,"oldSize":true,"xAxis":"log(degree)","yAxis":"log(# of nodes)","xmin":0,"xmax":0.3,"ymin":0,"ymax":0.3,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"default","interval":1,"mode":2,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if not plot? [ stop ] let max-degree max [count link-neighbors] of turtles ;; for this plot, the axes are logarithmic, so we can't ;; use \"histogram-from\"; we have to plot the points ;; ourselves one at a time plot-pen-reset  ;; erase what we plotted before ;; the way we create the network there is never a zero degree node, ;; so start plotting at degree one let degree 1 while [degree <= max-degree] [   let matches turtles with [count link-neighbors = degree]   if any? matches     [ plotxy log degree 10              log (count matches) 10 ]   set degree degree + 1 ]","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Degree Distribution', 'default', function() {     if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 36, 39, 2, world.observer.getGlobal(\"plot?\")))) {       return PrimChecks.procedure.stop(48, 52);     }     let maxHdegree = PrimChecks.list.max(70, 73, PrimChecks.validator.checkArg('MAX', 70, 73, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.agentset.count(LinkPrims.linkNeighbors(\"LINKS\")); }))); ProcedurePrims.stack().currentContext().registerStringRunVar(\"MAX-DEGREE\", maxHdegree);     plotManager.resetPen();     plotManager.setXRange(1, PrimChecks.math.plus(187, 188, PrimChecks.validator.checkArg('+', 187, 188, 1, maxHdegree), 1));     plotManager.drawHistogramFrom(PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.agentset.count(LinkPrims.linkNeighbors(\"LINKS\")); }));;   }); }","type":"pen","display":"default","interval":1,"mode":1,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if not plot? [ stop ] let max-degree max [count link-neighbors] of turtles plot-pen-reset  ;; erase what we plotted before set-plot-x-range 1 (max-degree + 1)  ;; + 1 to make room for the width of the last bar histogram [count link-neighbors] of turtles","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Degree Distribution","x":8,"y":153,"width":325,"height":176,"oldSize":true,"xAxis":"degree","yAxis":"# of nodes","xmin":1,"xmax":10,"ymin":0,"ymax":10,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"default","interval":1,"mode":1,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if not plot? [ stop ] let max-degree max [count link-neighbors] of turtles plot-pen-reset  ;; erase what we plotted before set-plot-x-range 1 (max-degree + 1)  ;; + 1 to make room for the width of the last bar histogram [count link-neighbors] of turtles","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":6,"y":25,"width":66,"height":33,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":93,"y":64,"width":77,"height":33,"oldSize":true,"forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":6,"y":64,"width":85,"height":33,"oldSize":true,"display":"go-once","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"variable":"plot?","x":187,"y":30,"width":146,"height":33,"oldSize":true,"display":"plot?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"layout?","x":187,"y":64,"width":146,"height":33,"oldSize":true,"display":"layout?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return PrimChecks.agentset.count(world.turtles()); })","type":"monitor","source":"count turtles","x":237,"y":100,"width":79,"height":45,"oldSize":true,"display":"# of nodes","precision":3,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"layout\"); if (R === StopInterrupt) { return R; }","type":"button","source":"layout","x":7,"y":102,"width":102,"height":33,"oldSize":true,"display":"redo layout","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"resize-nodes\"); if (R === StopInterrupt) { return R; }","type":"button","source":"resize-nodes","x":115,"y":102,"width":110,"height":33,"oldSize":true,"display":"resize nodes","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}])(resources)(tortoise_require("extensions/all").porters())(["plot?", "layout?"], ["plot?", "layout?"], [], -45, 45, -45, 45, 5, false, false, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 79, 322, (function() {
  world.clearAll();
  BreedManager.setDefaultShape(world.turtles().getSpecialName(), "circle")
  var R = ProcedurePrims.callCommand("make-node", Nobody); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("make-node", PrimChecks.turtle.getTurtle(255, 261, 0)); if (R === DeathInterrupt) { return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("go", 403, 638, (function() {
  var R = ProcedurePrims.ask(world.links(), function() { PrimChecks.turtleOrLink.setVariable(467, 472, "color", 5); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(451, 454, R); return R; }
  var R = ProcedurePrims.callCommand("make-node", PrimChecks.procedure.callReporter(492, 504, "find-partner")); if (R === DeathInterrupt) { return R; }
  world.ticker.tick();
  if (world.observer.getGlobal("layout?")) {
    var R = ProcedurePrims.callCommand("layout"); if (R === DeathInterrupt) { return R; }
  }
}))
ProcedurePrims.defineCommand("make-node", 678, 920, (function(oldHnode) {
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(1, ""), function() {
    PrimChecks.turtleOrLink.setVariable(730, 735, "color", 15);
    if (!Prims.equality(oldHnode, Nobody)) {
      var R = ProcedurePrims.ask(LinkPrims.createLinkWith(oldHnode, "LINKS"), function() { PrimChecks.turtleOrLink.setVariable(806, 811, "color", 55); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(774, 790, R); return R; }
      SelfManager.self().moveTo(oldHnode);
      SelfManager.self().fd(8);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(701, 715, R); return R; }
}))
ProcedurePrims.defineReporter("find-partner", 1407, 1464, (function() {
  return PrimChecks.procedure.report(1422, 1428, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 1448, 1450, 1904, PrimChecks.list.oneOf(1451, 1457, world.links())), function() { return PrimChecks.list.oneOf(1430, 1436, SelfManager.self().bothEnds()); }));
}))
ProcedurePrims.defineCommand("resize-nodes", 1598, 1896, (function() {
  if (PrimChecks.agentset.all(1620, 1624, world.turtles(), function() { return Prims.lte(PrimChecks.turtle.getVariable(1634, 1638, "size"), 1); })) {
    var R = ProcedurePrims.ask(world.turtles(), function() {
      PrimChecks.turtle.setVariable(1820, 1824, "size", PrimChecks.math.sqrt(1825, 1829, PrimChecks.agentset.count(LinkPrims.linkNeighbors("LINKS"))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1802, 1805, R); return R; }
  }
  else {
    var R = ProcedurePrims.ask(world.turtles(), function() { PrimChecks.turtle.setVariable(1883, 1887, "size", 1); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1865, 1868, R); return R; }
  }
}))
ProcedurePrims.defineCommand("layout", 1904, 2762, (function() {
  for (let _index_2025_2031 = 0, _repeatcount_2025_2031 = StrictMath.floor(3); _index_2025_2031 < _repeatcount_2025_2031; _index_2025_2031++) {
    let factor = PrimChecks.math.sqrt(2186, 2190, PrimChecks.agentset.count(world.turtles())); ProcedurePrims.stack().currentContext().registerStringRunVar("FACTOR", factor);
    LayoutManager.layoutSpring(world.turtles(), world.links(), PrimChecks.math.div(2307, 2308, 1, PrimChecks.validator.checkArg('/', 2307, 2308, 1, factor)), PrimChecks.math.div(2320, 2321, 7, PrimChecks.validator.checkArg('/', 2320, 2321, 1, factor)), PrimChecks.math.div(2333, 2334, 1, PrimChecks.validator.checkArg('/', 2333, 2334, 1, factor)));
    Prims.display();
  }
  let xHoffset = PrimChecks.math.plus(2460, 2461, PrimChecks.list.max(2438, 2441, PrimChecks.validator.checkArg('MAX', 2438, 2441, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(2443, 2447, "xcor"); }))), PrimChecks.list.min(2462, 2465, PrimChecks.validator.checkArg('MIN', 2462, 2465, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(2467, 2471, "xcor"); })))); ProcedurePrims.stack().currentContext().registerStringRunVar("X-OFFSET", xHoffset);
  let yHoffset = PrimChecks.math.plus(2521, 2522, PrimChecks.list.max(2499, 2502, PrimChecks.validator.checkArg('MAX', 2499, 2502, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(2504, 2508, "ycor"); }))), PrimChecks.list.min(2523, 2526, PrimChecks.validator.checkArg('MIN', 2523, 2526, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(2528, 2532, "ycor"); })))); ProcedurePrims.stack().currentContext().registerStringRunVar("Y-OFFSET", yHoffset);
  xHoffset = PrimChecks.procedure.callReporter(2621, 2636, "limit-magnitude", xHoffset, 0.1); ProcedurePrims.stack().currentContext().updateStringRunVar("X-OFFSET", xHoffset);
  yHoffset = PrimChecks.procedure.callReporter(2665, 2680, "limit-magnitude", yHoffset, 0.1); ProcedurePrims.stack().currentContext().updateStringRunVar("Y-OFFSET", yHoffset);
  var R = ProcedurePrims.ask(world.turtles(), function() {
    PrimChecks.turtle.setXY(2710, 2715, PrimChecks.math.minus(2722, 2723, PrimChecks.validator.checkArg('-', 2722, 2723, 1, PrimChecks.turtle.getVariable(2717, 2721, "xcor")), PrimChecks.math.div(2733, 2734, PrimChecks.validator.checkArg('/', 2733, 2734, 1, xHoffset), 2)), PrimChecks.math.minus(2744, 2745, PrimChecks.validator.checkArg('-', 2744, 2745, 1, PrimChecks.turtle.getVariable(2739, 2743, "ycor")), PrimChecks.math.div(2755, 2756, PrimChecks.validator.checkArg('/', 2755, 2756, 1, yHoffset), 2)));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2696, 2699, R); return R; }
}))
ProcedurePrims.defineReporter("limit-magnitude", 2777, 2906, (function(number, limit) {
  if (Prims.gt(number, limit)) {
    return PrimChecks.procedure.report(2830, 2836, limit);
  }
  if (Prims.lt(number, PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 2860, 2861, 1, limit)))) {
    return PrimChecks.procedure.report(2871, 2877, PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 2879, 2880, 1, limit)));
  }
  return PrimChecks.procedure.report(2892, 2898, number);
}))
world.observer.setGlobal("plot?", true);
world.observer.setGlobal("layout?", true);