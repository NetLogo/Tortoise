var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":30,"y2":225,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":270,"y2":225,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'Class Histogram';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Bar), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Class Histogram', 'default', function() {
      plotManager.resetPen();
      plotManager.setPenColor(15);
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(96, 101, "color"), 15); }));
      plotManager.setPenColor(55);
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(159, 164, "color"), 55); }));
      plotManager.setPenColor(105);
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(223, 228, "color"), 105); }));;
    });
  })];
  var setup   = function() {
    return ProcedurePrims.runInPlotContext('Class Histogram', undefined, function() { plotManager.setYRange(0, world.observer.getGlobal("num-people"));; });
  };
  var update  = function() {};
  return new Plot(name, pens, plotOps, "Classes", "Turtles", false, false, false, 0, 3, 0, 250, setup, update);
})(), (function() {
  var name    = 'Lorenz Curve';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('lorenz', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Lorenz Curve', 'lorenz', function() {
      plotManager.resetPen();
      plotManager.setPenInterval(PrimChecks.math.div(74, 75, 100, PrimChecks.validator.checkArg('/', 74, 75, 1, world.observer.getGlobal("num-people"))));
      plotManager.plotValue(0);
      var R = PrimChecks.task.forEach(94, 101, PrimChecks.validator.checkArg('FOREACH', 94, 101, 8, world.observer.getGlobal("lorenz-points")), PrimChecks.task.checked(116, 120, function(_0) {
        PrimChecks.procedure.runArgCountCheck('run', 116, 120, 1, arguments.length);
        plotManager.plotValue(_0);
      }, "plot", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(94, 101, R); return R; };
    });
  }),
  new PenBundle.Pen('equal', plotOps.makePenOps, false, new PenBundle.State(0, 100, PenBundle.DisplayMode.Line), function() {
    return ProcedurePrims.runInPlotContext('Lorenz Curve', 'equal', function() {
      plotManager.plotValue(0);
      plotManager.plotValue(100);;
    });
  }, function() {})];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "Pop %", "Wealth %", true, false, false, 0, 100, 0, 100, setup, update);
})(), (function() {
  var name    = 'Class Plot';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('low', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Class Plot', 'low', function() {
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(58, 63, "color"), 15); }));;
    });
  }),
  new PenBundle.Pen('mid', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Class Plot', 'mid', function() {
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(58, 63, "color"), 55); }));;
    });
  }),
  new PenBundle.Pen('up', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Class Plot', 'up', function() {
      plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(58, 63, "color"), 105); }));;
    });
  })];
  var setup   = function() {
    return ProcedurePrims.runInPlotContext('Class Plot', undefined, function() { plotManager.setYRange(0, world.observer.getGlobal("num-people"));; });
  };
  var update  = function() {};
  return new Plot(name, pens, plotOps, "Time", "Turtles", true, true, true, 0, 50, 0, 250, setup, update);
})(), (function() {
  var name    = 'Gini-Index v. Time';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Gini-Index v. Time', 'default', function() {
      plotManager.plotValue(PrimChecks.math.div(72, 73, PrimChecks.math.div(58, 59, PrimChecks.validator.checkArg('/', 58, 59, 1, world.observer.getGlobal("gini-index-reserve")), PrimChecks.validator.checkArg('/', 58, 59, 1, world.observer.getGlobal("num-people"))), 0.5));;
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "Time", "Gini", false, true, true, 0, 50, 0, 1, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])(["age", "wealth", "life-expectancy", "metabolism", "vision"], [])('globals [   max-grain    ; maximum amount any patch can hold   gini-index-reserve   lorenz-points ]  patches-own [   grain-here      ; the current amount of grain on this patch   max-grain-here  ; the maximum amount of grain this patch can hold ]  turtles-own [   age              ; how old a turtle is   wealth           ; the amount of grain a turtle has   life-expectancy  ; maximum age that a turtle can reach   metabolism       ; how much grain a turtle eats each time   vision           ; how many patches ahead a turtle can see ]  ;;; ;;; SETUP AND HELPERS ;;;  to setup   clear-all   ;; set global variables to appropriate values   set max-grain 50   ;; call other procedures to set up various parts of the world   setup-patches   setup-turtles   update-lorenz-and-gini   reset-ticks end  ;; set up the initial amounts of grain each patch has to setup-patches   ;; give some patches the highest amount of grain possible --   ;; these patches are the \"best land\"   ask patches     [ set max-grain-here 0       if (random-float 100) <= percent-best-land         [ set max-grain-here max-grain           set grain-here max-grain-here ] ]   ;; spread that grain around the window a little and put a little back   ;; into the patches that are the \"best land\" found above   repeat 5     [ ask patches with [max-grain-here != 0]         [ set grain-here max-grain-here ]       diffuse grain-here 0.25 ]   repeat 10     [ diffuse grain-here 0.25 ]          ;; spread the grain around some more   ask patches     [ set grain-here floor grain-here    ;; round grain levels to whole numbers       set max-grain-here grain-here      ;; initial grain level is also maximum       recolor-patch ] end  to recolor-patch  ;; patch procedure -- use color to indicate grain level   set pcolor scale-color yellow grain-here 0 max-grain end  ;; set up the initial values for the turtle variables to setup-turtles   set-default-shape turtles \"person\"   create-turtles num-people     [ move-to one-of patches  ;; put turtles on patch centers       set size 1.5  ;; easier to see       set-initial-turtle-vars ]   recolor-turtles end  to set-initial-turtle-vars   face one-of neighbors4   set life-expectancy life-expectancy-min +                         random (life-expectancy-max - life-expectancy-min + 1)   set metabolism 1 + random metabolism-max   set wealth metabolism + random 50   set vision 1 + random max-vision   set age random life-expectancy end  ;; Set the class of the turtles -- if a turtle has less than a third ;; the wealth of the richest turtle, color it red.  If between one ;; and two thirds, color it green.  If over two thirds, color it blue. to recolor-turtles   let max-wealth max [wealth] of turtles   ask turtles     [ ifelse (wealth <= max-wealth / 3)         [ set color red ]         [ ifelse (wealth <= (max-wealth * 2 / 3))             [ set color green ]             [ set color blue ] ] ] end  ;;; ;;; GO AND HELPERS ;;;  to go   ask turtles     [ turn-towards-grain ]  ;; choose direction holding most grain within the turtle\'s vision   harvest   ask turtles     [ move-eat-age-die ]   recolor-turtles    ;; grow grain every grain-growth-interval clock ticks   if ticks mod grain-growth-interval = 0     [ ask patches [ grow-grain ] ]    update-lorenz-and-gini   tick end  ;; determine the direction which is most profitable for each turtle in ;; the surrounding patches within the turtles\' vision to turn-towards-grain  ;; turtle procedure   set heading 0   let best-direction 0   let best-amount grain-ahead   set heading 90   if (grain-ahead > best-amount)     [ set best-direction 90       set best-amount grain-ahead ]   set heading 180   if (grain-ahead > best-amount)     [ set best-direction 180       set best-amount grain-ahead ]   set heading 270   if (grain-ahead > best-amount)     [ set best-direction 270       set best-amount grain-ahead ]   set heading best-direction end  to-report grain-ahead  ;; turtle procedure   let total 0   let how-far 1   repeat vision     [ set total total + [grain-here] of patch-ahead how-far       set how-far how-far + 1 ]   report total end  to grow-grain  ;; patch procedure   ;; if a patch does not have it\'s maximum amount of grain, add   ;; num-grain-grown to its grain amount   if (grain-here < max-grain-here)     [ set grain-here grain-here + num-grain-grown       ;; if the new amount of grain on a patch is over its maximum       ;; capacity, set it to its maximum       if (grain-here > max-grain-here)         [ set grain-here max-grain-here ]       recolor-patch ] end  ;; each turtle harvests the grain on its patch.  if there are multiple ;; turtles on a patch, divide the grain evenly among the turtles to harvest   ; have turtles harvest before any turtle sets the patch to 0   ask turtles     [ set wealth floor (wealth + (grain-here / (count turtles-here))) ]   ;; now that the grain has been harvested, have the turtles make the   ;; patches which they are on have no grain   ask turtles     [ set grain-here 0       recolor-patch ] end  to move-eat-age-die  ;; turtle procedure   fd 1   ;; consume some grain according to metabolism   set wealth (wealth - metabolism)   ;; grow older   set age (age + 1)   ;; check for death conditions: if you have no grain or   ;; you\'re older than the life expectancy or if some random factor   ;; holds, then you \"die\" and are \"reborn\" (in fact, your variables   ;; are just reset to new random values)   if (wealth < 0) or (age >= life-expectancy)     [ set-initial-turtle-vars ] end  ;; this procedure recomputes the value of gini-index-reserve ;; and the points in lorenz-points for the Lorenz and Gini-Index plots to update-lorenz-and-gini   let sorted-wealths sort [wealth] of turtles   let total-wealth sum sorted-wealths   let wealth-sum-so-far 0   let index 0   set gini-index-reserve 0   set lorenz-points []    ;; now actually plot the Lorenz curve -- along the way, we also   ;; calculate the Gini index.   ;; (see the Info tab for a description of the curve and measure)   repeat num-people [     set wealth-sum-so-far (wealth-sum-so-far + item index sorted-wealths)     set lorenz-points lput ((wealth-sum-so-far / total-wealth) * 100) lorenz-points     set index (index + 1)     set gini-index-reserve       gini-index-reserve +       (index / num-people) -       (wealth-sum-so-far / total-wealth)   ] end   ; Copyright 1998 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":385,"y":7,"width":463,"height":463,"dimensions":{"minPxcor":-25,"maxPxcor":25,"minPycor":-25,"maxPycor":25,"patchSize":9,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 15; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"max-vision","x":200,"y":7,"width":180,"height":50,"oldSize":false,"display":"max-vision","min":"1","max":"15","default":5,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 2; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1000; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"num-people","x":5,"y":7,"width":190,"height":50,"oldSize":false,"display":"num-people","min":"2","max":"1000","default":250,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 5; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 25; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"percent-best-land","x":200,"y":60,"width":180,"height":50,"oldSize":false,"display":"percent-best-land","min":"5","max":"25","default":10,"step":"1","units":"%","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 25; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"metabolism-max","x":5,"y":60,"width":190,"height":50,"oldSize":false,"display":"metabolism-max","min":"1","max":"25","default":15,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"life-expectancy-min","x":5,"y":115,"width":190,"height":50,"oldSize":false,"display":"life-expectancy-min","min":"1","max":"100","default":1,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"life-expectancy-max","x":200,"y":115,"width":180,"height":50,"oldSize":false,"display":"life-expectancy-max","min":"1","max":"100","default":83,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":120,"y":175,"width":76,"height":35,"oldSize":false,"display":"setup","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":200,"y":175,"width":70,"height":35,"oldSize":false,"display":"go","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 10; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"grain-growth-interval","x":5,"y":220,"width":190,"height":50,"oldSize":false,"display":"grain-growth-interval","min":"1","max":"10","default":1,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 10; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"num-grain-grown","x":200,"y":220,"width":180,"height":50,"oldSize":false,"display":"num-grain-grown","min":"1","max":"10","default":4,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Class Histogram', undefined, function() { plotManager.setYRange(0, world.observer.getGlobal(\"num-people\"));; }); }","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Class Histogram', 'default', function() {     plotManager.resetPen();     plotManager.setPenColor(15);     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(96, 101, \"color\"), 15); }));     plotManager.setPenColor(55);     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(159, 164, \"color\"), 55); }));     plotManager.setPenColor(105);     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(223, 228, \"color\"), 105); }));;   }); }","type":"pen","display":"default","interval":1,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset set-plot-pen-color red plot count turtles with [color = red] set-plot-pen-color green plot count turtles with [color = green] set-plot-pen-color blue plot count turtles with [color = blue]","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Class Histogram","x":5,"y":280,"width":375,"height":190,"oldSize":false,"xAxis":"Classes","yAxis":"Turtles","xmin":0,"xmax":3,"ymin":0,"ymax":250,"autoPlotX":false,"autoPlotY":false,"legendOn":false,"setupCode":"set-plot-y-range 0 num-people","updateCode":"","pens":[{"display":"default","interval":1,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset set-plot-pen-color red plot count turtles with [color = red] set-plot-pen-color green plot count turtles with [color = green] set-plot-pen-color blue plot count turtles with [color = blue]","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Lorenz Curve', 'lorenz', function() {     plotManager.resetPen();     plotManager.setPenInterval(PrimChecks.math.div(74, 75, 100, PrimChecks.validator.checkArg('/', 74, 75, 1, world.observer.getGlobal(\"num-people\"))));     plotManager.plotValue(0);     var R = PrimChecks.task.forEach(94, 101, PrimChecks.validator.checkArg('FOREACH', 94, 101, 8, world.observer.getGlobal(\"lorenz-points\")), PrimChecks.task.checked(116, 120, function(_0) {       PrimChecks.procedure.runArgCountCheck('run', 116, 120, 1, arguments.length);       plotManager.plotValue(_0);     }, \"plot\", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(94, 101, R); return R; };   }); }","type":"pen","display":"lorenz","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset set-plot-pen-interval 100 / num-people plot 0 foreach lorenz-points plot","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Lorenz Curve', 'equal', function() {     plotManager.plotValue(0);     plotManager.plotValue(100);;   }); }","compiledUpdateCode":"function() {}","type":"pen","display":"equal","interval":100,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"plot 0 plot 100","updateCode":"","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Lorenz Curve","x":385,"y":475,"width":250,"height":210,"oldSize":false,"xAxis":"Pop %","yAxis":"Wealth %","xmin":0,"xmax":100,"ymin":0,"ymax":100,"autoPlotX":false,"autoPlotY":false,"legendOn":true,"setupCode":"","updateCode":"","pens":[{"display":"lorenz","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset set-plot-pen-interval 100 / num-people plot 0 foreach lorenz-points plot","type":"pen"},{"display":"equal","interval":100,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"plot 0 plot 100","updateCode":"","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Class Plot', undefined, function() { plotManager.setYRange(0, world.observer.getGlobal(\"num-people\"));; }); }","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Class Plot', 'low', function() {     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(58, 63, \"color\"), 15); }));;   }); }","type":"pen","display":"low","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [color = red]","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Class Plot', 'mid', function() {     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(58, 63, \"color\"), 55); }));;   }); }","type":"pen","display":"mid","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [color = green]","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Class Plot', 'up', function() {     plotManager.plotValue(PrimChecks.agentset.countWith(null, null, world.turtles(), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(58, 63, \"color\"), 105); }));;   }); }","type":"pen","display":"up","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [color = blue]","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Class Plot","x":5,"y":475,"width":375,"height":210,"oldSize":false,"xAxis":"Time","yAxis":"Turtles","xmin":0,"xmax":50,"ymin":0,"ymax":250,"autoPlotX":true,"autoPlotY":true,"legendOn":true,"setupCode":"set-plot-y-range 0 num-people","updateCode":"","pens":[{"display":"low","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [color = red]","type":"pen"},{"display":"mid","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [color = green]","type":"pen"},{"display":"up","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plot count turtles with [color = blue]","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Gini-Index v. Time', 'default', function() {     plotManager.plotValue(PrimChecks.math.div(72, 73, PrimChecks.math.div(58, 59, PrimChecks.validator.checkArg('/', 58, 59, 1, world.observer.getGlobal(\"gini-index-reserve\")), PrimChecks.validator.checkArg('/', 58, 59, 1, world.observer.getGlobal(\"num-people\"))), 0.5));;   }); }","type":"pen","display":"default","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plot (gini-index-reserve / num-people) / 0.5","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Gini-Index v. Time","x":640,"y":475,"width":210,"height":210,"oldSize":false,"xAxis":"Time","yAxis":"Gini","xmin":0,"xmax":50,"ymin":0,"ymax":1,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"default","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plot (gini-index-reserve / num-people) / 0.5","type":"pen"}],"compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["max-vision", "num-people", "percent-best-land", "metabolism-max", "life-expectancy-min", "life-expectancy-max", "grain-growth-interval", "num-grain-grown", "max-grain", "gini-index-reserve", "lorenz-points"], ["max-vision", "num-people", "percent-best-land", "metabolism-max", "life-expectancy-min", "life-expectancy-max", "grain-growth-interval", "num-grain-grown"], ["grain-here", "max-grain-here"], -25, 25, -25, 25, 9, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 572, 792, (function() {
  world.clearAll();
  world.observer.setGlobal("max-grain", 50);
  var R = ProcedurePrims.callCommand("setup-patches"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("setup-turtles"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("update-lorenz-and-gini"); if (R === DeathInterrupt) { return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-patches", 854, 1692, (function() {
  var R = ProcedurePrims.ask(world.patches(), function() {
    PrimChecks.patch.setVariable(994, 1008, "max-grain-here", 0);
    if (Prims.lte(PrimChecks.math.randomFloat(100), world.observer.getGlobal("percent-best-land"))) {
      PrimChecks.patch.setVariable(1076, 1090, "max-grain-here", world.observer.getGlobal("max-grain"));
      PrimChecks.patch.setVariable(1115, 1125, "grain-here", PrimChecks.patch.getVariable(1126, 1140, "max-grain-here"));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(972, 975, R); return R; }
  for (let _index_1278_1284 = 0, _repeatcount_1278_1284 = StrictMath.floor(5); _index_1278_1284 < _repeatcount_1278_1284; _index_1278_1284++) {
    var R = ProcedurePrims.ask(PrimChecks.agentset.with(1305, 1309, world.patches(), function() { return !Prims.equality(PrimChecks.patch.getVariable(1311, 1325, "max-grain-here"), 0); }), function() {
      PrimChecks.patch.setVariable(1346, 1356, "grain-here", PrimChecks.patch.getVariable(1357, 1371, "max-grain-here"));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1293, 1296, R); return R; }
    world.topology.diffuse("grain-here", 0.25, false)
  }
  for (let _index_1408_1414 = 0, _repeatcount_1408_1414 = StrictMath.floor(10); _index_1408_1414 < _repeatcount_1408_1414; _index_1408_1414++) {
    world.topology.diffuse("grain-here", 0.25, false)
  }
  var R = ProcedurePrims.ask(world.patches(), function() {
    PrimChecks.patch.setVariable(1520, 1530, "grain-here", PrimChecks.math.floor(PrimChecks.validator.checkArg('FLOOR', 1531, 1536, 1, PrimChecks.patch.getVariable(1537, 1547, "grain-here"))));
    PrimChecks.patch.setVariable(1600, 1614, "max-grain-here", PrimChecks.patch.getVariable(1615, 1625, "grain-here"));
    var R = ProcedurePrims.callCommand("recolor-patch"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1498, 1501, R); return R; }
}))
ProcedurePrims.defineCommand("recolor-patch", 1700, 1826, (function() {
  PrimChecks.patch.setVariable(1777, 1783, "pcolor", ColorModel.scaleColor(45, PrimChecks.patch.getVariable(1803, 1813, "grain-here"), 0, world.observer.getGlobal("max-grain")));
}))
ProcedurePrims.defineCommand("setup-turtles", 1888, 2116, (function() {
  BreedManager.setDefaultShape(world.turtles().getSpecialName(), "person")
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(world.observer.getGlobal("num-people"), ""), function() {
    SelfManager.self().moveTo(PrimChecks.list.oneOf(1981, 1987, world.patches()));
    PrimChecks.turtle.setVariable(2039, 2043, "size", 1.5);
    var R = ProcedurePrims.callCommand("set-initial-turtle-vars"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1941, 1955, R); return R; }
  var R = ProcedurePrims.callCommand("recolor-turtles"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("set-initial-turtle-vars", 2124, 2443, (function() {
  SelfManager.self().face(PrimChecks.validator.checkArg('FACE', 2150, 2154, 768, PrimChecks.list.oneOf(2155, 2161, SelfManager.self().getNeighbors4())));
  PrimChecks.turtle.setVariable(2179, 2194, "life-expectancy", PrimChecks.math.plus(2215, 2216, PrimChecks.validator.checkArg('+', 2215, 2216, 1, world.observer.getGlobal("life-expectancy-min")), PrimChecks.math.random(2241, 2247, PrimChecks.math.plus(2291, 2292, PrimChecks.math.minus(2269, 2270, PrimChecks.validator.checkArg('-', 2269, 2270, 1, world.observer.getGlobal("life-expectancy-max")), PrimChecks.validator.checkArg('-', 2269, 2270, 1, world.observer.getGlobal("life-expectancy-min"))), 1))));
  PrimChecks.turtle.setVariable(2302, 2312, "metabolism", PrimChecks.math.plus(2315, 2316, 1, PrimChecks.math.random(2317, 2323, PrimChecks.validator.checkArg('RANDOM', 2317, 2323, 1, world.observer.getGlobal("metabolism-max")))));
  PrimChecks.turtle.setVariable(2345, 2351, "wealth", PrimChecks.math.plus(2363, 2364, PrimChecks.validator.checkArg('+', 2363, 2364, 1, PrimChecks.turtle.getVariable(2352, 2362, "metabolism")), RandomPrims.randomLong(50)));
  PrimChecks.turtle.setVariable(2381, 2387, "vision", PrimChecks.math.plus(2390, 2391, 1, PrimChecks.math.random(2392, 2398, PrimChecks.validator.checkArg('RANDOM', 2392, 2398, 1, world.observer.getGlobal("max-vision")))));
  PrimChecks.turtle.setVariable(2416, 2419, "age", PrimChecks.math.random(2420, 2426, PrimChecks.validator.checkArg('RANDOM', 2420, 2426, 1, PrimChecks.turtle.getVariable(2427, 2442, "life-expectancy"))));
}))
ProcedurePrims.defineCommand("recolor-turtles", 2658, 2912, (function() {
  let maxHwealth = PrimChecks.list.max(2691, 2694, PrimChecks.validator.checkArg('MAX', 2691, 2694, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(2696, 2702, "wealth"); }))); ProcedurePrims.stack().currentContext().registerStringRunVar("MAX-WEALTH", maxHwealth);
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if (Prims.lte(PrimChecks.turtle.getVariable(2743, 2749, "wealth"), PrimChecks.math.div(2764, 2765, PrimChecks.validator.checkArg('/', 2764, 2765, 1, maxHwealth), 3))) {
      PrimChecks.turtleOrLink.setVariable(2783, 2788, "color", 15);
    }
    else {
      if (Prims.lte(PrimChecks.turtle.getVariable(2813, 2819, "wealth"), PrimChecks.math.div(2839, 2840, PrimChecks.math.mult(2835, 2836, PrimChecks.validator.checkArg('*', 2835, 2836, 1, maxHwealth), 2), 3))) {
        PrimChecks.turtleOrLink.setVariable(2863, 2868, "color", 55);
      }
      else {
        PrimChecks.turtleOrLink.setVariable(2895, 2900, "color", 105);
      }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2717, 2720, R); return R; }
}))
ProcedurePrims.defineCommand("go", 2948, 3292, (function() {
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("turn-towards-grain"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2953, 2956, R); return R; }
  var R = ProcedurePrims.callCommand("harvest"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("move-eat-age-die"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3071, 3074, R); return R; }
  var R = ProcedurePrims.callCommand("recolor-turtles"); if (R === DeathInterrupt) { return R; }
  if (Prims.equality(PrimChecks.math.mod(3194, 3197, world.ticker.tickCount(), PrimChecks.validator.checkArg('MOD', 3194, 3197, 1, world.observer.getGlobal("grain-growth-interval"))), 0)) {
    var R = ProcedurePrims.ask(world.patches(), function() { var R = ProcedurePrims.callCommand("grow-grain"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3230, 3233, R); return R; }
  }
  var R = ProcedurePrims.callCommand("update-lorenz-and-gini"); if (R === DeathInterrupt) { return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("turn-towards-grain", 3425, 3909, (function() {
  PrimChecks.turtle.setVariable(3471, 3478, "heading", 0);
  let bestHdirection = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("BEST-DIRECTION", bestHdirection);
  let bestHamount = PrimChecks.procedure.callReporter(3522, 3533, "grain-ahead"); ProcedurePrims.stack().currentContext().registerStringRunVar("BEST-AMOUNT", bestHamount);
  PrimChecks.turtle.setVariable(3540, 3547, "heading", 90);
  if (Prims.gt(PrimChecks.procedure.callReporter(3557, 3568, "grain-ahead"), bestHamount)) {
    bestHdirection = 90; ProcedurePrims.stack().currentContext().updateStringRunVar("BEST-DIRECTION", bestHdirection);
    bestHamount = PrimChecks.procedure.callReporter(3634, 3645, "grain-ahead"); ProcedurePrims.stack().currentContext().updateStringRunVar("BEST-AMOUNT", bestHamount);
  }
  PrimChecks.turtle.setVariable(3654, 3661, "heading", 180);
  if (Prims.gt(PrimChecks.procedure.callReporter(3672, 3683, "grain-ahead"), bestHamount)) {
    bestHdirection = 180; ProcedurePrims.stack().currentContext().updateStringRunVar("BEST-DIRECTION", bestHdirection);
    bestHamount = PrimChecks.procedure.callReporter(3750, 3761, "grain-ahead"); ProcedurePrims.stack().currentContext().updateStringRunVar("BEST-AMOUNT", bestHamount);
  }
  PrimChecks.turtle.setVariable(3770, 3777, "heading", 270);
  if (Prims.gt(PrimChecks.procedure.callReporter(3788, 3799, "grain-ahead"), bestHamount)) {
    bestHdirection = 270; ProcedurePrims.stack().currentContext().updateStringRunVar("BEST-DIRECTION", bestHdirection);
    bestHamount = PrimChecks.procedure.callReporter(3866, 3877, "grain-ahead"); ProcedurePrims.stack().currentContext().updateStringRunVar("BEST-AMOUNT", bestHamount);
  }
  PrimChecks.turtle.setVariable(3886, 3893, "heading", bestHdirection);
}))
ProcedurePrims.defineReporter("grain-ahead", 3924, 4110, (function() {
  let total = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("TOTAL", total);
  let howHfar = 1; ProcedurePrims.stack().currentContext().registerStringRunVar("HOW-FAR", howHfar);
  for (let _index_3989_3995 = 0, _repeatcount_3989_3995 = StrictMath.floor(PrimChecks.turtle.getVariable(3996, 4002, "vision")); _index_3989_3995 < _repeatcount_3989_3995; _index_3989_3995++) {
    total = PrimChecks.math.plus(4025, 4026, PrimChecks.validator.checkArg('+', 4025, 4026, 1, total), PrimChecks.validator.checkArg('+', 4025, 4026, 1, PrimChecks.agentset.of(SelfManager.self().patchAhead(howHfar), function() { return PrimChecks.patch.getVariable(4028, 4038, "grain-here"); }))); ProcedurePrims.stack().currentContext().updateStringRunVar("TOTAL", total);
    howHfar = PrimChecks.math.plus(4089, 4090, PrimChecks.validator.checkArg('+', 4089, 4090, 1, howHfar), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("HOW-FAR", howHfar);
  }
  return PrimChecks.procedure.report(4097, 4103, total);
}))
ProcedurePrims.defineCommand("grow-grain", 4118, 4550, (function() {
  if (Prims.lt(PrimChecks.patch.getVariable(4260, 4270, "grain-here"), PrimChecks.patch.getVariable(4273, 4287, "max-grain-here"))) {
    PrimChecks.patch.setVariable(4299, 4309, "grain-here", PrimChecks.math.plus(4321, 4322, PrimChecks.validator.checkArg('+', 4321, 4322, 1, PrimChecks.patch.getVariable(4310, 4320, "grain-here")), PrimChecks.validator.checkArg('+', 4321, 4322, 1, world.observer.getGlobal("num-grain-grown"))));
    if (Prims.gt(PrimChecks.patch.getVariable(4457, 4467, "grain-here"), PrimChecks.patch.getVariable(4470, 4484, "max-grain-here"))) {
      PrimChecks.patch.setVariable(4500, 4510, "grain-here", PrimChecks.patch.getVariable(4511, 4525, "max-grain-here"));
    }
    var R = ProcedurePrims.callCommand("recolor-patch"); if (R === DeathInterrupt) { return R; }
  }
}))
ProcedurePrims.defineCommand("harvest", 4694, 5025, (function() {
  var R = ProcedurePrims.ask(world.turtles(), function() {
    PrimChecks.turtle.setVariable(4789, 4795, "wealth", PrimChecks.math.floor(PrimChecks.math.plus(4810, 4811, PrimChecks.validator.checkArg('+', 4810, 4811, 1, PrimChecks.turtle.getVariable(4803, 4809, "wealth")), PrimChecks.math.div(4824, 4825, PrimChecks.validator.checkArg('/', 4824, 4825, 1, PrimChecks.patch.getVariable(4813, 4823, "grain-here")), PrimChecks.agentset.count(SelfManager.self().turtlesHere())))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4767, 4770, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() {
    PrimChecks.patch.setVariable(4990, 5000, "grain-here", 0);
    var R = ProcedurePrims.callCommand("recolor-patch"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4968, 4971, R); return R; }
}))
ProcedurePrims.defineCommand("move-eat-age-die", 5033, 5511, (function() {
  SelfManager.self()._optimalFdOne();
  PrimChecks.turtle.setVariable(5132, 5138, "wealth", PrimChecks.math.minus(5147, 5148, PrimChecks.validator.checkArg('-', 5147, 5148, 1, PrimChecks.turtle.getVariable(5140, 5146, "wealth")), PrimChecks.validator.checkArg('-', 5147, 5148, 1, PrimChecks.turtle.getVariable(5149, 5159, "metabolism"))));
  PrimChecks.turtle.setVariable(5183, 5186, "age", PrimChecks.math.plus(5192, 5193, PrimChecks.validator.checkArg('+', 5192, 5193, 1, PrimChecks.turtle.getVariable(5188, 5191, "age")), 1));
  if ((Prims.lt(PrimChecks.turtle.getVariable(5439, 5445, "wealth"), 0) || Prims.gte(PrimChecks.turtle.getVariable(5455, 5458, "age"), PrimChecks.turtle.getVariable(5462, 5477, "life-expectancy")))) {
    var R = ProcedurePrims.callCommand("set-initial-turtle-vars"); if (R === DeathInterrupt) { return R; }
  }
}))
ProcedurePrims.defineCommand("update-lorenz-and-gini", 5651, 6347, (function() {
  let sortedHwealths = PrimChecks.list.sort(PrimChecks.validator.checkArg('SORT', 5695, 5699, 120, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(5701, 5707, "wealth"); }))); ProcedurePrims.stack().currentContext().registerStringRunVar("SORTED-WEALTHS", sortedHwealths);
  let totalHwealth = PrimChecks.list.sum(5739, 5742, PrimChecks.validator.checkArg('SUM', 5739, 5742, 8, sortedHwealths)); ProcedurePrims.stack().currentContext().registerStringRunVar("TOTAL-WEALTH", totalHwealth);
  let wealthHsumHsoHfar = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("WEALTH-SUM-SO-FAR", wealthHsumHsoHfar);
  let index = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("INDEX", index);
  world.observer.setGlobal("gini-index-reserve", 0);
  world.observer.setGlobal("lorenz-points", []);
  for (let _index_6015_6021 = 0, _repeatcount_6015_6021 = StrictMath.floor(world.observer.getGlobal("num-people")); _index_6015_6021 < _repeatcount_6015_6021; _index_6015_6021++) {
    wealthHsumHsoHfar = PrimChecks.math.plus(6080, 6081, PrimChecks.validator.checkArg('+', 6080, 6081, 1, wealthHsumHsoHfar), PrimChecks.validator.checkArg('+', 6080, 6081, 1, PrimChecks.list.item(6082, 6086, PrimChecks.validator.checkArg('ITEM', 6082, 6086, 1, index), PrimChecks.validator.checkArg('ITEM', 6082, 6086, 12, sortedHwealths)))); ProcedurePrims.stack().currentContext().updateStringRunVar("WEALTH-SUM-SO-FAR", wealthHsumHsoHfar);
    world.observer.setGlobal("lorenz-points", PrimChecks.list.lput(PrimChecks.math.mult(6172, 6173, PrimChecks.math.div(6156, 6157, PrimChecks.validator.checkArg('/', 6156, 6157, 1, wealthHsumHsoHfar), PrimChecks.validator.checkArg('/', 6156, 6157, 1, totalHwealth)), 100), PrimChecks.validator.checkArg('LPUT', 6131, 6135, 8, world.observer.getGlobal("lorenz-points"))));
    index = PrimChecks.math.plus(6214, 6215, PrimChecks.validator.checkArg('+', 6214, 6215, 1, index), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("INDEX", index);
    world.observer.setGlobal("gini-index-reserve", PrimChecks.math.minus(6300, 6301, PrimChecks.math.plus(6271, 6272, PrimChecks.validator.checkArg('+', 6271, 6272, 1, world.observer.getGlobal("gini-index-reserve")), PrimChecks.math.div(6286, 6287, PrimChecks.validator.checkArg('/', 6286, 6287, 1, index), PrimChecks.validator.checkArg('/', 6286, 6287, 1, world.observer.getGlobal("num-people")))), PrimChecks.math.div(6327, 6328, PrimChecks.validator.checkArg('/', 6327, 6328, 1, wealthHsumHsoHfar), PrimChecks.validator.checkArg('/', 6327, 6328, 1, totalHwealth))));
  }
}))
world.observer.setGlobal("max-vision", 5);
world.observer.setGlobal("num-people", 250);
world.observer.setGlobal("percent-best-land", 10);
world.observer.setGlobal("metabolism-max", 15);
world.observer.setGlobal("life-expectancy-min", 1);
world.observer.setGlobal("life-expectancy-max", 83);
world.observer.setGlobal("grain-growth-interval", 1);
world.observer.setGlobal("num-grain-grown", 4);