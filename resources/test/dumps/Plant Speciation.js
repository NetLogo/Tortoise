var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":6,"rotate":false,"elements":[{"x1":84,"y1":255,"x2":146,"y2":267,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":123,"y1":241,"x2":136,"y2":264,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":121,"y1":193,"x2":152,"y2":202,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":150,"y1":225,"x2":180,"y2":210,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":180,"y1":210,"x2":204,"y2":160,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":186,"y1":199,"x2":223,"y2":196,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":171,"y1":214,"x2":224,"y2":226,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":151,"y1":277,"x2":200,"y2":254,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":122,"y1":192,"x2":85,"y2":168,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":138,"y1":199,"x2":114,"y2":147,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":122,"y1":240,"x2":94,"y2":221,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":146,"y1":303,"x2":151,"y2":228,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":152,"y1":224,"x2":150,"y2":105,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x":103,"y":73,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":133,"y":103,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":133,"y":43,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":163,"y":73,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":116,"y":53,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":152,"y":53,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":153,"y":91,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":115,"y":91,"diam":32,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":135,"y":75,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":6,"rotate":false,"elements":[{"x1":84,"y1":255,"x2":146,"y2":267,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":123,"y1":241,"x2":136,"y2":264,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":121,"y1":193,"x2":152,"y2":202,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":150,"y1":225,"x2":180,"y2":210,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":180,"y1":210,"x2":204,"y2":160,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":186,"y1":199,"x2":223,"y2":196,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":171,"y1":214,"x2":224,"y2":226,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":151,"y1":277,"x2":200,"y2":254,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":122,"y1":192,"x2":85,"y2":168,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":138,"y1":199,"x2":114,"y2":147,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":122,"y1":240,"x2":94,"y2":221,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":146,"y1":303,"x2":151,"y2":228,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true},{"x1":152,"y1":224,"x2":150,"y2":105,"type":"line","color":"rgba(44, 209, 59, 1)","filled":false,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'tolerances';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('left', plotOps.makePenOps, false, new PenBundle.State(55, 5, PenBundle.DisplayMode.Bar), function() {}, function() {
    return ProcedurePrims.runInPlotContext('tolerances', 'left', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtles(), function() {
        return Prims.lt(PrimChecks.turtle.getVariable(72, 76, "xcor"), PrimChecks.math.div(103, 104, PrimChecks.math.plus(90, 91, world.topology.minPxcor, world.topology.maxPxcor), 2));
      }), function() { return PrimChecks.turtle.getVariable(44, 53, "tolerance"); }));;
    });
  }),
  new PenBundle.Pen('right', plotOps.makePenOps, false, new PenBundle.State(105, 5, PenBundle.DisplayMode.Bar), function() {}, function() {
    return ProcedurePrims.runInPlotContext('tolerances', 'right', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtles(), function() {
        return Prims.gt(PrimChecks.turtle.getVariable(72, 76, "xcor"), PrimChecks.math.div(103, 104, PrimChecks.math.plus(90, 91, world.topology.minPxcor, world.topology.maxPxcor), 2));
      }), function() { return PrimChecks.turtle.getVariable(44, 53, "tolerance"); }));;
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "metal tolerance", "#", false, true, true, 0, 110, 0, 50, setup, update);
})(), (function() {
  var name    = 'flower-times';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('left', plotOps.makePenOps, false, new PenBundle.State(55, 15, PenBundle.DisplayMode.Bar), function() {}, function() {
    return ProcedurePrims.runInPlotContext('flower-times', 'left', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(69, 73, world.turtles(), function() {
        return Prims.lt(PrimChecks.turtle.getVariable(75, 79, "xcor"), PrimChecks.math.div(106, 107, PrimChecks.math.plus(93, 94, world.topology.minPxcor, world.topology.maxPxcor), 2));
      }), function() { return PrimChecks.turtle.getVariable(44, 55, "flower-time"); }));;
    });
  }),
  new PenBundle.Pen('right', plotOps.makePenOps, false, new PenBundle.State(105, 15, PenBundle.DisplayMode.Bar), function() {}, function() {
    return ProcedurePrims.runInPlotContext('flower-times', 'right', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(69, 73, world.turtles(), function() {
        return Prims.gt(PrimChecks.turtle.getVariable(75, 79, "xcor"), PrimChecks.math.div(106, 107, PrimChecks.math.plus(93, 94, world.topology.minPxcor, world.topology.maxPxcor), 2));
      }), function() { return PrimChecks.turtle.getVariable(44, 55, "flower-time"); }));;
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "flowering time", "#", false, true, true, 0, 380, 0, 10, setup, update);
})(), (function() {
  var name    = 'avg. tolerance';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('left', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('avg. tolerance', 'left', function() {
      if (PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {
        return Prims.lt(PrimChecks.turtle.getVariable(56, 60, "xcor"), PrimChecks.math.div(87, 88, PrimChecks.math.plus(74, 75, world.topology.minPxcor, world.topology.maxPxcor), 2));
      })) {
        plotManager.plotPoint(world.observer.getGlobal("year"), PrimChecks.list.mean(109, 113, PrimChecks.validator.checkArg('MEAN', 109, 113, 8, PrimChecks.agentset.of(PrimChecks.agentset.with(137, 141, world.turtles(), function() {
          return Prims.lt(PrimChecks.turtle.getVariable(143, 147, "xcor"), PrimChecks.math.div(174, 175, PrimChecks.math.plus(161, 162, world.topology.minPxcor, world.topology.maxPxcor), 2));
        }), function() { return PrimChecks.turtle.getVariable(115, 124, "tolerance"); }))));
      };
    });
  }),
  new PenBundle.Pen('right', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('avg. tolerance', 'right', function() {
      if (PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {
        return Prims.gt(PrimChecks.turtle.getVariable(56, 60, "xcor"), PrimChecks.math.div(87, 88, PrimChecks.math.plus(74, 75, world.topology.minPxcor, world.topology.maxPxcor), 2));
      })) {
        plotManager.plotPoint(world.observer.getGlobal("year"), PrimChecks.list.mean(109, 113, PrimChecks.validator.checkArg('MEAN', 109, 113, 8, PrimChecks.agentset.of(PrimChecks.agentset.with(137, 141, world.turtles(), function() {
          return Prims.gt(PrimChecks.turtle.getVariable(143, 147, "xcor"), PrimChecks.math.div(174, 175, PrimChecks.math.plus(161, 162, world.topology.minPxcor, world.topology.maxPxcor), 2));
        }), function() { return PrimChecks.turtle.getVariable(115, 124, "tolerance"); }))));
      };
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "generations", "tolerance", false, true, true, 0, 10, 0, 100, setup, update);
})(), (function() {
  var name    = 'simultaneous flowering';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('simultaneous flowering', 'default', function() {
      if ((PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {
        return Prims.gt(PrimChecks.turtle.getVariable(56, 60, "xcor"), PrimChecks.math.div(87, 88, PrimChecks.math.plus(74, 75, world.topology.minPxcor, world.topology.maxPxcor), 2));
      }) && PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {
        return Prims.lt(PrimChecks.turtle.getVariable(116, 120, "xcor"), PrimChecks.math.div(147, 148, PrimChecks.math.plus(134, 135, world.topology.minPxcor, world.topology.maxPxcor), 2));
      }))) {
        let n = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("N", n);
        let m = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("M", m);
        let avg = PrimChecks.list.mean(185, 189, PrimChecks.validator.checkArg('MEAN', 185, 189, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(191, 200, "tolerance"); }))); ProcedurePrims.stack().currentContext().registerStringRunVar("AVG", avg);
        for (let _index_215_221 = 0, _repeatcount_215_221 = StrictMath.floor(500); _index_215_221 < _repeatcount_215_221; _index_215_221++) {
          let r = PrimChecks.agentset.oneOfWith(null, null, world.turtles(), function() {
            return Prims.gt(PrimChecks.turtle.getVariable(259, 263, "xcor"), PrimChecks.math.div(290, 291, PrimChecks.math.plus(277, 278, world.topology.minPxcor, world.topology.maxPxcor), 2));
          }); ProcedurePrims.stack().currentContext().registerStringRunVar("R", r);
          let s = PrimChecks.agentset.oneOfWith(null, null, world.turtles(), function() {
            return Prims.lt(PrimChecks.turtle.getVariable(326, 330, "xcor"), PrimChecks.math.div(357, 358, PrimChecks.math.plus(344, 345, world.topology.minPxcor, world.topology.maxPxcor), 2));
          }); ProcedurePrims.stack().currentContext().registerStringRunVar("S", s);
          if (Prims.lt(PrimChecks.math.abs(PrimChecks.math.minus(395, 396, PrimChecks.validator.checkArg('-', 395, 396, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 390, 392, 1904, r), function() { return PrimChecks.turtle.getVariable(377, 388, "flower-time"); })), PrimChecks.validator.checkArg('-', 395, 396, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 411, 413, 1904, s), function() { return PrimChecks.turtle.getVariable(398, 409, "flower-time"); })))), world.observer.getGlobal("flower-duration"))) {
            m = PrimChecks.math.plus(448, 449, PrimChecks.validator.checkArg('+', 448, 449, 1, m), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("M", m);
          }
          n = PrimChecks.math.plus(468, 469, PrimChecks.validator.checkArg('+', 468, 469, 1, n), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("N", n);
        }
        world.observer.setGlobal("percent-same-flowering-time", PrimChecks.math.precision(PrimChecks.math.mult(530, 531, PrimChecks.math.div(525, 526, PrimChecks.validator.checkArg('/', 525, 526, 1, m), PrimChecks.validator.checkArg('/', 525, 526, 1, n)), 100), 1));
        plotManager.plotPoint(world.observer.getGlobal("year"), PrimChecks.math.mult(561, 562, PrimChecks.math.div(556, 557, PrimChecks.validator.checkArg('/', 556, 557, 1, m), PrimChecks.validator.checkArg('/', 556, 557, 1, n)), 100));
      };
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "generations", "%", false, true, true, 0, 10, 0, 100, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])(["tolerance", "fitness", "flower-time", "seedling?", "will-die?"], [])('turtles-own [ tolerance fitness flower-time seedling? will-die? ] patches-own [ metal barrier? ]  globals [    day                             ;; monitor value    year                            ;; current year    old-year                        ;; previous year    end-of-days-counter             ;;    transition-time?                ;;    old-visualize-time-steps-state  ;; allows for switching between visualization modes during model run    chance-death-per-year           ;; the probability that the plant will die this year    chance-seed-dispersal           ;; the probability that a newborn plant grows in a patch adjacent to its parents\', instead of in the same patch.    average-number-offspring        ;; avg. number of seeds dispersed by the plant when it does disperse them    percent-same-flowering-time ]  to setup   clear-all   ;; initialize globals   set day 0   set old-year 0   set year 0   set end-of-days-counter 0   set percent-same-flowering-time 0   set chance-death-per-year 10 ;; set to 10% by default   set chance-seed-dispersal 50 ;; set to 50% by default   set average-number-offspring 3   set transition-time? false   set old-visualize-time-steps-state visualize-time-steps    ;color the frontier   ask patches [     set barrier? false     setup-two-regions     set pcolor calc-patch-color metal   ]    ;spawn the initial population -- carrying-capacity-per-patch allows more than plant at this patch   ask patches with [pxcor = min-pxcor] [     sprout plants-per-patch [       if initial-tolerance = \"all no tolerance\" [set tolerance 0]       if initial-tolerance = \"all full tolerance\" [set tolerance 100]       if initial-tolerance = \"random tolerances\" [set tolerance random-float 100]       set flower-time (365 / 2)       set heading random 360       fd random-float .5       set fitness 1       set shape \"plant\"       set seedling? false       set will-die? false       set color calc-plant-color tolerance     ]   ]   reset-ticks end   to setup-two-regions   ;; set the metal value based on the width designated by the frontier-sharpness slider value   set metal precision (100 / (1 + exp (frontier-sharpness * ((max-pxcor + min-pxcor) / 2 - pxcor)))) 0 end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;; RUNTIME PROCEDURES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to go    check-labels    ;; if visualization switched during model run, redraw plants    if old-visualize-time-steps-state != visualize-time-steps [      ask turtles [        redraw-plants-as-full-sized-plants      ]    ]    if visualize-time-steps = \"years\" [     set day 0 ;; always at day 0 in years mode     set year year + 1     ask turtles [ redraw-plants-as-full-sized-plants  ]     do-start-of-new-year-events   ]    if visualize-time-steps = \"days\" [     visualize-bloom     do-end-of-days-events   ]   tick end  to do-start-of-new-year-events   if year > old-year [     do-reproduction     mark-turtles-to-kill     kill-marked-turtles     set old-year year   ] end  to do-end-of-days-events   ifelse day = 365 [  ;; at end of year     if transition-time? = false  [       do-reproduction       mark-turtles-to-kill       set transition-time? true     ]     ;; 10 ticks of transition time will elapse between years when visualize-time-steps is in \"day\" mode     ;; this transition time is for animation events to show death and growth of new plants before the next     ;; year begins. It is done before day 0 of the new year so that these visualizations do not interfere     ;; with flower time speciation mechanisms in the model      if transition-time? [       set end-of-days-counter end-of-days-counter + 1       ;; grow the new plants to be visible for the next season       ask turtles with [seedling?] [visualize-seedling-growth]       ;; shrink and fade the plants that are going to die       ask turtles with [will-die?] [set size (1 - (end-of-days-counter / 10))]        if end-of-days-counter > 9 [  ;; start a new year         set year year + 1         set end-of-days-counter 0         set transition-time? false         set day 0         ask turtles [turn-seedlings-into-full-plants]         kill-marked-turtles       ]     ]   ]    ;; the else event   [set day day + 1] end  ;; make babies to do-reproduction   ask turtles [     ;; construct list of potential mates based on pollen-radius slider     let potential-mates []     let nearby-turtles turtles     if (pollen-radius < (max-pxcor - min-pxcor)) [set nearby-turtles turtles in-radius pollen-radius]     let num-candidates 10     ifelse count nearby-turtles < 10 [ set potential-mates (sort nearby-turtles) ]                                      [ set potential-mates (sort (n-of 10 nearby-turtles))                                        set potential-mates (fput self potential-mates)]      ;; pick mate randomly weighted by compatibility     let compatibilities map [ potential-mate -> compatibility self potential-mate] potential-mates     let mate (pick-weighted (potential-mates) (compatibilities))      ;; spawn children     hatch (random-poisson average-number-offspring) [       set seedling? true       set will-die? false       ifelse visualize-time-steps = \"days\" [ set size 0] [set size 1]        ;combine parents\' genes and give average value of to the child       if genetics-model = \"avg. genotype\" [         set tolerance (tolerance + [tolerance] of mate) / 2         set flower-time (flower-time + [flower-time] of mate) / 2       ]        ;mutate tolerance gene       if (random-float 100) < chance-tolerance-mutation [         set tolerance (tolerance + (random-normal 0 tolerance-mutation-stdev))       ;; set tolerance (tolerance + random tolerance-mutation - random tolerance-mutation)       ]        ;mutate flowering time gene       if (random-float 100) < chance-flower-time-mutation [         set flower-time (flower-time + (random-normal 0 flower-time-mutation-stdev))       ]        ;; keeps values from going above a min and max       if tolerance < 0 [ set tolerance  0 ]       if tolerance > 100 [ set tolerance 100 ]       if flower-time < 0 [ set flower-time 0 ]       if flower-time > 365 [ set flower-time 365 ]        ;change color to reflect metal tolerance       set color calc-plant-color tolerance       migrate-this-plant     ]     if plant-type = \"annual\" [set will-die? true] ;end of the generation   ] end  ;kill ill-adapted turtles and fix solve overpopulation to mark-turtles-to-kill   ask turtles [     let t tolerance / 100     let m metal / 100     ;; Fitness is a linear function dependent on tolerance whose slope and y-intercept     ;; vary linearly with respect to an increases in metal amount.     ;; This linear function would have the following slopes in various metal levels:     ;; (i.e. negative slope in clean ground -> high tolerance is bad     ;;       positive slope in dirty ground -> high tolerance is good     ;;       zero     slope in between      -> no benefit or disadvantage to any level of tolerance )      ;; This is a model of a \"tradeoff\", where specializing in one variation of trait is advantageous     ;; in one environmental extreme, but specializing in another variation of the trait is advantageous in a different     ;; environmental extreme. Intermediate \"hybridization\" or averaging between both variations is disadvantageous     ;; in both environments or at the very least it is not advantageous in either extreme environment.     ;; Such tradeoff models can lead to speciation when other traits permit a population to reproductively     ;; fragment and isolate itself into non-interbreeding sub populations.      ;; This makes for a hyperbolic paraboloid or saddle shaped function that is dependent on metal amount and     ;; tolerance.  A general form of this fitness function would be the following:     ;; set fitness ((1 +  (A * t * m + B * t * m - C * t * m) - ( A * t + B * m) ) )     ;; where fitness is 1 at clean ground and no tolerance     ;; A is the penalty (0 to 1) for having tolerance in clean ground, therefore fitness is (1 - A)     ;; B is the penalty (0 to 1) for having the highest level of metal in the ground and no tolerance, therefore fitness is (1 - B)     ;; C is the penalty (0 to 1) for having the highest tolerance in the highest level of metal, therefore fitness is (1 - C)     ;; As long as C is less than both B and A, then you will have a fitness function that can be used in this section     ;; The fitness function has been hard coded here to use A = .4 and B = .4 and C = 0         set fitness (1 - m) * (1 - .4 * t) + m * (1 - .4 * (1 - t))      ;; survival probability based on fitness     if (random-float 1) > (fitness) [set will-die? true]     ;; survival probability based on fixed number of additional deaths-a-year     if random-float 100 < chance-death-per-year [set will-die? true]   ]    ;; In overpopulated patches, kill the least fit plant until we are down to the carrying capacity   ask patches [     let overpopulation ((count turtles-here) - plants-per-patch)     if overpopulation > 0 [       ask (min-n-of overpopulation turtles-here [fitness]) [         set will-die? true       ]     ]   ] end  to migrate-this-plant ;; turtle procedure   ;; Some plants grow in patch adjacent to the parent plant. This represents migration from seed dispersal   if (random-float 100) < chance-seed-dispersal [     move-to one-of neighbors     rt random 360  fd random-float 0.45  ;;spread out plants that are on the same patch   ] end  to kill-marked-turtles     ask turtles with [will-die?] [die] end  to turn-seedlings-into-full-plants          if seedling? [set seedling? false]          redraw-plants-as-full-sized-plants end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;; visualization procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to check-labels   ask patches [   ifelse show-labels-as = \"metal in soil\"     [set plabel metal]     [set plabel \"\"]   ]   ask turtles [     if show-labels-as = \"metal tolerance\" [set label precision tolerance 0]     if show-labels-as = \"flower time\"  [set label precision flower-time 0 ]     if show-labels-as = \"none\" [set label \"\"]   ] end  to redraw-plants-as-full-sized-plants ;; turtle procedure   set shape \"plant\"   set size 1 end  to visualize-seedling-growth ;; turtle procedure   if seedling? [set size (end-of-days-counter / 10) ] end  to visualize-bloom   ask turtles [     ;; If day of the year is greater than this plants flower time and less than the flower time plus the length of flower time, then it is in the     ;; the flowering time window and a flower should be located here     ifelse day >= (flower-time  ) and day <= (flower-time + (flower-duration)  )        [ set shape \"flower\"]        [ set shape \"plant\" ]   ] end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;; reporters  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;; make a random choice from <options> weighted by <weights> ;; where highly weighted choices are more likely to be selected than others to-report pick-weighted [ options weights ]   let wsum 0   foreach weights [ weight ->     set wsum (wsum + weight)   ]   let wret wsum * (random-float 1)   let ret 0   set wsum 0   foreach weights [ weight ->     set wsum (wsum + weight)     if wsum > wret [ report (item ret options) ]     set ret (ret + 1)   ] end  ;; compatibility is a decreasing function of the difference in flowering times ;; since plants that have more of an overlap between flower-times are more likely ;; they will pollinate one another to-report compatibility [ t1 t2 ]   let diff abs ([flower-time] of t1 - [flower-time] of t2)   ifelse diff < flower-duration [ report (flower-duration - diff) ] [ report 0 ] end  ;; calculate the patch color based on the presence of metal in the soil to-report calc-patch-color [ m ]   report rgb 0 (255 * (1 - (m / 100)) / 2) (255 * (m / 100) / 2) end  to-report calc-plant-color [ t ]   let black-pcolor rgb 0 0 0   ifelse barrier?     [report black-pcolor]     [report rgb 0 (255 * (1 - (t / 100)) ) (255 * (t / 100) )] end   ; Copyright 2012 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":512,"y":10,"width":684,"height":269,"dimensions":{"minPxcor":0,"maxPxcor":25,"minPycor":0,"maxPycor":9,"patchSize":26,"wrappingAllowedInX":false,"wrappingAllowedInY":false},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","source":"setup","x":8,"y":10,"width":63,"height":33,"display":"setup","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","source":"go","x":74,"y":10,"width":89,"height":33,"display":"go","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"chance-tolerance-mutation","x":385,"y":308,"width":202,"height":33,"oldSize":true,"display":"chance-tolerance-mutation","min":"0","max":"100","default":10,"step":"1","units":"%","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 50; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"tolerance-mutation-stdev","x":385,"y":342,"width":202,"height":33,"oldSize":true,"display":"tolerance-mutation-stdev","min":"0","max":"50","default":20,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('tolerances', 'left', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtles(), function() {       return Prims.lt(PrimChecks.turtle.getVariable(72, 76, \"xcor\"), PrimChecks.math.div(103, 104, PrimChecks.math.plus(90, 91, world.topology.minPxcor, world.topology.maxPxcor), 2));     }), function() { return PrimChecks.turtle.getVariable(44, 53, \"tolerance\"); }));;   }); }","display":"left","interval":5,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"histogram [tolerance] of turtles with [xcor < (min-pxcor + max-pxcor) / 2]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('tolerances', 'right', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtles(), function() {       return Prims.gt(PrimChecks.turtle.getVariable(72, 76, \"xcor\"), PrimChecks.math.div(103, 104, PrimChecks.math.plus(90, 91, world.topology.minPxcor, world.topology.maxPxcor), 2));     }), function() { return PrimChecks.turtle.getVariable(44, 53, \"tolerance\"); }));;   }); }","display":"right","interval":5,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"histogram [tolerance] of turtles with [xcor > (min-pxcor + max-pxcor) / 2]","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"tolerances","x":345,"y":60,"width":165,"height":120,"oldSize":true,"xAxis":"metal tolerance","yAxis":"#","xmin":0,"xmax":110,"ymin":0,"ymax":50,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"left","interval":5,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"histogram [tolerance] of turtles with [xcor < (min-pxcor + max-pxcor) / 2]","type":"pen"},{"display":"right","interval":5,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"histogram [tolerance] of turtles with [xcor > (min-pxcor + max-pxcor) / 2]","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 5; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"plants-per-patch","x":9,"y":273,"width":152,"height":33,"oldSize":true,"display":"plants-per-patch","min":"1","max":"5","default":2,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0.1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 2; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.1; })","variable":"frontier-sharpness","x":9,"y":241,"width":153,"height":33,"oldSize":true,"display":"frontier-sharpness","min":".1","max":"2","default":1,"step":".1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('flower-times', 'left', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(69, 73, world.turtles(), function() {       return Prims.lt(PrimChecks.turtle.getVariable(75, 79, \"xcor\"), PrimChecks.math.div(106, 107, PrimChecks.math.plus(93, 94, world.topology.minPxcor, world.topology.maxPxcor), 2));     }), function() { return PrimChecks.turtle.getVariable(44, 55, \"flower-time\"); }));;   }); }","display":"left","interval":15,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"histogram [flower-time ] of turtles with [xcor < (min-pxcor + max-pxcor) / 2]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('flower-times', 'right', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(69, 73, world.turtles(), function() {       return Prims.gt(PrimChecks.turtle.getVariable(75, 79, \"xcor\"), PrimChecks.math.div(106, 107, PrimChecks.math.plus(93, 94, world.topology.minPxcor, world.topology.maxPxcor), 2));     }), function() { return PrimChecks.turtle.getVariable(44, 55, \"flower-time\"); }));;   }); }","display":"right","interval":15,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"histogram [flower-time ] of turtles with [xcor > (min-pxcor + max-pxcor) / 2]","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"flower-times","x":167,"y":60,"width":178,"height":120,"oldSize":true,"xAxis":"flowering time","yAxis":"#","xmin":0,"xmax":380,"ymin":0,"ymax":10,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"left","interval":15,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"histogram [flower-time ] of turtles with [xcor < (min-pxcor + max-pxcor) / 2]","type":"pen"},{"display":"right","interval":15,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"histogram [flower-time ] of turtles with [xcor > (min-pxcor + max-pxcor) / 2]","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"chance-flower-time-mutation","x":167,"y":307,"width":214,"height":33,"oldSize":true,"display":"chance-flower-time-mutation","min":"0","max":"100","default":10,"step":"1","units":"%","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"flower-time-mutation-stdev","x":168,"y":342,"width":212,"height":33,"oldSize":true,"display":"flower-time-mutation-stdev","min":"0","max":"100","default":10,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 50; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"pollen-radius","x":8,"y":307,"width":154,"height":33,"oldSize":true,"display":"pollen-radius","min":"0","max":"50","default":30,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('avg. tolerance', 'left', function() {     if (PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {       return Prims.lt(PrimChecks.turtle.getVariable(56, 60, \"xcor\"), PrimChecks.math.div(87, 88, PrimChecks.math.plus(74, 75, world.topology.minPxcor, world.topology.maxPxcor), 2));     })) {       plotManager.plotPoint(world.observer.getGlobal(\"year\"), PrimChecks.list.mean(109, 113, PrimChecks.validator.checkArg('MEAN', 109, 113, 8, PrimChecks.agentset.of(PrimChecks.agentset.with(137, 141, world.turtles(), function() {         return Prims.lt(PrimChecks.turtle.getVariable(143, 147, \"xcor\"), PrimChecks.math.div(174, 175, PrimChecks.math.plus(161, 162, world.topology.minPxcor, world.topology.maxPxcor), 2));       }), function() { return PrimChecks.turtle.getVariable(115, 124, \"tolerance\"); }))));     };   }); }","display":"left","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"if any? turtles with [ xcor < (min-pxcor + max-pxcor) / 2] [   plotxy year (mean [tolerance] of turtles with [xcor < (min-pxcor + max-pxcor) / 2])   ]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('avg. tolerance', 'right', function() {     if (PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {       return Prims.gt(PrimChecks.turtle.getVariable(56, 60, \"xcor\"), PrimChecks.math.div(87, 88, PrimChecks.math.plus(74, 75, world.topology.minPxcor, world.topology.maxPxcor), 2));     })) {       plotManager.plotPoint(world.observer.getGlobal(\"year\"), PrimChecks.list.mean(109, 113, PrimChecks.validator.checkArg('MEAN', 109, 113, 8, PrimChecks.agentset.of(PrimChecks.agentset.with(137, 141, world.turtles(), function() {         return Prims.gt(PrimChecks.turtle.getVariable(143, 147, \"xcor\"), PrimChecks.math.div(174, 175, PrimChecks.math.plus(161, 162, world.topology.minPxcor, world.topology.maxPxcor), 2));       }), function() { return PrimChecks.turtle.getVariable(115, 124, \"tolerance\"); }))));     };   }); }","display":"right","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"if any? turtles with [ xcor > (min-pxcor + max-pxcor) / 2] [   plotxy year (mean [tolerance] of turtles with [xcor > (min-pxcor + max-pxcor) / 2])   ]","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"avg. tolerance","x":345,"y":179,"width":165,"height":120,"oldSize":true,"xAxis":"generations","yAxis":"tolerance","xmin":0,"xmax":10,"ymin":0,"ymax":100,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"left","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"if any? turtles with [ xcor < (min-pxcor + max-pxcor) / 2] [   plotxy year (mean [tolerance] of turtles with [xcor < (min-pxcor + max-pxcor) / 2])   ]","type":"pen"},{"display":"right","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"if any? turtles with [ xcor > (min-pxcor + max-pxcor) / 2] [   plotxy year (mean [tolerance] of turtles with [xcor > (min-pxcor + max-pxcor) / 2])   ]","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('simultaneous flowering', 'default', function() {     if ((PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {       return Prims.gt(PrimChecks.turtle.getVariable(56, 60, \"xcor\"), PrimChecks.math.div(87, 88, PrimChecks.math.plus(74, 75, world.topology.minPxcor, world.topology.maxPxcor), 2));     }) && PrimChecks.agentset.anyWith(null, null, world.turtles(), function() {       return Prims.lt(PrimChecks.turtle.getVariable(116, 120, \"xcor\"), PrimChecks.math.div(147, 148, PrimChecks.math.plus(134, 135, world.topology.minPxcor, world.topology.maxPxcor), 2));     }))) {       let n = 0; ProcedurePrims.stack().currentContext().registerStringRunVar(\"N\", n);       let m = 0; ProcedurePrims.stack().currentContext().registerStringRunVar(\"M\", m);       let avg = PrimChecks.list.mean(185, 189, PrimChecks.validator.checkArg('MEAN', 185, 189, 8, PrimChecks.agentset.of(world.turtles(), function() { return PrimChecks.turtle.getVariable(191, 200, \"tolerance\"); }))); ProcedurePrims.stack().currentContext().registerStringRunVar(\"AVG\", avg);       for (let _index_215_221 = 0, _repeatcount_215_221 = StrictMath.floor(500); _index_215_221 < _repeatcount_215_221; _index_215_221++) {         let r = PrimChecks.agentset.oneOfWith(null, null, world.turtles(), function() {           return Prims.gt(PrimChecks.turtle.getVariable(259, 263, \"xcor\"), PrimChecks.math.div(290, 291, PrimChecks.math.plus(277, 278, world.topology.minPxcor, world.topology.maxPxcor), 2));         }); ProcedurePrims.stack().currentContext().registerStringRunVar(\"R\", r);         let s = PrimChecks.agentset.oneOfWith(null, null, world.turtles(), function() {           return Prims.lt(PrimChecks.turtle.getVariable(326, 330, \"xcor\"), PrimChecks.math.div(357, 358, PrimChecks.math.plus(344, 345, world.topology.minPxcor, world.topology.maxPxcor), 2));         }); ProcedurePrims.stack().currentContext().registerStringRunVar(\"S\", s);         if (Prims.lt(PrimChecks.math.abs(PrimChecks.math.minus(395, 396, PrimChecks.validator.checkArg('-', 395, 396, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 390, 392, 1904, r), function() { return PrimChecks.turtle.getVariable(377, 388, \"flower-time\"); })), PrimChecks.validator.checkArg('-', 395, 396, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 411, 413, 1904, s), function() { return PrimChecks.turtle.getVariable(398, 409, \"flower-time\"); })))), world.observer.getGlobal(\"flower-duration\"))) {           m = PrimChecks.math.plus(448, 449, PrimChecks.validator.checkArg('+', 448, 449, 1, m), 1); ProcedurePrims.stack().currentContext().updateStringRunVar(\"M\", m);         }         n = PrimChecks.math.plus(468, 469, PrimChecks.validator.checkArg('+', 468, 469, 1, n), 1); ProcedurePrims.stack().currentContext().updateStringRunVar(\"N\", n);       }       world.observer.setGlobal(\"percent-same-flowering-time\", PrimChecks.math.precision(PrimChecks.math.mult(530, 531, PrimChecks.math.div(525, 526, PrimChecks.validator.checkArg('/', 525, 526, 1, m), PrimChecks.validator.checkArg('/', 525, 526, 1, n)), 100), 1));       plotManager.plotPoint(world.observer.getGlobal(\"year\"), PrimChecks.math.mult(561, 562, PrimChecks.math.div(556, 557, PrimChecks.validator.checkArg('/', 556, 557, 1, m), PrimChecks.validator.checkArg('/', 556, 557, 1, n)), 100));     };   }); }","display":"default","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if any? turtles with [ xcor > (min-pxcor + max-pxcor) / 2] and any? turtles with [ xcor < (min-pxcor + max-pxcor) / 2]  [   let n 0   let m 0   let avg mean [tolerance] of turtles   repeat 500 [     let r one-of turtles with [xcor > (min-pxcor + max-pxcor) / 2]     let s one-of turtles with [xcor < (min-pxcor + max-pxcor) / 2]     if ( abs ([flower-time] of r - [flower-time] of s) < flower-duration ) [ set m (m + 1) ]     set n (n + 1)   ]   set percent-same-flowering-time precision ((m / n) * 100) 1   plotxy year (m / n) * 100 ]","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"simultaneous flowering","x":167,"y":180,"width":179,"height":120,"oldSize":true,"xAxis":"generations","yAxis":"%","xmin":0,"xmax":10,"ymin":0,"ymax":100,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"default","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if any? turtles with [ xcor > (min-pxcor + max-pxcor) / 2] and any? turtles with [ xcor < (min-pxcor + max-pxcor) / 2]  [   let n 0   let m 0   let avg mean [tolerance] of turtles   repeat 500 [     let r one-of turtles with [xcor > (min-pxcor + max-pxcor) / 2]     let s one-of turtles with [xcor < (min-pxcor + max-pxcor) / 2]     if ( abs ([flower-time] of r - [flower-time] of s) < flower-duration ) [ set m (m + 1) ]     set n (n + 1)   ]   set percent-same-flowering-time precision ((m / n) * 100) 1   plotxy year (m / n) * 100 ]","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 30; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"flower-duration","x":8,"y":342,"width":155,"height":33,"oldSize":true,"display":"flower-duration","min":"0","max":"30","default":20,"step":"1","units":"days","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"day\"); })","source":"day","x":318,"y":10,"width":57,"height":45,"oldSize":true,"precision":1,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"year\"); })","source":"year","x":372,"y":10,"width":102,"height":45,"oldSize":true,"display":"years","precision":17,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"variable":"show-labels-as","x":12,"y":187,"width":146,"height":45,"oldSize":true,"display":"show-labels-as","choices":["none","metal in soil","metal tolerance","flower time"],"currentChoice":0,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"visualize-time-steps","x":164,"y":10,"width":151,"height":45,"oldSize":true,"display":"visualize-time-steps","choices":["days","years"],"currentChoice":1,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"plant-type","x":11,"y":49,"width":146,"height":45,"oldSize":true,"display":"plant-type","choices":["perennial","annual"],"currentChoice":1,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"initial-tolerance","x":11,"y":95,"width":147,"height":45,"oldSize":true,"display":"initial-tolerance","choices":["all no tolerance","all full tolerance","random tolerances"],"currentChoice":0,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"genetics-model","x":11,"y":141,"width":147,"height":45,"oldSize":true,"display":"genetics-model","choices":["avg. genotype","sex linked genes"],"currentChoice":0,"type":"chooser","compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["chance-tolerance-mutation", "tolerance-mutation-stdev", "plants-per-patch", "frontier-sharpness", "chance-flower-time-mutation", "flower-time-mutation-stdev", "pollen-radius", "flower-duration", "show-labels-as", "visualize-time-steps", "plant-type", "initial-tolerance", "genetics-model", "day", "year", "old-year", "end-of-days-counter", "transition-time?", "old-visualize-time-steps-state", "chance-death-per-year", "chance-seed-dispersal", "average-number-offspring", "percent-same-flowering-time"], ["chance-tolerance-mutation", "tolerance-mutation-stdev", "plants-per-patch", "frontier-sharpness", "chance-flower-time-mutation", "flower-time-mutation-stdev", "pollen-radius", "flower-duration", "show-labels-as", "visualize-time-steps", "plant-type", "initial-tolerance", "genetics-model"], ["metal", "barrier?"], 0, 25, 0, 9, 26, false, false, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 825, 1970, (function() {
  world.clearAll();
  world.observer.setGlobal("day", 0);
  world.observer.setGlobal("old-year", 0);
  world.observer.setGlobal("year", 0);
  world.observer.setGlobal("end-of-days-counter", 0);
  world.observer.setGlobal("percent-same-flowering-time", 0);
  world.observer.setGlobal("chance-death-per-year", 10);
  world.observer.setGlobal("chance-seed-dispersal", 50);
  world.observer.setGlobal("average-number-offspring", 3);
  world.observer.setGlobal("transition-time?", false);
  world.observer.setGlobal("old-visualize-time-steps-state", world.observer.getGlobal("visualize-time-steps"));
  var R = ProcedurePrims.ask(world.patches(), function() {
    PrimChecks.patch.setVariable(1252, 1260, "barrier?", false);
    var R = ProcedurePrims.callCommand("setup-two-regions"); if (R === DeathInterrupt) { return R; }
    PrimChecks.patch.setVariable(1297, 1303, "pcolor", PrimChecks.procedure.callReporter(1304, 1320, "calc-patch-color", PrimChecks.patch.getVariable(1321, 1326, "metal")));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1230, 1233, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(1446, 1450, world.patches(), function() { return Prims.equality(PrimChecks.patch.getVariable(1452, 1457, "pxcor"), world.topology.minPxcor); }), function() {
    var R = ProcedurePrims.ask(SelfManager.self().sprout(world.observer.getGlobal("plants-per-patch"), "TURTLES"), function() {
      if (Prims.equality(world.observer.getGlobal("initial-tolerance"), "all no tolerance")) {
        PrimChecks.turtle.setVariable(1556, 1565, "tolerance", 0);
      }
      if (Prims.equality(world.observer.getGlobal("initial-tolerance"), "all full tolerance")) {
        PrimChecks.turtle.setVariable(1624, 1633, "tolerance", 100);
      }
      if (Prims.equality(world.observer.getGlobal("initial-tolerance"), "random tolerances")) {
        PrimChecks.turtle.setVariable(1693, 1702, "tolerance", PrimChecks.math.randomFloat(100));
      }
      PrimChecks.turtle.setVariable(1731, 1742, "flower-time", PrimChecks.math.div(1748, 1749, 365, 2));
      PrimChecks.turtle.setVariable(1763, 1770, "heading", RandomPrims.randomLong(360));
      SelfManager.self().fd(PrimChecks.math.randomFloat(0.5));
      PrimChecks.turtle.setVariable(1817, 1824, "fitness", 1);
      PrimChecks.turtleOrLink.setVariable(1837, 1842, "shape", "plant");
      PrimChecks.turtle.setVariable(1861, 1870, "seedling?", false);
      PrimChecks.turtle.setVariable(1887, 1896, "will-die?", false);
      PrimChecks.turtleOrLink.setVariable(1913, 1918, "color", PrimChecks.procedure.callReporter(1919, 1935, "calc-plant-color", PrimChecks.turtle.getVariable(1936, 1945, "tolerance")));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1477, 1483, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1434, 1437, R); return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-two-regions", 1979, 2194, (function() {
  PrimChecks.patch.setVariable(2097, 2102, "metal", PrimChecks.math.precision(PrimChecks.math.div(2118, 2119, 100, PrimChecks.math.plus(2123, 2124, 1, PrimChecks.math.exp(2125, 2128, PrimChecks.math.mult(2149, 2150, PrimChecks.validator.checkArg('*', 2149, 2150, 1, world.observer.getGlobal("frontier-sharpness")), PrimChecks.math.minus(2180, 2181, PrimChecks.math.div(2176, 2177, PrimChecks.math.plus(2163, 2164, world.topology.maxPxcor, world.topology.minPxcor), 2), PrimChecks.validator.checkArg('-', 2180, 2181, 1, PrimChecks.patch.getVariable(2182, 2187, "pxcor"))))))), 0));
}))
ProcedurePrims.defineCommand("go", 2491, 3005, (function() {
  var R = ProcedurePrims.callCommand("check-labels"); if (R === DeathInterrupt) { return R; }
  if (!Prims.equality(world.observer.getGlobal("old-visualize-time-steps-state"), world.observer.getGlobal("visualize-time-steps"))) {
    var R = ProcedurePrims.ask(world.turtles(), function() {
      var R = ProcedurePrims.callCommand("redraw-plants-as-full-sized-plants"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2642, 2645, R); return R; }
  }
  if (Prims.equality(world.observer.getGlobal("visualize-time-steps"), "years")) {
    world.observer.setGlobal("day", 0);
    world.observer.setGlobal("year", PrimChecks.math.plus(2814, 2815, PrimChecks.validator.checkArg('+', 2814, 2815, 1, world.observer.getGlobal("year")), 1));
    var R = ProcedurePrims.ask(world.turtles(), function() {
      var R = ProcedurePrims.callCommand("redraw-plants-as-full-sized-plants"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2822, 2825, R); return R; }
    var R = ProcedurePrims.callCommand("do-start-of-new-year-events"); if (R === DeathInterrupt) { return R; }
  }
  if (Prims.equality(world.observer.getGlobal("visualize-time-steps"), "days")) {
    var R = ProcedurePrims.callCommand("visualize-bloom"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("do-end-of-days-events"); if (R === DeathInterrupt) { return R; }
  }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("do-start-of-new-year-events", 3013, 3159, (function() {
  if (Prims.gt(world.observer.getGlobal("year"), world.observer.getGlobal("old-year"))) {
    var R = ProcedurePrims.callCommand("do-reproduction"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("mark-turtles-to-kill"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("kill-marked-turtles"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("old-year", world.observer.getGlobal("year"));
  }
}))
ProcedurePrims.defineCommand("do-end-of-days-events", 3167, 4382, (function() {
  if (Prims.equality(world.observer.getGlobal("day"), 365)) {
    if (Prims.equality(world.observer.getGlobal("transition-time?"), false)) {
      var R = ProcedurePrims.callCommand("do-reproduction"); if (R === DeathInterrupt) { return R; }
      var R = ProcedurePrims.callCommand("mark-turtles-to-kill"); if (R === DeathInterrupt) { return R; }
      world.observer.setGlobal("transition-time?", true);
    }
    if (world.observer.getGlobal("transition-time?")) {
      world.observer.setGlobal("end-of-days-counter", PrimChecks.math.plus(3804, 3805, PrimChecks.validator.checkArg('+', 3804, 3805, 1, world.observer.getGlobal("end-of-days-counter")), 1));
      var R = ProcedurePrims.ask(PrimChecks.agentset.with(3889, 3893, world.turtles(), function() { return PrimChecks.turtle.getVariable(3895, 3904, "seedling?"); }), function() {
        var R = ProcedurePrims.callCommand("visualize-seedling-growth"); if (R === DeathInterrupt) { return R; }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3877, 3880, R); return R; }
      var R = ProcedurePrims.ask(PrimChecks.agentset.with(4010, 4014, world.turtles(), function() { return PrimChecks.turtle.getVariable(4016, 4025, "will-die?"); }), function() {
        PrimChecks.turtle.setVariable(4032, 4036, "size", PrimChecks.math.minus(4040, 4041, 1, PrimChecks.math.div(4063, 4064, PrimChecks.validator.checkArg('/', 4063, 4064, 1, world.observer.getGlobal("end-of-days-counter")), 10)));
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3998, 4001, R); return R; }
      if (Prims.gt(world.observer.getGlobal("end-of-days-counter"), 9)) {
        world.observer.setGlobal("year", PrimChecks.math.plus(4150, 4151, PrimChecks.validator.checkArg('+', 4150, 4151, 1, world.observer.getGlobal("year")), 1));
        world.observer.setGlobal("end-of-days-counter", 0);
        world.observer.setGlobal("transition-time?", false);
        world.observer.setGlobal("day", 0);
        var R = ProcedurePrims.ask(world.turtles(), function() {
          var R = ProcedurePrims.callCommand("turn-seedlings-into-full-plants"); if (R === DeathInterrupt) { return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4249, 4252, R); return R; }
        var R = ProcedurePrims.callCommand("kill-marked-turtles"); if (R === DeathInterrupt) { return R; }
      }
    }
  }
  else {
    world.observer.setGlobal("day", PrimChecks.math.plus(4377, 4378, PrimChecks.validator.checkArg('+', 4377, 4378, 1, world.observer.getGlobal("day")), 1));
  }
}))
ProcedurePrims.defineCommand("do-reproduction", 4405, 6519, (function() {
  var R = ProcedurePrims.ask(world.turtles(), function() {
    let potentialHmates = []; ProcedurePrims.stack().currentContext().registerStringRunVar("POTENTIAL-MATES", potentialHmates);
    let nearbyHturtles = world.turtles(); ProcedurePrims.stack().currentContext().registerStringRunVar("NEARBY-TURTLES", nearbyHturtles);
    if (Prims.lt(world.observer.getGlobal("pollen-radius"), PrimChecks.math.minus(4601, 4602, world.topology.maxPxcor, world.topology.minPxcor))) {
      nearbyHturtles = SelfManager.self().inRadius(world.turtles(), world.observer.getGlobal("pollen-radius")); ProcedurePrims.stack().currentContext().updateStringRunVar("NEARBY-TURTLES", nearbyHturtles);
    }
    let numHcandidates = 10; ProcedurePrims.stack().currentContext().registerStringRunVar("NUM-CANDIDATES", numHcandidates);
    if (PrimChecks.agentset.optimizeCount(null, null, nearbyHturtles, 10, (a, b) => a < b)) {
      potentialHmates = PrimChecks.list.sort(PrimChecks.validator.checkArg('SORT', 4754, 4758, 120, nearbyHturtles)); ProcedurePrims.stack().currentContext().updateStringRunVar("POTENTIAL-MATES", potentialHmates);
    }
    else {
      potentialHmates = PrimChecks.list.sort(PrimChecks.list.nOf(4843, 4847, 10, PrimChecks.validator.checkArg('N-OF', 4843, 4847, 120, nearbyHturtles))); ProcedurePrims.stack().currentContext().updateStringRunVar("POTENTIAL-MATES", potentialHmates);
      potentialHmates = PrimChecks.list.fput(SelfManager.self(), PrimChecks.validator.checkArg('FPUT', 4928, 4932, 8, potentialHmates)); ProcedurePrims.stack().currentContext().updateStringRunVar("POTENTIAL-MATES", potentialHmates);
    }
    let compatibilities = PrimChecks.task.map(5033, 5036, PrimChecks.task.checked(5037, 5038, function(potentialHmate) {
      PrimChecks.procedure.runArgCountCheck('runresult', 5057, 5090, 1, arguments.length);
      return PrimChecks.procedure.callReporter(5057, 5070, "compatibility", SelfManager.self(), potentialHmate);
    }, "[ potential-mate -> compatibility self potential-mate ]", true, false), PrimChecks.validator.checkArg('MAP', 5033, 5036, 8, potentialHmates)); ProcedurePrims.stack().currentContext().registerStringRunVar("COMPATIBILITIES", compatibilities);
    let mate = PrimChecks.procedure.callReporter(5122, 5135, "pick-weighted", potentialHmates, compatibilities); ProcedurePrims.stack().currentContext().registerStringRunVar("MATE", mate);
    var R = ProcedurePrims.ask(SelfManager.self().hatch(PrimChecks.math.randomPoisson(PrimChecks.validator.checkArg('RANDOM-POISSON', 5207, 5221, 1, world.observer.getGlobal("average-number-offspring"))), ""), function() {
      PrimChecks.turtle.setVariable(5260, 5269, "seedling?", true);
      PrimChecks.turtle.setVariable(5285, 5294, "will-die?", false);
      if (Prims.equality(world.observer.getGlobal("visualize-time-steps"), "days")) {
        PrimChecks.turtle.setVariable(5350, 5354, "size", 0);
      }
      else {
        PrimChecks.turtle.setVariable(5365, 5369, "size", 1);
      }
      if (Prims.equality(world.observer.getGlobal("genetics-model"), "avg. genotype")) {
        PrimChecks.turtle.setVariable(5501, 5510, "tolerance", PrimChecks.math.div(5545, 5546, PrimChecks.math.plus(5522, 5523, PrimChecks.validator.checkArg('+', 5522, 5523, 1, PrimChecks.turtle.getVariable(5512, 5521, "tolerance")), PrimChecks.validator.checkArg('+', 5522, 5523, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 5536, 5538, 1904, mate), function() { return PrimChecks.turtle.getVariable(5525, 5534, "tolerance"); }))), 2));
        PrimChecks.turtle.setVariable(5561, 5572, "flower-time", PrimChecks.math.div(5611, 5612, PrimChecks.math.plus(5586, 5587, PrimChecks.validator.checkArg('+', 5586, 5587, 1, PrimChecks.turtle.getVariable(5574, 5585, "flower-time")), PrimChecks.validator.checkArg('+', 5586, 5587, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 5602, 5604, 1904, mate), function() { return PrimChecks.turtle.getVariable(5589, 5600, "flower-time"); }))), 2));
      }
      if (Prims.lt(PrimChecks.math.randomFloat(100), world.observer.getGlobal("chance-tolerance-mutation"))) {
        PrimChecks.turtle.setVariable(5723, 5732, "tolerance", PrimChecks.math.plus(5744, 5745, PrimChecks.validator.checkArg('+', 5744, 5745, 1, PrimChecks.turtle.getVariable(5734, 5743, "tolerance")), PrimChecks.math.randomNormal(5747, 5760, 0, PrimChecks.validator.checkArg('RANDOM-NORMAL', 5747, 5760, 1, world.observer.getGlobal("tolerance-mutation-stdev")))));
      }
      if (Prims.lt(PrimChecks.math.randomFloat(100), world.observer.getGlobal("chance-flower-time-mutation"))) {
        PrimChecks.turtle.setVariable(5996, 6007, "flower-time", PrimChecks.math.plus(6021, 6022, PrimChecks.validator.checkArg('+', 6021, 6022, 1, PrimChecks.turtle.getVariable(6009, 6020, "flower-time")), PrimChecks.math.randomNormal(6024, 6037, 0, PrimChecks.validator.checkArg('RANDOM-NORMAL', 6024, 6037, 1, world.observer.getGlobal("flower-time-mutation-stdev")))));
      }
      if (Prims.lt(PrimChecks.turtle.getVariable(6140, 6149, "tolerance"), 0)) {
        PrimChecks.turtle.setVariable(6160, 6169, "tolerance", 0);
      }
      if (Prims.gt(PrimChecks.turtle.getVariable(6184, 6193, "tolerance"), 100)) {
        PrimChecks.turtle.setVariable(6206, 6215, "tolerance", 100);
      }
      if (Prims.lt(PrimChecks.turtle.getVariable(6231, 6242, "flower-time"), 0)) {
        PrimChecks.turtle.setVariable(6253, 6264, "flower-time", 0);
      }
      if (Prims.gt(PrimChecks.turtle.getVariable(6278, 6289, "flower-time"), 365)) {
        PrimChecks.turtle.setVariable(6302, 6313, "flower-time", 365);
      }
      PrimChecks.turtleOrLink.setVariable(6378, 6383, "color", PrimChecks.procedure.callReporter(6384, 6400, "calc-plant-color", PrimChecks.turtle.getVariable(6401, 6410, "tolerance")));
      var R = ProcedurePrims.callCommand("migrate-this-plant"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5200, 5205, R); return R; }
    if (Prims.equality(world.observer.getGlobal("plant-type"), "annual")) {
      PrimChecks.turtle.setVariable(6476, 6485, "will-die?", true);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4423, 4426, R); return R; }
}))
ProcedurePrims.defineCommand("mark-turtles-to-kill", 6582, 9307, (function() {
  var R = ProcedurePrims.ask(world.turtles(), function() {
    let t = PrimChecks.math.div(6639, 6640, PrimChecks.validator.checkArg('/', 6639, 6640, 1, PrimChecks.turtle.getVariable(6629, 6638, "tolerance")), 100); ProcedurePrims.stack().currentContext().registerStringRunVar("T", t);
    let m = PrimChecks.math.div(6661, 6662, PrimChecks.validator.checkArg('/', 6661, 6662, 1, PrimChecks.patch.getVariable(6655, 6660, "metal")), 100); ProcedurePrims.stack().currentContext().registerStringRunVar("M", m);
    PrimChecks.turtle.setVariable(8682, 8689, "fitness", PrimChecks.math.plus(8713, 8714, PrimChecks.math.mult(8698, 8699, PrimChecks.math.minus(8693, 8694, 1, PrimChecks.validator.checkArg('-', 8693, 8694, 1, m)), PrimChecks.math.minus(8703, 8704, 1, PrimChecks.math.mult(8708, 8709, 0.4, PrimChecks.validator.checkArg('*', 8708, 8709, 1, t)))), PrimChecks.math.mult(8717, 8718, PrimChecks.validator.checkArg('*', 8717, 8718, 1, m), PrimChecks.math.minus(8722, 8723, 1, PrimChecks.math.mult(8727, 8728, 0.4, PrimChecks.math.minus(8732, 8733, 1, PrimChecks.validator.checkArg('-', 8732, 8733, 1, t)))))));
    if (Prims.gt(PrimChecks.math.randomFloat(1), PrimChecks.turtle.getVariable(8811, 8818, "fitness"))) {
      PrimChecks.turtle.setVariable(8825, 8834, "will-die?", true);
    }
    if (Prims.lt(PrimChecks.math.randomFloat(100), world.observer.getGlobal("chance-death-per-year"))) {
      PrimChecks.turtle.setVariable(8972, 8981, "will-die?", true);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6605, 6608, R); return R; }
  var R = ProcedurePrims.ask(world.patches(), function() {
    let overpopulation = PrimChecks.math.minus(9153, 9154, PrimChecks.agentset.count(SelfManager.self().turtlesHere()), PrimChecks.validator.checkArg('-', 9153, 9154, 1, world.observer.getGlobal("plants-per-patch"))); ProcedurePrims.stack().currentContext().registerStringRunVar("OVERPOPULATION", overpopulation);
    if (Prims.gt(overpopulation, 0)) {
      var R = ProcedurePrims.ask(PrimChecks.agentset.minNOf(9212, 9220, SelfManager.self().turtlesHere(), PrimChecks.validator.checkArg('MIN-N-OF', 9212, 9220, 1, overpopulation), function() { return PrimChecks.turtle.getVariable(9250, 9257, "fitness"); }), function() { PrimChecks.turtle.setVariable(9274, 9283, "will-die?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(9207, 9210, R); return R; }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(9094, 9097, R); return R; }
}))
ProcedurePrims.defineCommand("migrate-this-plant", 9315, 9632, (function() {
  if (Prims.lt(PrimChecks.math.randomFloat(100), world.observer.getGlobal("chance-seed-dispersal"))) {
    SelfManager.self().moveTo(PrimChecks.list.oneOf(9523, 9529, SelfManager.self().getNeighbors()));
    SelfManager.self().right(RandomPrims.randomLong(360));
    SelfManager.self().fd(PrimChecks.math.randomFloat(0.45));
  }
}))
ProcedurePrims.defineCommand("kill-marked-turtles", 9640, 9699, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(9676, 9680, world.turtles(), function() { return PrimChecks.turtle.getVariable(9682, 9691, "will-die?"); }), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(9664, 9667, R); return R; }
}))
ProcedurePrims.defineCommand("turn-seedlings-into-full-plants", 9707, 9827, (function() {
  if (PrimChecks.turtle.getVariable(9751, 9760, "seedling?")) {
    PrimChecks.turtle.setVariable(9766, 9775, "seedling?", false);
  }
  var R = ProcedurePrims.callCommand("redraw-plants-as-full-sized-plants"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("check-labels", 10124, 10460, (function() {
  var R = ProcedurePrims.ask(world.patches(), function() {
    if (Prims.equality(world.observer.getGlobal("show-labels-as"), "metal in soil")) {
      PrimChecks.patch.setVariable(10204, 10210, "plabel", PrimChecks.patch.getVariable(10211, 10216, "metal"));
    }
    else {
      PrimChecks.patch.setVariable(10227, 10233, "plabel", "");
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(10139, 10142, R); return R; }
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if (Prims.equality(world.observer.getGlobal("show-labels-as"), "metal tolerance")) {
      PrimChecks.turtleOrLink.setVariable(10305, 10310, "label", PrimChecks.math.precision(PrimChecks.validator.checkArg('PRECISION', 10311, 10320, 1, PrimChecks.turtle.getVariable(10321, 10330, "tolerance")), 0));
    }
    if (Prims.equality(world.observer.getGlobal("show-labels-as"), "flower time")) {
      PrimChecks.turtleOrLink.setVariable(10378, 10383, "label", PrimChecks.math.precision(PrimChecks.validator.checkArg('PRECISION', 10384, 10393, 1, PrimChecks.turtle.getVariable(10394, 10405, "flower-time")), 0));
    }
    if (Prims.equality(world.observer.getGlobal("show-labels-as"), "none")) {
      PrimChecks.turtleOrLink.setVariable(10446, 10451, "label", "");
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(10244, 10247, R); return R; }
}))
ProcedurePrims.defineCommand("redraw-plants-as-full-sized-plants", 10468, 10556, (function() {
  PrimChecks.turtleOrLink.setVariable(10529, 10534, "shape", "plant");
  PrimChecks.turtle.setVariable(10549, 10553, "size", 1);
}))
ProcedurePrims.defineCommand("visualize-seedling-growth", 10564, 10664, (function() {
  if (PrimChecks.turtle.getVariable(10615, 10624, "seedling?")) {
    PrimChecks.turtle.setVariable(10630, 10634, "size", PrimChecks.math.div(10656, 10657, PrimChecks.validator.checkArg('/', 10656, 10657, 1, world.observer.getGlobal("end-of-days-counter")), 10));
  }
}))
ProcedurePrims.defineCommand("visualize-bloom", 10672, 11062, (function() {
  var R = ProcedurePrims.ask(world.turtles(), function() {
    if ((Prims.gte(world.observer.getGlobal("day"), PrimChecks.turtle.getVariable(10938, 10949, "flower-time")) && Prims.lte(world.observer.getGlobal("day"), PrimChecks.math.plus(10977, 10978, PrimChecks.validator.checkArg('+', 10977, 10978, 1, PrimChecks.turtle.getVariable(10965, 10976, "flower-time")), PrimChecks.validator.checkArg('+', 10977, 10978, 1, world.observer.getGlobal("flower-duration")))))) {
      PrimChecks.turtleOrLink.setVariable(11013, 11018, "shape", "flower");
    }
    else {
      PrimChecks.turtleOrLink.setVariable(11042, 11047, "shape", "plant");
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(10690, 10693, R); return R; }
}))
ProcedurePrims.defineReporter("pick-weighted", 11502, 11806, (function(options, weights) {
  let wsum = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("WSUM", wsum);
  var R = PrimChecks.task.forEach(11551, 11558, PrimChecks.validator.checkArg('FOREACH', 11551, 11558, 8, weights), PrimChecks.task.checked(11567, 11568, function(weight) {
    PrimChecks.procedure.runArgCountCheck('run', 11567, 11611, 1, arguments.length);
    wsum = PrimChecks.math.plus(11598, 11599, PrimChecks.validator.checkArg('+', 11598, 11599, 1, wsum), PrimChecks.validator.checkArg('+', 11598, 11599, 1, weight)); ProcedurePrims.stack().currentContext().updateStringRunVar("WSUM", wsum);
  }, "[ weight -> set wsum wsum + weight ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11551, 11558, R); return R; }
  let wret = PrimChecks.math.mult(11628, 11629, PrimChecks.validator.checkArg('*', 11628, 11629, 1, wsum), PrimChecks.math.randomFloat(1)); ProcedurePrims.stack().currentContext().registerStringRunVar("WRET", wret);
  let ret = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("RET", ret);
  wsum = 0; ProcedurePrims.stack().currentContext().updateStringRunVar("WSUM", wsum);
  var R = PrimChecks.task.forEach(11674, 11681, PrimChecks.validator.checkArg('FOREACH', 11674, 11681, 8, weights), PrimChecks.task.checked(11690, 11691, function(weight) {
    PrimChecks.procedure.runArgCountCheck('run', 11690, 11805, 1, arguments.length);
    wsum = PrimChecks.math.plus(11721, 11722, PrimChecks.validator.checkArg('+', 11721, 11722, 1, wsum), PrimChecks.validator.checkArg('+', 11721, 11722, 1, weight)); ProcedurePrims.stack().currentContext().updateStringRunVar("WSUM", wsum);
    if (Prims.gt(wsum, wret)) {
      return PrimChecks.procedure.report(11752, 11758, PrimChecks.list.item(11760, 11764, PrimChecks.validator.checkArg('ITEM', 11760, 11764, 1, ret), PrimChecks.validator.checkArg('ITEM', 11760, 11764, 12, options)));
    }
    ret = PrimChecks.math.plus(11797, 11798, PrimChecks.validator.checkArg('+', 11797, 11798, 1, ret), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("RET", ret);
  }, "[ weight -> set wsum wsum + weight if wsum > wret [ report item ret options ] set ret ret + 1 ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11674, 11681, R); return R; }
}))
ProcedurePrims.defineReporter("compatibility", 12017, 12181, (function(t1, t2) {
  let diff = PrimChecks.math.abs(PrimChecks.math.minus(12077, 12078, PrimChecks.validator.checkArg('-', 12077, 12078, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 12071, 12073, 1904, t1), function() { return PrimChecks.turtle.getVariable(12058, 12069, "flower-time"); })), PrimChecks.validator.checkArg('-', 12077, 12078, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 12093, 12095, 1904, t2), function() { return PrimChecks.turtle.getVariable(12080, 12091, "flower-time"); })))); ProcedurePrims.stack().currentContext().registerStringRunVar("DIFF", diff);
  if (Prims.lt(diff, world.observer.getGlobal("flower-duration"))) {
    return PrimChecks.procedure.report(12134, 12140, PrimChecks.math.minus(12158, 12159, PrimChecks.validator.checkArg('-', 12158, 12159, 1, world.observer.getGlobal("flower-duration")), PrimChecks.validator.checkArg('-', 12158, 12159, 1, diff)));
  }
  else {
    return PrimChecks.procedure.report(12170, 12176, 0);
  }
}))
ProcedurePrims.defineReporter("calc-patch-color", 12268, 12356, (function(m) {
  return PrimChecks.procedure.report(12293, 12299, ColorModel.genRGBFromComponents(0, PrimChecks.math.div(12329, 12330, PrimChecks.math.mult(12311, 12312, 255, PrimChecks.math.minus(12316, 12317, 1, PrimChecks.math.div(12321, 12322, PrimChecks.validator.checkArg('/', 12321, 12322, 1, m), 100))), 2), PrimChecks.math.div(12351, 12352, PrimChecks.math.mult(12339, 12340, 255, PrimChecks.math.div(12344, 12345, PrimChecks.validator.checkArg('/', 12344, 12345, 1, m), 100)), 2)));
}))
ProcedurePrims.defineReporter("calc-plant-color", 12371, 12530, (function(t) {
  let blackHpcolor = ColorModel.genRGBFromComponents(0, 0, 0); ProcedurePrims.stack().currentContext().registerStringRunVar("BLACK-PCOLOR", blackHpcolor);
  if (PrimChecks.patch.getVariable(12432, 12440, "barrier?")) {
    return PrimChecks.procedure.report(12446, 12452, blackHpcolor);
  }
  else {
    return PrimChecks.procedure.report(12472, 12478, ColorModel.genRGBFromComponents(0, PrimChecks.math.mult(12490, 12491, 255, PrimChecks.math.minus(12495, 12496, 1, PrimChecks.math.div(12500, 12501, PrimChecks.validator.checkArg('/', 12500, 12501, 1, t), 100))), PrimChecks.math.mult(12515, 12516, 255, PrimChecks.math.div(12520, 12521, PrimChecks.validator.checkArg('/', 12520, 12521, 1, t), 100))));
  }
}))
world.observer.setGlobal("chance-tolerance-mutation", 10);
world.observer.setGlobal("tolerance-mutation-stdev", 20);
world.observer.setGlobal("plants-per-patch", 2);
world.observer.setGlobal("frontier-sharpness", 1);
world.observer.setGlobal("chance-flower-time-mutation", 10);
world.observer.setGlobal("flower-time-mutation-stdev", 10);
world.observer.setGlobal("pollen-radius", 30);
world.observer.setGlobal("flower-duration", 20);
world.observer.setGlobal("show-labels-as", "none");
world.observer.setGlobal("visualize-time-steps", "years");
world.observer.setGlobal("plant-type", "annual");
world.observer.setGlobal("initial-tolerance", "all no tolerance");
world.observer.setGlobal("genetics-model", "avg. genotype");