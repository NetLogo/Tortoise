var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"clock":{"name":"clock","editableColorIndex":0,"rotate":true,"elements":[{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,128,143,143,158,158,173],"ycors":[31,75,75,150,150,75,75],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":135,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'Energy Histogram';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('fast', plotOps.makePenOps, false, new PenBundle.State(15, 10, PenBundle.DisplayMode.Bar), function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'fast', function() { plotManager.setHistogramBarCount(40);; });
  }, function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'fast', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(67, 71, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(73, 78, "color"), 15); }), function() { return PrimChecks.turtle.getVariable(45, 51, "energy"); }));;
    });
  }),
  new PenBundle.Pen('medium', plotOps.makePenOps, false, new PenBundle.State(55, 10, PenBundle.DisplayMode.Bar), function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'medium', function() { plotManager.setHistogramBarCount(40);; });
  }, function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'medium', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(67, 71, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(73, 78, "color"), 55); }), function() { return PrimChecks.turtle.getVariable(45, 51, "energy"); }));;
    });
  }),
  new PenBundle.Pen('slow', plotOps.makePenOps, false, new PenBundle.State(105, 10, PenBundle.DisplayMode.Bar), function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'slow', function() { plotManager.setHistogramBarCount(40);; });
  }, function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'slow', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(67, 71, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(73, 78, "color"), 105); }), function() { return PrimChecks.turtle.getVariable(45, 51, "energy"); }));;
    });
  }),
  new PenBundle.Pen('avg-energy', plotOps.makePenOps, false, new PenBundle.State(5, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'avg-energy', function() {
      plotManager.resetPen();
      var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("avg-energy")); if (R === StopInterrupt) { return R; };
    });
  }),
  new PenBundle.Pen('init-avg-energy', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', 'init-avg-energy', function() {
      var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("init-avg-energy")); if (R === StopInterrupt) { return R; };
    });
  }, function() {})];
  var setup   = function() {};
  var update  = function() {
    return ProcedurePrims.runInPlotContext('Energy Histogram', undefined, function() {
      plotManager.setXRange(0, PrimChecks.math.mult(113, 114, PrimChecks.math.mult(85, 86, PrimChecks.math.mult(57, 58, 0.5, PrimChecks.math.mult(80, 81, PrimChecks.validator.checkArg('*', 80, 81, 1, world.observer.getGlobal("init-particle-speed")), 2)), PrimChecks.math.mult(108, 109, PrimChecks.validator.checkArg('*', 108, 109, 1, world.observer.getGlobal("init-particle-speed")), 2)), PrimChecks.validator.checkArg('*', 113, 114, 1, world.observer.getGlobal("particle-mass"))));
      plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(178, 179, PrimChecks.validator.checkArg('/', 178, 179, 1, world.observer.getGlobal("number-of-particles")), 6)));;
    });
  };
  return new Plot(name, pens, plotOps, "Energy", "Number", true, false, false, 0, 400, 0, 10, setup, update);
})(), (function() {
  var name    = 'Speed Counts';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('fast', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Speed Counts', 'fast', function() { plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal("percent-fast"));; });
  }),
  new PenBundle.Pen('medium', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Speed Counts', 'medium', function() { plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal("percent-medium"));; });
  }),
  new PenBundle.Pen('slow', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Speed Counts', 'slow', function() { plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal("percent-slow"));; });
  })];
  var setup   = function() {};
  var update  = function() {
    return ProcedurePrims.runInPlotContext('Speed Counts', undefined, function() { plotManager.setYRange(0, 100);; });
  };
  return new Plot(name, pens, plotOps, "time", "count (%)", true, true, true, 0, 20, 0, 100, setup, update);
})(), (function() {
  var name    = 'Speed Histogram';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('fast', plotOps.makePenOps, false, new PenBundle.State(15, 5, PenBundle.DisplayMode.Bar), function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'fast', function() { plotManager.setHistogramBarCount(40);; });
  }, function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'fast', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(72, 77, "color"), 15); }), function() { return PrimChecks.turtle.getVariable(45, 50, "speed"); }));;
    });
  }),
  new PenBundle.Pen('medium', plotOps.makePenOps, false, new PenBundle.State(55, 5, PenBundle.DisplayMode.Bar), function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'medium', function() { plotManager.setHistogramBarCount(40);; });
  }, function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'medium', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(72, 77, "color"), 55); }), function() { return PrimChecks.turtle.getVariable(45, 50, "speed"); }));;
    });
  }),
  new PenBundle.Pen('slow', plotOps.makePenOps, false, new PenBundle.State(105, 5, PenBundle.DisplayMode.Bar), function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'slow', function() { plotManager.setHistogramBarCount(40);; });
  }, function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'slow', function() {
      plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(72, 77, "color"), 105); }), function() { return PrimChecks.turtle.getVariable(45, 50, "speed"); }));;
    });
  }),
  new PenBundle.Pen('avg-speed', plotOps.makePenOps, false, new PenBundle.State(5, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'avg-speed', function() {
      plotManager.resetPen();
      var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("avg-speed")); if (R === StopInterrupt) { return R; };
    });
  }),
  new PenBundle.Pen('init-avg-speed', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', 'init-avg-speed', function() {
      var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("init-avg-speed")); if (R === StopInterrupt) { return R; };
    });
  }, function() {})];
  var setup   = function() {};
  var update  = function() {
    return ProcedurePrims.runInPlotContext('Speed Histogram', undefined, function() {
      plotManager.setXRange(0, PrimChecks.math.mult(73, 74, PrimChecks.validator.checkArg('*', 73, 74, 1, world.observer.getGlobal("init-particle-speed")), 2));
      plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(126, 127, PrimChecks.validator.checkArg('/', 126, 127, 1, world.observer.getGlobal("number-of-particles")), 6)));;
    });
  };
  return new Plot(name, pens, plotOps, "Speed", "Number", true, false, false, 0, 50, 0, 100, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "particles", singular: "particle", varNames: ["speed", "mass", "energy", "last-collision"] }])([], [])('globals [   tick-delta                      ;; how much we advance the tick counter this time through   max-tick-delta                  ;; the largest tick-delta is allowed to be   init-avg-speed init-avg-energy  ;; initial averages   avg-speed avg-energy            ;; current averages   fast medium slow                ;; current counts   percent-fast percent-medium     ;; percentage of the counts   percent-slow                    ;; percentage of the counts  ]  breed [ particles particle ]  particles-own [   speed mass energy          ;; particle info   last-collision ]   to setup   clear-all   set-default-shape particles \"circle\"   set max-tick-delta 0.1073   make-particles   update-variables   set init-avg-speed avg-speed   set init-avg-energy avg-energy   reset-ticks end  to go   ask particles [ move ]   ask particles   [ if collide? [check-for-collision] ]   ifelse (trace?)     [ ask particle 0 [ pen-down ] ]     [ ask particle 0 [ pen-up ] ]   tick-advance tick-delta   if floor ticks > floor (ticks - tick-delta)   [     update-variables     update-plots   ]   calculate-tick-delta    display end  to update-variables   set medium count particles with [color = green]   set slow count particles with [color = blue]   set fast count particles with [color = red]   set percent-medium (medium / count particles) * 100   set percent-slow (slow / count particles) * 100   set percent-fast (fast / count particles) * 100   set avg-speed  mean [speed] of particles   set avg-energy  mean [energy] of particles end    to calculate-tick-delta   ;; tick-delta is calculated in such way that even the fastest   ;; particle will jump at most 1 patch length in a tick. As   ;; particles jump (speed * tick-delta) at every tick, making   ;; tick length the inverse of the speed of the fastest particle   ;; (1/max speed) assures that. Having each particle advance at most   ;; one patch-length is necessary for them not to jump over each other   ;; without colliding.   ifelse any? particles with [speed > 0]     [ set tick-delta min list (1 / (ceiling max [speed] of particles)) max-tick-delta ]     [ set tick-delta max-tick-delta ] end    to move  ;; particle procedure   if patch-ahead (speed * tick-delta) != patch-here     [ set last-collision nobody ]   jump (speed * tick-delta) end  to check-for-collision  ;; particle procedure   ;; Here we impose a rule that collisions only take place when there   ;; are exactly two particles per patch.    if count other particles-here = 1   [     ;; the following conditions are imposed on collision candidates:     ;;   1. they must have a lower who number than my own, because collision     ;;      code is asymmetrical: it must always happen from the point of view     ;;      of just one particle.     ;;   2. they must not be the same particle that we last collided with on     ;;      this patch, so that we have a chance to leave the patch after we\'ve     ;;      collided with someone.     let candidate one-of other particles-here with       [who < [who] of myself and myself != last-collision]     ;; we also only collide if one of us has non-zero speed. It\'s useless     ;; (and incorrect, actually) for two particles with zero speed to collide.     if (candidate != nobody) and (speed > 0 or [speed] of candidate > 0)     [       collide-with candidate       set last-collision candidate       ask candidate [ set last-collision myself ]     ]   ] end  ;; implements a collision with another particle. ;; ;; THIS IS THE HEART OF THE PARTICLE SIMULATION, AND YOU ARE STRONGLY ADVISED ;; NOT TO CHANGE IT UNLESS YOU REALLY UNDERSTAND WHAT YOU\'RE DOING! ;; ;; The two particles colliding are self and other-particle, and while the ;; collision is performed from the point of view of self, both particles are ;; modified to reflect its effects. This is somewhat complicated, so I\'ll ;; give a general outline here: ;;   1. Do initial setup, and determine the heading between particle centers ;;      (call it theta). ;;   2. Convert the representation of the velocity of each particle from ;;      speed/heading to a theta-based vector whose first component is the ;;      particle\'s speed along theta, and whose second component is the speed ;;      perpendicular to theta. ;;   3. Modify the velocity vectors to reflect the effects of the collision. ;;      This involves: ;;        a. computing the velocity of the center of mass of the whole system ;;           along direction theta ;;        b. updating the along-theta components of the two velocity vectors. ;;   4. Convert from the theta-based vector representation of velocity back to ;;      the usual speed/heading representation for each particle. ;;   5. Perform final cleanup and update derived quantities. to collide-with [ other-particle ] ;; particle procedure   ;;; PHASE 1: initial setup    ;; for convenience, grab some quantities from other-particle   let mass2 [mass] of other-particle   let speed2 [speed] of other-particle   let heading2 [heading] of other-particle    ;; since particles are modeled as zero-size points, theta isn\'t meaningfully   ;; defined. we can assign it randomly without affecting the model\'s outcome.   let theta (random-float 360)      ;;; PHASE 2: convert velocities to theta-based vector representation    ;; now convert my velocity from speed/heading representation to components   ;; along theta and perpendicular to theta   let v1t (speed * cos (theta - heading))   let v1l (speed * sin (theta - heading))    ;; do the same for other-particle   let v2t (speed2 * cos (theta - heading2))   let v2l (speed2 * sin (theta - heading2))      ;;; PHASE 3: manipulate vectors to implement collision    ;; compute the velocity of the system\'s center of mass along theta   let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )    ;; now compute the new velocity for each particle along direction theta.   ;; velocity perpendicular to theta is unaffected by a collision along theta,   ;; so the next two lines actually implement the collision itself, in the   ;; sense that the effects of the collision are exactly the following changes   ;; in particle velocity.   set v1t (2 * vcm - v1t)   set v2t (2 * vcm - v2t)      ;;; PHASE 4: convert back to normal speed/heading    ;; now convert my velocity vector into my new speed and heading   set speed sqrt ((v1t ^ 2) + (v1l ^ 2))   set energy (0.5 * mass * (speed ^ 2))   ;; if the magnitude of the velocity vector is 0, atan is undefined. but   ;; speed will be 0, so heading is irrelevant anyway. therefore, in that   ;; case we\'ll just leave it unmodified.   if v1l != 0 or v1t != 0     [ set heading (theta - (atan v1l v1t)) ]    ;; and do the same for other-particle   ask other-particle [     set speed sqrt ((v2t ^ 2) + (v2l ^ 2))     set energy (0.5 * mass * (speed ^ 2))     if v2l != 0 or v2t != 0       [ set heading (theta - (atan v2l v2t)) ]   ]    ;; PHASE 5: final updates    ;; now recolor, since color is based on quantities that may have changed   recolor   ask other-particle     [ recolor ] end  to recolor  ;; particle procedure   ifelse speed < (0.5 * 10)   [     set color blue   ]   [     ifelse speed > (1.5 * 10)       [ set color red ]       [ set color green ]   ] end  ;;; ;;; drawing procedures ;;;   ;; creates initial particles to make-particles   create-particles number-of-particles   [     setup-particle     random-position     recolor   ]   calculate-tick-delta end   to setup-particle  ;; particle procedure   set speed init-particle-speed   set mass particle-mass   set energy (0.5 * mass * (speed ^ 2))   set last-collision nobody end   ;; place particle at random location inside the box. to random-position ;; particle procedure   setxy ((1 + min-pxcor) + random-float ((2 * max-pxcor) - 2))         ((1 + min-pycor) + random-float ((2 * max-pycor) - 2)) end  to-report last-n [n the-list]   ifelse n >= length the-list     [ report the-list ]     [ report last-n n butfirst the-list ] end  ;; histogram procedure to draw-vert-line [ xval ]   plotxy xval plot-y-min   plot-pen-down   plotxy xval plot-y-max   plot-pen-up end   ; Copyright 1997 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":316,"y":11,"width":332,"height":333,"dimensions":{"minPxcor":-40,"maxPxcor":40,"minPycor":-40,"maxPycor":40,"patchSize":4,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","source":"go","x":8,"y":43,"width":86,"height":33,"display":"go/stop","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","source":"setup","x":8,"y":10,"width":86,"height":33,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1000; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"number-of-particles","x":97,"y":11,"width":206,"height":33,"oldSize":true,"display":"number-of-particles","min":"1","max":"1000","default":100,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"avg-speed\"); })","source":"avg-speed","x":18,"y":254,"width":132,"height":45,"oldSize":true,"display":"average speed","precision":2,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', undefined, function() {     plotManager.setXRange(0, PrimChecks.math.mult(113, 114, PrimChecks.math.mult(85, 86, PrimChecks.math.mult(57, 58, 0.5, PrimChecks.math.mult(80, 81, PrimChecks.validator.checkArg('*', 80, 81, 1, world.observer.getGlobal(\"init-particle-speed\")), 2)), PrimChecks.math.mult(108, 109, PrimChecks.validator.checkArg('*', 108, 109, 1, world.observer.getGlobal(\"init-particle-speed\")), 2)), PrimChecks.validator.checkArg('*', 113, 114, 1, world.observer.getGlobal(\"particle-mass\"))));     plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(178, 179, PrimChecks.validator.checkArg('/', 178, 179, 1, world.observer.getGlobal(\"number-of-particles\")), 6)));;   }); }","compiledPens":[{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'fast', function() { plotManager.setHistogramBarCount(40);; }); }","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'fast', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(67, 71, world.turtleManager.turtlesOfBreed(\"PARTICLES\"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(73, 78, \"color\"), 15); }), function() { return PrimChecks.turtle.getVariable(45, 51, \"energy\"); }));;   }); }","display":"fast","interval":10,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ energy ] of particles with [color = red]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'medium', function() { plotManager.setHistogramBarCount(40);; }); }","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'medium', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(67, 71, world.turtleManager.turtlesOfBreed(\"PARTICLES\"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(73, 78, \"color\"), 55); }), function() { return PrimChecks.turtle.getVariable(45, 51, \"energy\"); }));;   }); }","display":"medium","interval":10,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ energy ] of particles with [color = green]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'slow', function() { plotManager.setHistogramBarCount(40);; }); }","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'slow', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(67, 71, world.turtleManager.turtlesOfBreed(\"PARTICLES\"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(73, 78, \"color\"), 105); }), function() { return PrimChecks.turtle.getVariable(45, 51, \"energy\"); }));;   }); }","display":"slow","interval":10,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ energy ] of particles with [color = blue]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'avg-energy', function() {     plotManager.resetPen();     var R = ProcedurePrims.callCommand(\"draw-vert-line\", world.observer.getGlobal(\"avg-energy\")); if (R === StopInterrupt) { return R; };   }); }","display":"avg-energy","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset  draw-vert-line avg-energy","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Energy Histogram', 'init-avg-energy', function() {     var R = ProcedurePrims.callCommand(\"draw-vert-line\", world.observer.getGlobal(\"init-avg-energy\")); if (R === StopInterrupt) { return R; };   }); }","compiledUpdateCode":"function() {}","display":"init-avg-energy","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"draw-vert-line init-avg-energy","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"Energy Histogram","x":614,"y":386,"width":290,"height":196,"oldSize":true,"xAxis":"Energy","yAxis":"Number","xmin":0,"xmax":400,"ymin":0,"ymax":10,"autoPlotX":false,"autoPlotY":false,"legendOn":true,"setupCode":"","updateCode":"set-plot-x-range 0 (0.5 * (init-particle-speed * 2) * (init-particle-speed * 2) * particle-mass) set-plot-y-range 0 ceiling (number-of-particles / 6)","pens":[{"display":"fast","interval":10,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ energy ] of particles with [color = red]","type":"pen"},{"display":"medium","interval":10,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ energy ] of particles with [color = green]","type":"pen"},{"display":"slow","interval":10,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ energy ] of particles with [color = blue]","type":"pen"},{"display":"avg-energy","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset  draw-vert-line avg-energy","type":"pen"},{"display":"init-avg-energy","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"draw-vert-line init-avg-energy","updateCode":"","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"avg-energy\"); })","source":"avg-energy","x":173,"y":254,"width":132,"height":45,"oldSize":true,"display":"average energy","precision":2,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Counts', undefined, function() { plotManager.setYRange(0, 100);; }); }","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Counts', 'fast', function() { plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal(\"percent-fast\"));; }); }","display":"fast","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks percent-fast","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Counts', 'medium', function() { plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal(\"percent-medium\"));; }); }","display":"medium","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks percent-medium","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Counts', 'slow', function() { plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal(\"percent-slow\"));; }); }","display":"slow","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks percent-slow","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"Speed Counts","x":15,"y":385,"width":289,"height":197,"oldSize":true,"xAxis":"time","yAxis":"count (%)","xmin":0,"xmax":20,"ymin":0,"ymax":100,"autoPlotX":true,"autoPlotY":true,"legendOn":true,"setupCode":"","updateCode":"set-plot-y-range 0 100","pens":[{"display":"fast","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks percent-fast","type":"pen"},{"display":"medium","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks percent-medium","type":"pen"},{"display":"slow","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"plotxy ticks percent-slow","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"variable":"collide?","x":97,"y":44,"width":103,"height":33,"oldSize":true,"display":"collide?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', undefined, function() {     plotManager.setXRange(0, PrimChecks.math.mult(73, 74, PrimChecks.validator.checkArg('*', 73, 74, 1, world.observer.getGlobal(\"init-particle-speed\")), 2));     plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(126, 127, PrimChecks.validator.checkArg('/', 126, 127, 1, world.observer.getGlobal(\"number-of-particles\")), 6)));;   }); }","compiledPens":[{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'fast', function() { plotManager.setHistogramBarCount(40);; }); }","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'fast', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtleManager.turtlesOfBreed(\"PARTICLES\"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(72, 77, \"color\"), 15); }), function() { return PrimChecks.turtle.getVariable(45, 50, \"speed\"); }));;   }); }","display":"fast","interval":5,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ speed ] of particles with [color = red]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'medium', function() { plotManager.setHistogramBarCount(40);; }); }","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'medium', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtleManager.turtlesOfBreed(\"PARTICLES\"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(72, 77, \"color\"), 55); }), function() { return PrimChecks.turtle.getVariable(45, 50, \"speed\"); }));;   }); }","display":"medium","interval":5,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ speed ] of particles with [color = green]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'slow', function() { plotManager.setHistogramBarCount(40);; }); }","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'slow', function() {     plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(66, 70, world.turtleManager.turtlesOfBreed(\"PARTICLES\"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(72, 77, \"color\"), 105); }), function() { return PrimChecks.turtle.getVariable(45, 50, \"speed\"); }));;   }); }","display":"slow","interval":5,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ speed ] of particles with [color = blue]","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'avg-speed', function() {     plotManager.resetPen();     var R = ProcedurePrims.callCommand(\"draw-vert-line\", world.observer.getGlobal(\"avg-speed\")); if (R === StopInterrupt) { return R; };   }); }","display":"avg-speed","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset   draw-vert-line avg-speed","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {   return ProcedurePrims.runInPlotContext('Speed Histogram', 'init-avg-speed', function() {     var R = ProcedurePrims.callCommand(\"draw-vert-line\", world.observer.getGlobal(\"init-avg-speed\")); if (R === StopInterrupt) { return R; };   }); }","compiledUpdateCode":"function() {}","display":"init-avg-speed","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"draw-vert-line init-avg-speed","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"Speed Histogram","x":312,"y":385,"width":294,"height":197,"oldSize":true,"xAxis":"Speed","yAxis":"Number","xmin":0,"xmax":50,"ymin":0,"ymax":100,"autoPlotX":false,"autoPlotY":false,"legendOn":true,"setupCode":"","updateCode":"set-plot-x-range 0 (init-particle-speed * 2) set-plot-y-range 0 ceiling (number-of-particles / 6)","pens":[{"display":"fast","interval":5,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ speed ] of particles with [color = red]","type":"pen"},{"display":"medium","interval":5,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ speed ] of particles with [color = green]","type":"pen"},{"display":"slow","interval":5,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"set-histogram-num-bars 40","updateCode":"histogram [ speed ] of particles with [color = blue]","type":"pen"},{"display":"avg-speed","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"plot-pen-reset   draw-vert-line avg-speed","type":"pen"},{"display":"init-avg-speed","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"draw-vert-line init-avg-speed","updateCode":"","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"percent-fast\"); })","source":"percent-fast","x":17,"y":312,"width":87,"height":45,"oldSize":true,"display":"percent fast","precision":0,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"percent-medium\"); })","source":"percent-medium","x":108,"y":312,"width":97,"height":45,"oldSize":true,"display":"percent medium","precision":0,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"percent-slow\"); })","source":"percent-slow","x":208,"y":312,"width":98,"height":45,"oldSize":true,"display":"percent slow","precision":0,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"variable":"trace?","x":200,"y":44,"width":103,"height":33,"oldSize":true,"display":"trace?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 20; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"init-particle-speed","x":8,"y":88,"width":186,"height":33,"oldSize":true,"display":"init-particle-speed","min":"1","max":"20","default":10,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 20; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"particle-mass","x":8,"y":128,"width":186,"height":33,"oldSize":true,"display":"particle-mass","min":"1","max":"20","default":1,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"compiledSource":"world.clearDrawing();","source":"clear-drawing","x":200,"y":77,"width":103,"height":33,"display":"clear trace","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["number-of-particles", "collide?", "trace?", "init-particle-speed", "particle-mass", "tick-delta", "max-tick-delta", "init-avg-speed", "init-avg-energy", "avg-speed", "avg-energy", "fast", "medium", "slow", "percent-fast", "percent-medium", "percent-slow"], ["number-of-particles", "collide?", "trace?", "init-particle-speed", "particle-mass"], [], -40, 40, -40, 40, 4, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 583, 782, (function() {
  world.clearAll();
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("PARTICLES").getSpecialName(), "circle")
  world.observer.setGlobal("max-tick-delta", 0.1073);
  var R = ProcedurePrims.callCommand("make-particles"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("update-variables"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("init-avg-speed", world.observer.getGlobal("avg-speed"));
  world.observer.setGlobal("init-avg-energy", world.observer.getGlobal("avg-energy"));
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("go", 790, 1114, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { var R = ProcedurePrims.callCommand("move"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(795, 798, R); return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() {
    if (world.observer.getGlobal("collide?")) {
      var R = ProcedurePrims.callCommand("check-for-collision"); if (R === DeathInterrupt) { return R; }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(820, 823, R); return R; }
  if (world.observer.getGlobal("trace?")) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 898, 901, 1904, PrimChecks.turtle.getTurtleOfBreed(902, 910, "PARTICLES", 0)), function() { SelfManager.self().penManager.lowerPen(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(898, 901, R); return R; }
  }
  else {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 934, 937, 1904, PrimChecks.turtle.getTurtleOfBreed(938, 946, "PARTICLES", 0)), function() { SelfManager.self().penManager.raisePen(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(934, 937, R); return R; }
  }
  world.ticker.tickAdvance(world.observer.getGlobal("tick-delta"));
  if (Prims.gt(PrimChecks.math.floor(world.ticker.tickCount()), PrimChecks.math.floor(PrimChecks.math.minus(1020, 1021, world.ticker.tickCount(), PrimChecks.validator.checkArg('-', 1020, 1021, 1, world.observer.getGlobal("tick-delta")))))) {
    var R = ProcedurePrims.callCommand("update-variables"); if (R === DeathInterrupt) { return R; }
    plotManager.updatePlots();
  }
  var R = ProcedurePrims.callCommand("calculate-tick-delta"); if (R === DeathInterrupt) { return R; }
  Prims.display();
}))
ProcedurePrims.defineCommand("update-variables", 1122, 1524, (function() {
  world.observer.setGlobal("medium", PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(1174, 1179, "color"), 55); }));
  world.observer.setGlobal("slow", PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(1222, 1227, "color"), 105); }));
  world.observer.setGlobal("fast", PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(1269, 1274, "color"), 15); }));
  world.observer.setGlobal("percent-medium", PrimChecks.math.mult(1330, 1331, PrimChecks.math.div(1311, 1312, PrimChecks.validator.checkArg('/', 1311, 1312, 1, world.observer.getGlobal("medium")), PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PARTICLES"))), 100));
  world.observer.setGlobal("percent-slow", PrimChecks.math.mult(1380, 1381, PrimChecks.math.div(1361, 1362, PrimChecks.validator.checkArg('/', 1361, 1362, 1, world.observer.getGlobal("slow")), PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PARTICLES"))), 100));
  world.observer.setGlobal("percent-fast", PrimChecks.math.mult(1430, 1431, PrimChecks.math.div(1411, 1412, PrimChecks.validator.checkArg('/', 1411, 1412, 1, world.observer.getGlobal("fast")), PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PARTICLES"))), 100));
  world.observer.setGlobal("avg-speed", PrimChecks.list.mean(1453, 1457, PrimChecks.validator.checkArg('MEAN', 1453, 1457, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(1459, 1464, "speed"); }))));
  world.observer.setGlobal("avg-energy", PrimChecks.list.mean(1497, 1501, PrimChecks.validator.checkArg('MEAN', 1497, 1501, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(1503, 1509, "energy"); }))));
}))
ProcedurePrims.defineCommand("calculate-tick-delta", 1534, 2142, (function() {
  if (PrimChecks.agentset.anyWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.gt(PrimChecks.turtle.getVariable(2005, 2010, "speed"), 0); })) {
    world.observer.setGlobal("tick-delta", PrimChecks.list.min(2037, 2040, ListPrims.list(PrimChecks.math.div(2049, 2050, 1, PrimChecks.math.ceil(PrimChecks.list.max(2060, 2063, PrimChecks.validator.checkArg('MAX', 2060, 2063, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(2065, 2070, "speed"); }))))), world.observer.getGlobal("max-tick-delta"))));
  }
  else {
    world.observer.setGlobal("tick-delta", world.observer.getGlobal("max-tick-delta"));
  }
}))
ProcedurePrims.defineCommand("move", 2152, 2294, (function() {
  if (!Prims.equality(SelfManager.self().patchAhead(PrimChecks.math.mult(2204, 2205, PrimChecks.validator.checkArg('*', 2204, 2205, 1, PrimChecks.turtle.getVariable(2198, 2203, "speed")), PrimChecks.validator.checkArg('*', 2204, 2205, 1, world.observer.getGlobal("tick-delta")))), SelfManager.self().getPatchHere())) {
    PrimChecks.turtle.setVariable(2242, 2256, "last-collision", Nobody);
  }
  SelfManager.self().jumpIfAble(PrimChecks.math.mult(2280, 2281, PrimChecks.validator.checkArg('*', 2280, 2281, 1, PrimChecks.turtle.getVariable(2274, 2279, "speed")), PrimChecks.validator.checkArg('*', 2280, 2281, 1, world.observer.getGlobal("tick-delta"))));
}))
ProcedurePrims.defineCommand("check-for-collision", 2302, 3415, (function() {
  if (Prims.equality(SelfPrims._optimalCountOther(SelfManager.self().breedHere("PARTICLES")), 1)) {
    let candidate = PrimChecks.list.oneOf(2967, 2973, PrimChecks.validator.checkArg('ONE-OF', 2967, 2973, 120, PrimChecks.agentset.otherWith(null, null, SelfManager.self().breedHere("PARTICLES"), function() {
      return (Prims.lt(PrimChecks.turtle.getVariable(3007, 3010, "who"), PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtle.getVariable(3014, 3017, "who"); })) && !Prims.equality(SelfManager.myself(), PrimChecks.turtle.getVariable(3043, 3057, "last-collision")));
    }))); ProcedurePrims.stack().currentContext().registerStringRunVar("CANDIDATE", candidate);
    if ((!Prims.equality(candidate, Nobody) && (Prims.gt(PrimChecks.turtle.getVariable(3246, 3251, "speed"), 0) || Prims.gt(PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 3267, 3269, 1904, candidate), function() { return PrimChecks.turtle.getVariable(3260, 3265, "speed"); }), 0)))) {
      var R = ProcedurePrims.callCommand("collide-with", candidate); if (R === DeathInterrupt) { return R; }
      PrimChecks.turtle.setVariable(3330, 3344, "last-collision", candidate);
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 3361, 3364, 1904, candidate), function() { PrimChecks.turtle.setVariable(3381, 3395, "last-collision", SelfManager.myself()); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3361, 3364, R); return R; }
    }
  }
}))
ProcedurePrims.defineCommand("collide-with", 4738, 7022, (function(otherHparticle) {
  let mass2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4904, 4906, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(4898, 4902, "mass"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("MASS2", mass2);
  let speed2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4943, 4945, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(4936, 4941, "speed"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("SPEED2", speed2);
  let heading2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4986, 4988, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(4977, 4984, "heading"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("HEADING2", heading2);
  let theta = PrimChecks.math.randomFloat(360); ProcedurePrims.stack().currentContext().registerStringRunVar("THETA", theta);
  let v1t = PrimChecks.math.mult(5407, 5408, PrimChecks.validator.checkArg('*', 5407, 5408, 1, PrimChecks.turtle.getVariable(5401, 5406, "speed")), PrimChecks.math.cos(PrimChecks.math.minus(5420, 5421, PrimChecks.validator.checkArg('-', 5420, 5421, 1, theta), PrimChecks.validator.checkArg('-', 5420, 5421, 1, PrimChecks.turtle.getVariable(5422, 5429, "heading"))))); ProcedurePrims.stack().currentContext().registerStringRunVar("V1T", v1t);
  let v1l = PrimChecks.math.mult(5449, 5450, PrimChecks.validator.checkArg('*', 5449, 5450, 1, PrimChecks.turtle.getVariable(5443, 5448, "speed")), PrimChecks.math.sin(PrimChecks.math.minus(5462, 5463, PrimChecks.validator.checkArg('-', 5462, 5463, 1, theta), PrimChecks.validator.checkArg('-', 5462, 5463, 1, PrimChecks.turtle.getVariable(5464, 5471, "heading"))))); ProcedurePrims.stack().currentContext().registerStringRunVar("V1L", v1l);
  let v2t = PrimChecks.math.mult(5529, 5530, PrimChecks.validator.checkArg('*', 5529, 5530, 1, speed2), PrimChecks.math.cos(PrimChecks.math.minus(5542, 5543, PrimChecks.validator.checkArg('-', 5542, 5543, 1, theta), PrimChecks.validator.checkArg('-', 5542, 5543, 1, heading2)))); ProcedurePrims.stack().currentContext().registerStringRunVar("V2T", v2t);
  let v2l = PrimChecks.math.mult(5573, 5574, PrimChecks.validator.checkArg('*', 5573, 5574, 1, speed2), PrimChecks.math.sin(PrimChecks.math.minus(5586, 5587, PrimChecks.validator.checkArg('-', 5586, 5587, 1, theta), PrimChecks.validator.checkArg('-', 5586, 5587, 1, heading2)))); ProcedurePrims.stack().currentContext().registerStringRunVar("V2L", v2l);
  let vcm = PrimChecks.math.div(5771, 5772, PrimChecks.math.plus(5754, 5755, PrimChecks.math.mult(5747, 5748, PrimChecks.validator.checkArg('*', 5747, 5748, 1, PrimChecks.turtle.getVariable(5742, 5746, "mass")), PrimChecks.validator.checkArg('*', 5747, 5748, 1, v1t)), PrimChecks.math.mult(5763, 5764, PrimChecks.validator.checkArg('*', 5763, 5764, 1, mass2), PrimChecks.validator.checkArg('*', 5763, 5764, 1, v2t))), PrimChecks.math.plus(5779, 5780, PrimChecks.validator.checkArg('+', 5779, 5780, 1, PrimChecks.turtle.getVariable(5774, 5778, "mass")), PrimChecks.validator.checkArg('+', 5779, 5780, 1, mass2))); ProcedurePrims.stack().currentContext().registerStringRunVar("VCM", vcm);
  v1t = PrimChecks.math.minus(6145, 6146, PrimChecks.math.mult(6139, 6140, 2, PrimChecks.validator.checkArg('*', 6139, 6140, 1, vcm)), PrimChecks.validator.checkArg('-', 6145, 6146, 1, v1t)); ProcedurePrims.stack().currentContext().updateStringRunVar("V1T", v1t);
  v2t = PrimChecks.math.minus(6171, 6172, PrimChecks.math.mult(6165, 6166, 2, PrimChecks.validator.checkArg('*', 6165, 6166, 1, vcm)), PrimChecks.validator.checkArg('-', 6171, 6172, 1, v2t)); ProcedurePrims.stack().currentContext().updateStringRunVar("V2T", v2t);
  PrimChecks.turtle.setVariable(6306, 6311, "speed", PrimChecks.math.sqrt(6312, 6316, PrimChecks.math.plus(6328, 6329, PrimChecks.math.pow(6323, 6324, PrimChecks.validator.checkArg('^', 6323, 6324, 1, v1t), 2), PrimChecks.math.pow(6335, 6336, PrimChecks.validator.checkArg('^', 6335, 6336, 1, v1l), 2))));
  PrimChecks.turtle.setVariable(6347, 6353, "energy", PrimChecks.math.mult(6366, 6367, PrimChecks.math.mult(6359, 6360, 0.5, PrimChecks.validator.checkArg('*', 6359, 6360, 1, PrimChecks.turtle.getVariable(6361, 6365, "mass"))), PrimChecks.math.pow(6375, 6376, PrimChecks.validator.checkArg('^', 6375, 6376, 1, PrimChecks.turtle.getVariable(6369, 6374, "speed")), 2)));
  if ((!Prims.equality(v1l, 0) || !Prims.equality(v1t, 0))) {
    PrimChecks.turtle.setVariable(6607, 6614, "heading", PrimChecks.math.minus(6622, 6623, PrimChecks.validator.checkArg('-', 6622, 6623, 1, theta), PrimChecks.math.atan(6625, 6629, PrimChecks.validator.checkArg('ATAN', 6625, 6629, 1, v1l), PrimChecks.validator.checkArg('ATAN', 6625, 6629, 1, v1t))));
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6685, 6688, 1904, otherHparticle), function() {
    PrimChecks.turtle.setVariable(6714, 6719, "speed", PrimChecks.math.sqrt(6720, 6724, PrimChecks.math.plus(6736, 6737, PrimChecks.math.pow(6731, 6732, PrimChecks.validator.checkArg('^', 6731, 6732, 1, v2t), 2), PrimChecks.math.pow(6743, 6744, PrimChecks.validator.checkArg('^', 6743, 6744, 1, v2l), 2))));
    PrimChecks.turtle.setVariable(6757, 6763, "energy", PrimChecks.math.mult(6776, 6777, PrimChecks.math.mult(6769, 6770, 0.5, PrimChecks.validator.checkArg('*', 6769, 6770, 1, PrimChecks.turtle.getVariable(6771, 6775, "mass"))), PrimChecks.math.pow(6785, 6786, PrimChecks.validator.checkArg('^', 6785, 6786, 1, PrimChecks.turtle.getVariable(6779, 6784, "speed")), 2)));
    if ((!Prims.equality(v2l, 0) || !Prims.equality(v2t, 0))) {
      PrimChecks.turtle.setVariable(6831, 6838, "heading", PrimChecks.math.minus(6846, 6847, PrimChecks.validator.checkArg('-', 6846, 6847, 1, theta), PrimChecks.math.atan(6849, 6853, PrimChecks.validator.checkArg('ATAN', 6849, 6853, 1, v2l), PrimChecks.validator.checkArg('ATAN', 6849, 6853, 1, v2t))));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6685, 6688, R); return R; }
  var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6987, 6990, 1904, otherHparticle), function() { var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6987, 6990, R); return R; }
}))
ProcedurePrims.defineCommand("recolor", 7030, 7204, (function() {
  if (Prims.lt(PrimChecks.turtle.getVariable(7070, 7075, "speed"), PrimChecks.math.mult(7083, 7084, 0.5, 10))) {
    PrimChecks.turtleOrLink.setVariable(7101, 7106, "color", 105);
  }
  else {
    if (Prims.gt(PrimChecks.turtle.getVariable(7131, 7136, "speed"), PrimChecks.math.mult(7144, 7145, 1.5, 10))) {
      PrimChecks.turtleOrLink.setVariable(7162, 7167, "color", 15);
    }
    else {
      PrimChecks.turtleOrLink.setVariable(7186, 7191, "color", 55);
    }
  }
}))
ProcedurePrims.defineCommand("make-particles", 7274, 7410, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(world.observer.getGlobal("number-of-particles"), "PARTICLES"), function() {
    var R = ProcedurePrims.callCommand("setup-particle"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("random-position"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(7291, 7307, R); return R; }
  var R = ProcedurePrims.callCommand("calculate-tick-delta"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("setup-particle", 7419, 7582, (function() {
  PrimChecks.turtle.setVariable(7463, 7468, "speed", world.observer.getGlobal("init-particle-speed"));
  PrimChecks.turtle.setVariable(7495, 7499, "mass", world.observer.getGlobal("particle-mass"));
  PrimChecks.turtle.setVariable(7520, 7526, "energy", PrimChecks.math.mult(7539, 7540, PrimChecks.math.mult(7532, 7533, 0.5, PrimChecks.validator.checkArg('*', 7532, 7533, 1, PrimChecks.turtle.getVariable(7534, 7538, "mass"))), PrimChecks.math.pow(7548, 7549, PrimChecks.validator.checkArg('^', 7548, 7549, 1, PrimChecks.turtle.getVariable(7542, 7547, "speed")), 2)));
  PrimChecks.turtle.setVariable(7560, 7574, "last-collision", Nobody);
}))
ProcedurePrims.defineCommand("random-position", 7644, 7808, (function() {
  PrimChecks.turtle.setXY(7684, 7689, PrimChecks.math.plus(7707, 7708, PrimChecks.math.plus(7694, 7695, 1, world.topology.minPxcor), PrimChecks.math.randomFloat(PrimChecks.math.minus(7739, 7740, PrimChecks.math.mult(7726, 7727, 2, world.topology.maxPxcor), 2))), PrimChecks.math.plus(7770, 7771, PrimChecks.math.plus(7757, 7758, 1, world.topology.minPycor), PrimChecks.math.randomFloat(PrimChecks.math.minus(7802, 7803, PrimChecks.math.mult(7789, 7790, 2, world.topology.maxPycor), 2))));
}))
ProcedurePrims.defineReporter("last-n", 7823, 7939, (function(n, theHlist) {
  if (Prims.gte(n, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 7857, 7863, 12, theHlist)))) {
    return PrimChecks.procedure.report(7879, 7885, theHlist);
  }
  else {
    return PrimChecks.procedure.report(7903, 7909, PrimChecks.procedure.callReporter(7910, 7916, "last-n", n, PrimChecks.list.butFirst('butfirst', 7919, 7927, PrimChecks.validator.checkArg('BUTFIRST', 7919, 7927, 12, theHlist))));
  }
}))
ProcedurePrims.defineCommand("draw-vert-line", 7970, 8074, (function(xval) {
  plotManager.plotPoint(xval, plotManager.getPlotYMin());
  plotManager.lowerPen();
  plotManager.plotPoint(xval, plotManager.getPlotYMax());
  plotManager.raisePen();
}))
world.observer.setGlobal("number-of-particles", 100);
world.observer.setGlobal("collide?", true);
world.observer.setGlobal("trace?", true);
world.observer.setGlobal("init-particle-speed", 10);
world.observer.setGlobal("particle-mass", 1);