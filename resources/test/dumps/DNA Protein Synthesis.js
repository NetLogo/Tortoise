var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var resources = {  };
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[150,165,165,180,180,195,195,210,210,165,165,150],"ycors":[150,165,195,195,225,225,255,255,285,285,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,135,120,120,105,105,90,90,135,135,150],"ycors":[150,165,195,195,225,225,255,255,285,285,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"amino acid":{"name":"amino acid","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[105,150,195,195,150,105,105],"ycors":[135,165,135,90,60,90,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":210,"x2":150,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":255,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":240,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":135,"y":240,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,240,195,180,195,240],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[45,60,105,120,105,60],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":135,"y":195,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":150,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":90,"y":120,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":90,"y":75,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":45,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":180,"y":120,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-ala":{"name":"amino-ala","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":225,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[248,233,188,173,188,233],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"amino-arg":{"name":"amino-arg","editableColorIndex":0,"rotate":true,"elements":[{"x1":120,"y1":75,"x2":150,"y2":75,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":102,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":64,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":108,"y":64,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":27,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"amino-asn":{"name":"amino-asn","editableColorIndex":0,"rotate":true,"elements":[{"x1":120,"y1":187,"x2":150,"y2":187,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":106,"y":175,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false}]},"amino-asp":{"name":"amino-asp","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":120,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":138,"y":102,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false}]},"amino-cys":{"name":"amino-cys","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(44, 209, 59, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false}]},"amino-gln":{"name":"amino-gln","editableColorIndex":0,"rotate":true,"elements":[{"x1":120,"y1":150,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":120,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":102,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":108,"y":139,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false}]},"amino-glu":{"name":"amino-glu","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":75,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":102,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":64,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false}]},"amino-gly":{"name":"amino-gly","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[248,233,188,173,188,233],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"amino-his":{"name":"amino-his","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[195,240,255,217,180],"ycors":[225,225,180,154,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":225,"x2":195,"y2":225,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":225,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[248,233,188,173,188,233],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":183,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":228,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":243,"y":169,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":168,"y":169,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":206,"y":143,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-ile":{"name":"amino-ile","editableColorIndex":0,"rotate":true,"elements":[{"x1":121,"y1":226,"x2":151,"y2":226,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":106,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-leu":{"name":"amino-leu","editableColorIndex":0,"rotate":true,"elements":[{"x1":105,"y1":135,"x2":150,"y2":165,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":165,"x2":195,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":210,"x2":150,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":255,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":240,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":135,"y":240,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,240,195,180,195,240],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[45,60,105,120,105,60],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":135,"y":195,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":150,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":90,"y":120,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":180,"y":120,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-lys":{"name":"amino-lys","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":90,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[248,233,188,173,188,233],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":64,"diam":24,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":102,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-met":{"name":"amino-met","editableColorIndex":0,"rotate":true,"elements":[{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":105,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":102,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(44, 209, 59, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false}]},"amino-phe":{"name":"amino-phe","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[119,120,150,180,179,150,119],"ycors":[147,180,195,179,146,131,148],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":224,"x2":149,"y2":194,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":149,"y2":223,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[248,233,188,173,188,233],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":138,"y":183,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":139,"y":120,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":109,"y":135,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":109,"y":168,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":167,"y":135,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":167,"y":168,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-pro":{"name":"amino-pro","editableColorIndex":0,"rotate":true,"elements":[{"x1":210,"y1":210,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":135,"y1":210,"x2":180,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":165,"y1":180,"x2":210,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":255,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":135,"y1":210,"x2":150,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":135,"y":240,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,240,195,180,195,240],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[45,60,105,120,105,60],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":160,"y":166,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":120,"y":195,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":195,"y":195,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-ser":{"name":"amino-ser","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":210,"x2":150,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":255,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":240,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":135,"y":240,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,240,195,180,195,240],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[45,60,105,120,105,60],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":135,"y":195,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":150,"diam":30,"type":"circle","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false}]},"amino-thr":{"name":"amino-thr","editableColorIndex":0,"rotate":true,"elements":[{"x1":118,"y1":190,"x2":148,"y2":190,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[247,232,187,172,187,232],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":137,"y":176,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":138,"y":139,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":105,"y":177,"diam":24,"type":"circle","color":"rgba(45, 141, 190, 1)","filled":true,"marked":false}]},"amino-trp":{"name":"amino-trp","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[204,181,181,225,226],"ycors":[137,163,194,195,161],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[224,225,255,285,284,255,224],"ycors":[162,195,210,195,161,146,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":224,"x2":180,"y2":197,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":119,"y1":259,"x2":194,"y2":259,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":149,"y1":253,"x2":149,"y2":223,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[248,233,188,173,188,233],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[53,68,113,128,113,68],"ycors":[259,274,274,259,244,244],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":138,"y":214,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":138,"y":248,"diam":24,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":243,"y":198,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":244,"y":135,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":214,"y":150,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":214,"y":183,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":272,"y":150,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":272,"y":183,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":169,"y":183,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":192,"y":125,"diam":24,"type":"circle","color":"rgba(84, 196, 196, 1)","filled":true,"marked":false},{"x":169,"y":150,"diam":24,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-tyr":{"name":"amino-tyr","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":60,"x2":150,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[105,150,195,195,150,105,105],"ycors":[135,165,135,90,60,90,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":210,"x2":150,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":255,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":240,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":135,"y":240,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,240,195,180,195,240],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[45,60,105,120,105,60],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":135,"y":195,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":150,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":90,"y":120,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":90,"y":75,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":0,"diam":30,"type":"circle","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":180,"y":120,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":135,"y":45,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"amino-val":{"name":"amino-val","editableColorIndex":0,"rotate":true,"elements":[{"x1":105,"y1":180,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":210,"x2":195,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":240,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":255,"x2":195,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":240,"x2":150,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":135,"y":240,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[255,240,195,180,195,240],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[45,60,105,120,105,60],"ycors":[255,270,270,255,240,240],"type":"polygon","color":"rgba(52, 93, 169, 1)","filled":true,"marked":false},{"x":135,"y":195,"diam":30,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":165,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x":180,"y":165,"diam":30,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"empty":{"name":"empty","editableColorIndex":0,"rotate":false,"elements":[]},"end":{"name":"end","editableColorIndex":2,"rotate":false,"elements":[{"xcors":[130,145,160,175,220,235,250,265,265,250,235,220,175,160,145,130],"ycors":[61,46,46,61,61,46,46,61,226,241,241,226,226,241,241,226],"type":"polygon","color":"rgba(241, 106, 21, 1)","filled":true,"marked":true},{"xcors":[130,145,160,175,220,235,250,265,265,250,235,220,175,160,145,130],"ycors":[61,46,46,61,61,46,46,61,226,241,241,226,226,241,241,226],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false}]},"helicase":{"name":"helicase","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[195,180,165,150,135,120,105,90,75,75,105,105],"ycors":[150,165,165,180,180,195,195,210,210,165,165,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,180,165,150,135,120,105,90,75,75,105,105],"ycors":[150,135,135,120,120,105,105,90,90,135,135,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":117,"y":117,"diam":66,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":false,"marked":false}]},"helicase-expanded":{"name":"helicase-expanded","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[210,195,180,165,150,135,120,105,75,90,120,135],"ycors":[150,135,135,120,120,105,105,90,90,135,135,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[210,195,180,165,150,135,120,105,75,90,120,135],"ycors":[150,165,165,180,180,195,195,210,210,165,165,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":117,"y":117,"diam":66,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":false,"marked":false}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"mrna-a":{"name":"mrna-a","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":45,"y2":60,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false},{"xcors":[180,150,120,120,180],"ycors":[180,120,180,60,60],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"mrna-c":{"name":"mrna-c","editableColorIndex":0,"rotate":true,"elements":[{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x1":120,"y1":61,"x2":90,"y2":31,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x":67,"y":15,"diam":30,"type":"circle","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false},{"xcors":[180,180,120,120,135,165],"ycors":[135,60,60,135,165,165],"type":"polygon","color":"rgba(84, 196, 196, 1)","filled":true,"marked":false}]},"mrna-g":{"name":"mrna-g","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,135,165,180,180],"ycors":[60,165,135,135,165,60],"type":"polygon","color":"rgba(124, 80, 164, 1)","filled":true,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x":67,"y":15,"diam":30,"type":"circle","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false}]},"mrna-start":{"name":"mrna-start","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,0,15,30,30,60,60,150],"ycors":[240,240,270,270,300,300,270,270],"type":"polygon","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false}]},"mrna-stop":{"name":"mrna-stop","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[180,30,30,105,105,135,135,165],"ycors":[240,240,270,270,300,300,270,270],"type":"polygon","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false}]},"mrna-u":{"name":"mrna-u","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,150,180,180],"ycors":[60,120,180,120,60],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"x":67,"y":17,"diam":30,"type":"circle","color":"rgba(224, 127, 150, 1)","filled":true,"marked":false}]},"nucleoside-tri-a":{"name":"nucleoside-tri-a","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":90,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"xcors":[180,150,120,120,180],"ycors":[180,120,180,60,60],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":69,"y":60,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":24,"y":45,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"nucleoside-tri-c":{"name":"nucleoside-tri-c","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":90,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":69,"y":60,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":24,"y":45,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[120,120,135,165,180,180],"ycors":[60,135,165,165,135,60],"type":"polygon","color":"rgba(84, 196, 196, 1)","filled":true,"marked":false}]},"nucleoside-tri-g":{"name":"nucleoside-tri-g","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":90,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":69,"y":60,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":24,"y":45,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[120,120,135,165,180,180],"ycors":[60,165,135,135,165,60],"type":"polygon","color":"rgba(124, 80, 164, 1)","filled":true,"marked":false}]},"nucleoside-tri-t":{"name":"nucleoside-tri-t","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":90,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":69,"y":60,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":24,"y":45,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[120,120,150,180,180],"ycors":[60,120,180,120,60],"type":"polygon","color":"rgba(241, 106, 21, 1)","filled":true,"marked":false}]},"nucleoside-tri-u":{"name":"nucleoside-tri-u","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":90,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":75,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":69,"y":60,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":24,"y":45,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[120,120,150,180,180],"ycors":[60,120,180,120,60],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false}]},"nucleotide-a":{"name":"nucleotide-a","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":45,"y2":60,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[180,150,120,120,180],"ycors":[180,120,180,60,60],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"nucleotide-c":{"name":"nucleotide-c","editableColorIndex":0,"rotate":true,"elements":[{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":61,"x2":90,"y2":31,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":67,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[180,180,120,120,135,165],"ycors":[135,60,60,135,165,165],"type":"polygon","color":"rgba(84, 196, 196, 1)","filled":true,"marked":false}]},"nucleotide-g":{"name":"nucleotide-g","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,135,165,180,180],"ycors":[60,165,135,135,165,60],"type":"polygon","color":"rgba(124, 80, 164, 1)","filled":true,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":67,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"nucleotide-t":{"name":"nucleotide-t","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,150,180,180],"ycors":[60,120,180,120,60],"type":"polygon","color":"rgba(241, 106, 21, 1)","filled":true,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":67,"y":17,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"nucleotide-u":{"name":"nucleotide-u","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,150,180,180],"ycors":[60,120,180,120,60],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":45,"y1":60,"x2":75,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":67,"y":17,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"nucleotide-x":{"name":"nucleotide-x","editableColorIndex":0,"rotate":true,"elements":[{"x1":75,"y1":30,"x2":45,"y2":60,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x1":120,"y1":60,"x2":90,"y2":30,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":69,"y":15,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"xcors":[120,120,150,180,180],"ycors":[60,180,120,180,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"phosphate":{"name":"phosphate","editableColorIndex":0,"rotate":true,"elements":[{"x":129,"y":135,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"phosphate-pair":{"name":"phosphate-pair","editableColorIndex":0,"rotate":true,"elements":[{"x1":120,"y1":135,"x2":150,"y2":150,"type":"line","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"x":144,"y":135,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false},{"x":99,"y":120,"diam":30,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":true,"marked":false}]},"polymerase-0":{"name":"polymerase-0","editableColorIndex":1,"rotate":false,"elements":[{"xcors":[120,120,90,75,30,0,0,30,75,90,120],"ycors":[150,60,60,60,60,120,180,240,240,240,240],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":90,"ymin":0,"xmax":120,"ymax":60,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":90,"ymin":240,"xmax":120,"ymax":300,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":60,"xmax":180,"ymax":240,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":false,"marked":true},{"xmin":120,"ymin":135,"xmax":300,"ymax":165,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true}]},"polymerase-1":{"name":"polymerase-1","editableColorIndex":1,"rotate":false,"elements":[{"xcors":[120,120,90,75,30,0,0,30,75,90,120],"ycors":[150,30,45,60,60,120,180,240,240,240,240],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":30,"xmax":180,"ymax":60,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":90,"ymin":240,"xmax":120,"ymax":300,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":60,"xmax":180,"ymax":240,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":false,"marked":true},{"xmin":105,"ymin":135,"xmax":300,"ymax":165,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true}]},"polymerase-2":{"name":"polymerase-2","editableColorIndex":1,"rotate":false,"elements":[{"xcors":[120,120,90,75,30,0,0,30,75,90,120],"ycors":[150,30,45,60,60,120,180,240,240,255,270],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":30,"xmax":180,"ymax":60,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":240,"xmax":180,"ymax":270,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"x1":180,"y1":60,"x2":180,"y2":240,"type":"line","color":"rgba(215, 50, 41, 1)","filled":false,"marked":true},{"xmin":120,"ymin":135,"xmax":300,"ymax":165,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true}]},"polymerase-3":{"name":"polymerase-3","editableColorIndex":1,"rotate":false,"elements":[{"xcors":[120,120,90,75,30,0,0,30,75,90,120],"ycors":[150,30,45,60,60,120,180,240,240,255,270],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":30,"xmax":180,"ymax":60,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":120,"ymin":240,"xmax":180,"ymax":270,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true},{"xmin":90,"ymin":135,"xmax":315,"ymax":165,"type":"rectangle","color":"rgba(215, 50, 41, 1)","filled":true,"marked":true}]},"promoter-expanded":{"name":"promoter-expanded","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,105,90,75,60,45,15,30,60,75],"ycors":[150,135,135,120,120,105,105,90,90,135,135,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,105,90,75,60,45,15,30,60,75],"ycors":[150,165,165,180,180,195,195,210,210,165,165,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":117,"y":117,"diam":66,"type":"circle","color":"rgba(237, 237, 49, 1)","filled":false,"marked":false}]},"start":{"name":"start","editableColorIndex":0,"rotate":false,"elements":[{"xmin":125,"ymin":46,"xmax":260,"ymax":240,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":false,"marked":false},{"xmin":126,"ymin":47,"xmax":260,"ymax":239,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":true,"elements":[{"x":76,"y":76,"diam":146,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":60,"x2":150,"y2":105,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":195,"x2":150,"y2":240,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"trna-a":{"name":"trna-a","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":60,"x2":150,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"xcors":[180,150,120,120,180],"ycors":[180,120,180,60,60],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"trna-c":{"name":"trna-c","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":61,"x2":150,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false},{"xcors":[180,180,120,120,135,165],"ycors":[135,60,60,135,165,165],"type":"polygon","color":"rgba(84, 196, 196, 1)","filled":true,"marked":false}]},"trna-core":{"name":"trna-core","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[15,285,300,300,195,195,210,225,240,240,225,210,195,195,180,180,285,285,270,30,15,15,105,105,90,90,75,60,45,45,60,75,90,90,0,0],"ycors":[300,300,270,240,210,150,165,165,150,135,120,120,135,75,75,225,255,270,285,285,270,255,225,135,135,165,150,150,165,180,195,195,180,210,240,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"trna-g":{"name":"trna-g","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,135,165,180,180],"ycors":[60,165,135,135,165,60],"type":"polygon","color":"rgba(124, 80, 164, 1)","filled":true,"marked":false},{"x1":150,"y1":60,"x2":150,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false}]},"trna-u":{"name":"trna-u","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[120,120,150,180,180],"ycors":[60,120,180,120,60],"type":"polygon","color":"rgba(215, 50, 41, 1)","filled":true,"marked":false},{"x1":150,"y1":60,"x2":150,"y2":30,"type":"line","color":"rgba(224, 127, 150, 1)","filled":false,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [];
var workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "genes", singular: "gene", varNames: ["gene-number", "strand", "code", "start-position", "end-position"] }, { name: "nucleotides", singular: "nucleotide", varNames: ["gene-number", "strand", "value", "place"] }, { name: "promoters", singular: "promoter", varNames: ["gene-number", "strand"] }, { name: "terminators", singular: "terminator", varNames: ["gene-number", "strand"] }, { name: "mRNA-nucleotides", singular: "mRNA-nucleotide", varNames: ["gene-number", "strand", "value", "place"] }, { name: "mRNAs", singular: "mRNA", varNames: ["gene-number", "strand", "code", "cap-type", "traveling?", "released?"] }, { name: "tRNAs", singular: "tRNA", varNames: ["gene-number", "strand"] }, { name: "tRNA-nucleotides", singular: "tRNA-nucleotide", varNames: ["gene-number", "strand", "value", "place"] }, { name: "amino-acids", singular: "amino-acid", varNames: ["gene-number", "strand", "value", "place"] }, { name: "proteins", singular: "protein", varNames: ["gene-number", "strand", "value"] }, { name: "tags", singular: "tag", varNames: ["value"] }, { name: "taglines", singular: "tagline", varNames: [], isDirected: false }, { name: "backbones", singular: "backbone", varNames: [], isDirected: true }])([], [])(';;;;;;;;;;;;; DNA molecules  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;; keeps a list of the dna code for a given gene breed [genes gene]  ;; the pieces that are inside the dna chain breed [nucleotides nucleotide]  ;; a visualization agent (similar to a promoter protein) ;; that attaches to every start codon location in a DNA chain breed [promoters promoter]  ;; a visualization agent that attaches to every stop codon location in a DNA chain breed [terminators terminator]  ;;;;;;;;;;;;; mRNA molecules  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;; the pieces that are inside the mRNA chain breed [mRNA-nucleotides mRNA-nucleotide]  ;; the tail ends of the mRNA chain breed [mRNAs mRNA]  ;;;;;;;;;;;;; tRNA molecules  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;; the center piece of the tRNA complex breed [tRNAs tRNA]  ;; the pieces that are inside the tRNA complex breed [tRNA-nucleotides tRNA-nucleotide]  ;; the top part of the tRNA complex breed [amino-acids amino-acid]  ;;;;;;;;;;;;; protein molecules  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; breed [proteins protein]                    ;; holds proteins information  ;;;;;;;;;;;;; tags for supporting a fine tuned placement of labels ;;;;;;;;;;;;; breed [tags tag]  ;;;;;;;;;;;;; links ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;; the link between an agent and where its label agent is. ;; This allows fine tuned placement of visualizing of labels undirected-link-breed [taglines tagline]  ;; the link between adjacent amino acids in a protein. ;; It will allows the entire protein to be folded up ;; (not currently implemented) directed-link-breed   [backbones backbone]  ;;;;;;;;;;;;;;;;;;;turtle variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; genes-own            [gene-number strand code start-position end-position] mRNAs-own            [gene-number strand code cap-type traveling? released?] promoters-own        [gene-number strand] terminators-own      [gene-number strand] tRNAs-own            [gene-number strand] proteins-own         [gene-number strand value] amino-acids-own      [gene-number strand value place] nucleotides-own      [gene-number strand value place] mRNA-nucleotides-own [gene-number strand value place] tRNA-nucleotides-own [gene-number strand value place] tags-own [   value ; the value for the label of the agent it is linked to when visualized. ]    ;;;;;;;;;;;;;globals ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  globals [    current-instruction               ;; holds counter value for which instruction is being displayed   codon-to-amino-acid-key           ;; holds lookup table for codon triplet to amino acid   original-dna-string               ;; holds a string of the original DNA   duplicate-dna-string              ;; holds a string of the duplicate DNA.  This changes every time the replicate DNA button is pressed    ;; position values for visualization   duplicate-ribosome-ycor   original-ribosome-ycor   duplicate-dna-ycor   original-dna-ycor   nucleotide-spacing    ;; colors for various agents and states of agents   nucleo-tag-color   terminator-color   gene-color-counter    ;; counters for the number of genes   original-strand-gene-counter   duplicate-strand-gene-counter   original-display-mrna-counter   duplicate-display-mrna-counter    mRNAs-traveling                    ;; list of mRNAs traveling   mRNAs-released                     ;; list of mRNAs released    ;; for keeping track of user initiated events   replicate-dna-event?   show-genes-event?   event-1-triggered?   event-2-triggered?   event-3-triggered?   event-4-triggered?   event-6-triggered?   event-7-triggered?   event-8-triggered?   event-9-triggered?   event-1-completed?   event-2-completed?   event-3-completed?   event-4-completed?   event-6-completed?   event-7-completed?   event-8-completed?   event-9-completed? ]  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;setup procedures;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to setup   clear-all   set replicate-dna-event? false   set show-genes-event? false    set event-1-triggered? false   set event-2-triggered? false   set event-3-triggered? false   set event-4-triggered? false   set event-6-triggered? false   set event-7-triggered? false   set event-8-triggered? false   set event-9-triggered? false   set event-1-completed? false   set event-2-completed? false   set event-3-completed? false   set event-4-completed? false   set event-6-completed? false   set event-7-completed? false   set event-8-completed? false   set event-9-completed? false     set mRNAs-traveling []   set mRNAs-released  []   set codon-to-amino-acid-key []   set original-dna-string \"\"   set duplicate-dna-string \"\"    set duplicate-ribosome-ycor -7   set original-ribosome-ycor 4   set duplicate-dna-ycor -2   set original-dna-ycor 1   set gene-color-counter 1   set nucleotide-spacing .45    set original-strand-gene-counter 0   set duplicate-strand-gene-counter 0   set original-display-mrna-counter 0   set duplicate-display-mrna-counter 0    set-default-shape promoters \"start\"   set-default-shape terminators \"end\"   set-default-shape tags \"empty\"    set terminator-color      [255 0 0 150]   set nucleo-tag-color      [255 255 255 120]    initialize-codon-to-amino-acid-key   setup-starting-dna   visualize-all-genes   ask patches [set pcolor blue - 4]   ask patches with [pycor > 2]  [set pcolor blue - 3.5]   ask patches with [pycor < 0]  [set pcolor green - 4]   ask patches with [pycor < -3] [set pcolor green - 3.5]   show-instruction 1   reset-ticks end   to setup-starting-dna   setup-dna-string   build-genes-from-dna \"original\" original-dna-string   make-a-nucleotide-chain-for-dna-string \"original\" original-dna-string   place-dna \"original\"   build-mrna-for-each-gene \"original\"   build-protein-from-mrna  \"original\"   place-trnas \"original\"   hide-mrna   \"original\"   hide-trna   \"original\"   hide-genes  \"original\" end    ;; original-dna-string to setup-dna-string   if initial-dna-string = \"from user-created-code\" [set original-dna-string dna-string-with-non-nucleotide-characters-replaced user-created-code]   if initial-dna-string = \"random (short strand)\" [     let initial-length-dna 12     repeat initial-length-dna [set original-dna-string (word original-dna-string random-base-letter-DNA)]   ]   if initial-dna-string = \"random (long strand)\"  [     let initial-length-dna 56     repeat initial-length-dna [set original-dna-string (word original-dna-string random-base-letter-DNA)]   ]   if initial-dna-string = \"no genes (short strand)\" [set original-dna-string \"ATTATATCGTAG\"]   if initial-dna-string = \"no genes (long strand)\"  [set original-dna-string \"GATATTTGGTAGCCCGAGAAGTGGTTTTTCAGATAACAGAGGTGGAGCAGCTTTTAG\"]   if initial-dna-string = \"1 short gene\"            [set original-dna-string \"ATTATGTGGTAG\"]   if initial-dna-string = \"1 long gene\"             [set original-dna-string \"GGGATGGACACCTTATCATTTGCTACTAGCGACCAGTTTGAGTAGCTTCGTCGGTGA\"]   if initial-dna-string = \"2 sequential genes\"      [set original-dna-string \"AGTATGAAAACCCACGAGTGGTAGCCCGAGATTGAGATGTGGTTTTTCAGATAACAG\"]   if initial-dna-string = \"2 nested genes\"          [set original-dna-string \"GTTATGAGGGGGACCCGAGATGTGGTTTTTGAAATAGACAAGTAGACCCTAATAGAC\"]   if initial-dna-string = \"3 sequential genes\"      [set original-dna-string \"GATATGTGGTAGCCCGAGATGTGGTTTTTCAGATAACAGATGTGGAGCAGCTTTTAG\"] end   to place-dna [strand-type]   let dna (turtle-set genes nucleotides promoters terminators)   ask dna with [strand = strand-type][     if strand-type = \"original\"  [set ycor original-dna-ycor]     if strand-type = \"duplicate\" [set ycor duplicate-dna-ycor]   ] end   to place-trnas [strand-type]   ask tRNAs with [strand = strand-type] [     if strand-type = \"original\"   [set ycor original-ribosome-ycor + 1]     if strand-type = \"duplicate\"  [set ycor duplicate-ribosome-ycor + 1]   ] end   to make-a-nucleotide-chain-for-dna-string [strand-type dna-string]   let previous-nucleotide nobody   let place-counter 0   create-turtles 1 [     set heading 90     fd 1     repeat (length dna-string) [         hatch 1 [           set breed nucleotides           set strand strand-type           set value item place-counter dna-string           set shape (word \"nucleotide-\" value)           set heading 0           set place place-counter           attach-tag 5 0.5 value nucleo-tag-color           set place-counter place-counter + 1           ]        fd nucleotide-spacing        ]    die ;; remove the chromosome builder (a temporary construction turtle)   ] end    to build-genes-from-dna [strand-type dna-string]   let remaining-dna dna-string   let this-item \"\"   let last-item \"\"   let last-last-item \"\"   let triplet \"\"   let item-position 0   let last-item-kept length dna-string   repeat (length dna-string) [     let first-item item 0 remaining-dna     set remaining-dna remove-item 0 remaining-dna     set last-last-item last-item     set last-item this-item     set this-item first-item     set triplet (word last-last-item last-item this-item)     if triplet = \"ATG\" [       create-genes 1 [         set hidden? true         set strand strand-type         if strand = \"original\"  [           set original-strand-gene-counter original-strand-gene-counter + 1           set gene-number original-strand-gene-counter         ]         if strand = \"duplicate\" [           set duplicate-strand-gene-counter duplicate-strand-gene-counter + 1           set gene-number duplicate-strand-gene-counter         ]         set start-position item-position         set end-position ((length original-dna-string))         set code (word triplet substring dna-string (item-position + 1) ((length dna-string) ) )         ]      ]      set item-position item-position + 1   ]   ask genes [     let end-of-gene? false     let triplet-counter 0     let new-code code     repeat floor (length code / 3)  [       let this-triplet (word  (item (0 + (triplet-counter * 3)) code)  (item (1 + (triplet-counter * 3)) code)  (item (2 + (triplet-counter * 3)) code) )       if (this-triplet =  \"TAG\" or this-triplet = \"TGA\"  or this-triplet = \"TAA\") and not end-of-gene? [         set end-position triplet-counter * 3         set new-code substring code 0 end-position         set end-of-gene? true       ]       set triplet-counter triplet-counter + 1     ]     set triplet-counter 0     set end-of-gene? false     set code new-code   ]  end   to build-mRNA-for-each-gene [strand-type]   ask genes with [strand = strand-type] [     let this-code code     let this-gene self      set heading 90     fd .1     repeat start-position [fd .45] ;; move over to correct nucleotide location on dna      let gene-color next-gene-color     let gene-color-with-transparency (sentence (extract-rgb gene-color) 110)     let gene-color-label (sentence (extract-rgb gene-color) 250)     ;; make promoter for start codon     hatch 1 [       set breed promoters       set color gene-color-with-transparency       set size 3       set hidden? false       attach-tag 142 1.7 (word \"start:\" gene-number) gene-color-label       create-backbone-from this-gene [set hidden? true set tie-mode \"fixed\" tie]       ;; make terminator for end codon       hatch 1 [         set breed terminators         fd ((length this-code) * 0.45)         attach-tag 142 1.7 (word \"end:\" gene-number) gene-color-label         create-backbone-from this-gene [set hidden? true set tie-mode \"fixed\" tie]       ]     ]      ;; make start cap for mRNA molecule     hatch 1 [       let this-mRNA self       set breed mRNAs       set traveling? false       set released? false       set code mrna-string-from-dna-string code       set cap-type \"start\"       set shape \"mrna-start\"       set hidden? false       ;; associate the mRNA molecule with the parent gene       create-backbone-from this-gene [set hidden? true set tie-mode \"fixed\" tie]       ;; build a stop cap for the mRNA molecule       hatch 1 [         set cap-type \"stop\"         set shape \"mrna-stop\"         let nucleotide-counter 0         ;; associate the mRNA stop cap with the start cap         create-backbone-from this-mRNA  [set hidden? true set tie-mode \"fixed\" tie]         ;; use the stop cap turtle to construct the mRNA nucleotides         let code-to-transcribe code         repeat length code [           hatch 1 [             set breed mRNA-nucleotides             set value first code-to-transcribe             set shape (word \"mrna-\" value)             set heading 180             attach-tag 175 0.9 value nucleo-tag-color             create-backbone-from this-mRNA  [set hidden? true set tie-mode \"fixed\" tie]           ]           set code-to-transcribe remove-item 0 code-to-transcribe           fd nucleotide-spacing         ]       ]     ]   ] end   to build-protein-from-mrna [strand-type]   ask mRNAs with [cap-type = \"start\" and strand = strand-type] [     let number-of-triplets-in-list floor ((length code) / 3)     let this-triplet \"\"     let triplet-counter 0     repeat number-of-triplets-in-list   [       set this-triplet (word         complementary-mRNA-base  (item (0 + (triplet-counter * 3)) code)         complementary-mRNA-base  (item (1 + (triplet-counter * 3)) code)         complementary-mRNA-base  (item (2 + (triplet-counter * 3)) code)         )       build-tRNA-for-this-triplet  this-triplet triplet-counter       set triplet-counter triplet-counter + 1     ]   ] end    to build-tRNA-for-this-triplet [this-triplet triplet-counter]   let this-tRNA nobody   hatch 1 [     set breed tRNAs     set this-tRNA self     set shape \"tRNA-core\"     set size 1.2     set heading 0     hatch 1 [       set breed amino-acids       set value  (which-protein-for-this-codon this-triplet)       set shape (word \"amino-\" value)       set heading 0       set size 2       fd 1       create-backbone-from this-tRNA  [set hidden? true set tie-mode \"free\" tie]       attach-tag 20 .8 value nucleo-tag-color     ]     hatch 1 [       set breed tRNA-nucleotides       set shape (word \"trna-\" (item 0 this-triplet))       set heading -155       fd 1.1       set heading 0       create-backbone-from this-tRNA  [set hidden? true set tie-mode \"fixed\" tie]       hatch 1 [         set breed tRNA-nucleotides         set shape (word \"trna-\" (item 1 this-triplet))         set heading 90         fd .45         set heading 0         create-backbone-from this-tRNA  [set hidden? true set tie-mode \"fixed\" tie]       ]       hatch 1 [         set breed tRNA-nucleotides         set shape (word \"trna-\" (item 2 this-triplet))         set heading 90         fd .90         set heading 0         create-backbone-from this-tRNA  [set hidden? true set tie-mode \"fixed\" tie]       ]     ]     fd 1     set heading 90     fd nucleotide-spacing + ( nucleotide-spacing * 3 * triplet-counter )     set heading 0   ] end   ;; fine tuned placement of the location of a label for a nucleoside or nucleotide to attach-tag [direction displacement label-value color-value]   hatch 1 [     set heading direction     fd displacement     set breed tags     set label label-value     set size 0.1     set label-color color-value     create-tagline-with myself [set tie-mode \"fixed\" set hidden? true tie]   ] end    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;; visibility procedures ;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to visualize-all-genes    ask (turtle-set promoters terminators)[ask tagline-neighbors [set hidden? not show-genes?] set hidden? not show-genes?] end   to hide-genes  [strand-type]    ask (turtle-set promoters terminators)  with [strand = strand-type] [ask tagline-neighbors [set hidden? true] set hidden? true] end   to hide-mrna  [strand-type]    ask (turtle-set mRNAs mrna-nucleotides) with [strand = strand-type] [ask tagline-neighbors [set hidden? true] set hidden? true] end   to hide-trna  [strand-type]    ask (turtle-set tRNAs trna-nucleotides amino-acids) with [strand = strand-type] [ask tagline-neighbors [set hidden? true] set hidden? true] end   to show-next-mrna  [strand-type]   let these-genes genes with [strand = strand-type]   if count these-genes = 0 [display-user-message-no-genes]   if strand-type = \"original\" [     set original-display-mrna-counter original-display-mrna-counter + 1     if (original-display-mrna-counter > count these-genes) [set original-display-mrna-counter 1]     ask mRNAs with [strand = strand-type and cap-type = \"start\"] [       ifelse gene-number != original-display-mrna-counter         [ask out-backbone-neighbors [set hidden? true ask tagline-neighbors [set hidden? true] ] set hidden? true]         [ask out-backbone-neighbors [set hidden? false ask tagline-neighbors [set hidden? false] ] set hidden? false]       set traveling? false set released? false set ycor original-dna-ycor     ]   ]   if strand-type = \"duplicate\" [     set duplicate-display-mrna-counter duplicate-display-mrna-counter + 1     if (duplicate-display-mrna-counter > count these-genes) [set duplicate-display-mrna-counter 1]     ask mRNAs with [strand = strand-type and cap-type = \"start\"] [       ifelse gene-number != duplicate-display-mrna-counter         [ask out-backbone-neighbors [set hidden? true ask tagline-neighbors [set hidden? true] ] set hidden? true]         [ask out-backbone-neighbors [set hidden? false ask tagline-neighbors [set hidden? false]] set hidden? false]       set traveling? false set released? false set ycor duplicate-dna-ycor     ]   ] end   to show-next-trna  [strand-type]   let this-gene-number gene-number-for-this-strand strand-type   ask mRNAs with [strand = strand-type and cap-type = \"start\" and released? and gene-number = this-gene-number ] [     ask tRNAs with [strand = strand-type] [       ifelse gene-number = this-gene-number         [ask out-backbone-neighbors [set hidden? false ask tagline-neighbors [set hidden? false] ] set hidden? false]         [ask out-backbone-neighbors [set hidden? true ask tagline-neighbors [set hidden? true] ] set hidden? true]       ]   ] end   to display-user-message-no-genes   user-message \"There are no genes in this strand of DNA. A specific sequence of 3 nucleotides is required for a gene\" end   to release-next-protein  [strand-type]   let make-protein? false   let this-gene-number gene-number-for-this-strand strand-type   ask mRNAs with [strand = strand-type and cap-type = \"start\" and released?  and gene-number = this-gene-number ] [      ask tRNAs with [strand = strand-type] [       ifelse gene-number = this-gene-number         [ask out-backbone-neighbors [          set make-protein? true          set hidden? true            ifelse breed = amino-acids              [set hidden? false ask tagline-neighbors [set hidden? false] ]              [set hidden? true ask tagline-neighbors [set hidden? true] ]            ]          ]          [ask out-backbone-neighbors [set hidden? true ask tagline-neighbors [set hidden? true] ] set hidden? true]          set hidden? true     ]     if make-protein? [make-protein strand-type ]   ] end   to make-protein [strand-type]   let this-gene-number gene-number-for-this-strand strand-type   let this-protein-value \"\"   let these-amino-acids amino-acids with [breed = amino-acids and strand-type = strand and gene-number = this-gene-number]   let ordered-amino-acids sort-on [who] these-amino-acids   foreach ordered-amino-acids [ the-amino-acid ->     set this-protein-value (word   this-protein-value \"-\" ([value] of the-amino-acid))   ]   if not any? proteins with [strand = strand-type and value = this-protein-value] [       hatch 1 [set breed proteins set value this-protein-value set hidden? true setxy 0 0]   ] end   to release-next-mRNA-from-nucleus [strand-type]   ask mRNAs with [strand = strand-type][set traveling? true set released? false] end    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; runtime procedures ;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to go   visualize-all-genes   ;; these boolean variables keep track of button press events being cued by the user   if event-1-triggered? [     show-next-mrna \"original\"     set event-1-triggered? false     set event-1-completed? true     set event-2-completed? false     set event-3-completed? false     set event-4-completed? false   ]   if event-2-triggered? and event-1-completed? [     release-next-mRNA-from-nucleus \"original\"     set event-2-triggered? false     set event-3-completed? false     set event-4-completed? false   ]   if event-3-triggered? and event-2-completed? [     show-next-trna \"original\"     set event-3-triggered? false     set event-3-completed? true     set event-4-completed? false   ]   if event-4-triggered? and event-3-completed? [     release-next-protein \"original\"     set event-4-triggered? false     set event-4-completed? true   ]   if event-6-triggered? [     show-next-mrna \"duplicate\"     set event-6-triggered? false     set event-6-completed? true     set event-7-completed? false     set event-8-completed? false     set event-9-completed? false   ]   if event-7-triggered? and event-6-completed? [     release-next-mRNA-from-nucleus \"duplicate\"     set event-7-triggered? false     set event-8-completed? false     set event-9-completed? false   ]   if event-8-triggered? and event-7-completed? [     show-next-trna \"duplicate\"     set event-8-triggered? false     set event-8-completed? true     set event-9-completed? false   ]   if event-9-triggered? and event-8-completed? [     release-next-protein \"duplicate\"     set event-9-triggered? false     set event-9-completed? true   ]   move-mRNA-molecules-out-of-nucleus   tick end   to move-mRNA-molecules-out-of-nucleus   ask mRNAs with [traveling? and cap-type = \"start\"] [     if strand = \"original\" [       if ycor < original-ribosome-ycor [ set ycor ycor + .1 ]       if ycor >= original-ribosome-ycor [ set traveling? false set released? true set event-2-completed? true]     ]     if strand = \"duplicate\" [       if ycor > duplicate-ribosome-ycor [ set ycor ycor - .1]       if ycor <= duplicate-ribosome-ycor [ set traveling? false set released? true set event-7-completed? true]     ]   ] end   to show-protein-production   clear-output   let original-proteins proteins with [strand = \"original\"]   output-print \"Proteins Produced\"   output-print (word \"from original DNA  = \" count original-proteins)   output-print \"::::::::::::::::::\"   ask original-proteins [     output-print (word \"Orig.Gene #\" gene-number \" > Protein:\")     output-print value     output-print \"\"   ]   output-print \"==================\"   let duplicate-proteins  proteins with [strand = \"duplicate\"]   output-print \"Proteins Produced\"   output-print (word \"from copy of DNA = \" count duplicate-proteins)   output-print \"::::::::::::::::::\"   ask duplicate-proteins [     output-print (word \"Copy.Gene #\" gene-number \" > Protein:\")     output-print value     output-print \"\"   ] end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;; make duplicate dna procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to make-duplicate-dna-string   let position-counter 0   set duplicate-strand-gene-counter 0   let clean-duplicate-dna-string original-dna-string   let mutating-copy-of-dna-string original-dna-string      let target-loci random ((length mutating-copy-of-dna-string) - #-nucleotides-affected)     let dna-at-target item target-loci mutating-copy-of-dna-string     let dna-before-target substring mutating-copy-of-dna-string 0 target-loci     let loci-counter 0     let dna-at-and-after-target substring mutating-copy-of-dna-string target-loci length mutating-copy-of-dna-string      if mutation-type = \"deletion\" [       repeat #-nucleotides-affected [         set  mutating-copy-of-dna-string remove-item target-loci mutating-copy-of-dna-string       ]     ]     if mutation-type  = \"substitution\" [       repeat #-nucleotides-affected [         set mutating-copy-of-dna-string (replace-item (target-loci + loci-counter) mutating-copy-of-dna-string random-base-letter-DNA)         set loci-counter loci-counter + 1       ]     ]     if mutation-type  = \"insertion\" [       repeat #-nucleotides-affected [         set  dna-at-and-after-target (word random-base-letter-DNA  dna-at-and-after-target)       ]       set mutating-copy-of-dna-string (word dna-before-target dna-at-and-after-target)     ]   set duplicate-dna-string mutating-copy-of-dna-string end   to replicate-dna   let turtles-to-remove (turtle-set nucleotides mRNAs tRNAs genes promoters terminators amino-acids mrna-nucleotides)   ;; (re)build the everything for the duplicate dna   ask turtles-to-remove with [strand = \"duplicate\" ][ask tagline-neighbors [die] die]            ;; wipe out old nucleotides   make-duplicate-dna-string   build-genes-from-dna \"duplicate\" duplicate-dna-string   make-a-nucleotide-chain-for-dna-string \"duplicate\" duplicate-dna-string   place-dna \"duplicate\"   build-mrna-for-each-gene \"duplicate\"   build-protein-from-mrna \"duplicate\"   place-trnas \"duplicate\"   hide-mrna   \"duplicate\"   hide-trna   \"duplicate\"   hide-genes  \"duplicate\" end    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;; initializing lists and strings ;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to initialize-codon-to-amino-acid-key    set codon-to-amino-acid-key [      ;;all triplets where the 2nd base is U      [\"UUU\" \"Phe\"] [\"UUC\" \"Phe\"] [\"UUA\" \"Leu\"] [\"UUG\" \"Leu\"]      [\"CUU\" \"Leu\"] [\"CUC\" \"Leu\"] [\"CUA\" \"Leu\"] [\"CUG\" \"Leu\"]      [\"AUU\" \"Ile\"] [\"AUC\" \"Ile\"] [\"AUA\" \"Ile\"] [\"AUG\" \"Met\"]      [\"GUU\" \"Val\"] [\"GUC\" \"Val\"] [\"GUA\" \"Val\"] [\"GUG\" \"Val\"]      ;;all triplets where the 2nd base is C      [\"UCU\" \"Ser\"] [\"UCC\" \"Ser\"] [\"UCA\" \"Ser\"] [\"UCG\" \"Ser\"]      [\"CCU\" \"Pro\"] [\"CCC\" \"Pro\"] [\"CCA\" \"Pro\"] [\"CCG\" \"Pro\"]      [\"ACU\" \"Thr\"] [\"ACC\" \"Thr\"] [\"ACA\" \"Thr\"] [\"ACG\" \"Thr\"]      [\"GCU\" \"Ala\"] [\"GCC\" \"Ala\"] [\"GCA\" \"Ala\"] [\"GCG\" \"Ala\"]      ;;all triplets where the 3rd base is A      [\"UAU\" \"Tyr\"] [\"UAC\" \"Tyr\"] [\"UAA\" \"Stop\"] [\"UAG\" \"Stop\"]      [\"CAU\" \"His\"] [\"CAC\" \"His\"] [\"CAA\" \"Gln\"] [\"CAG\" \"Gln\"]      [\"AAU\" \"Asn\"] [\"AAC\" \"Asn\"] [\"AAA\" \"Lys\"] [\"AAG\" \"Lys\"]      [\"GAU\" \"Asp\"] [\"GAC\" \"Asp\"] [\"GAA\" \"Glu\"] [\"GAG\" \"Glu\"]      ;;all triplets where the 4th base is G      [\"UGU\" \"Cys\"] [\"UGC\" \"Cys\"] [\"UGA\" \"Stop\"] [\"UGG\" \"Trp\"]      [\"CGU\" \"Arg\"] [\"CGC\" \"Arg\"] [\"CGA\" \"Arg\"] [\"CGG\" \"Arg\"]      [\"AGU\" \"Ser\"] [\"AGC\" \"Ser\"] [\"AGA\" \"Arg\"] [\"AGG\" \"Arg\"]      [\"GGU\" \"Gly\"] [\"GGC\" \"Gly\"] [\"GGA\" \"Gly\"] [\"GGG\" \"Gly\"]      ] end    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;; reporters ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;; returns values such as \"Gly\" for \"GGA\" or \"Tyr\" for \"UAC\" using the codon-to-amino-acid-key to-report which-protein-for-this-codon [this-codon]  report item 1 (item 0 filter [ pair -> first pair = this-codon] codon-to-amino-acid-key ) end  ;;; reports a random base for a nucleotide in DNA to-report random-base-letter-DNA   let r random 4   let letter-to-report \"\"   if r = 0 [set letter-to-report \"A\"]   if r = 1 [set letter-to-report \"G\"]   if r = 2 [set letter-to-report \"T\"]   if r = 3 [set letter-to-report \"C\"]   report letter-to-report end  ;;; reports a complementary base for a base pairing given the nucleotide from DNA or mRNA to-report complementary-mRNA-base [base]   let base-to-report \"\"   if base = \"A\" [set base-to-report \"U\"]   if base = \"T\" [set base-to-report \"A\"]   if base = \"U\" [set base-to-report \"A\"]   if base = \"G\" [set base-to-report \"C\"]   if base = \"C\" [set base-to-report \"G\"]   report base-to-report end   ;; cycles through next color in base-color list to assign to the next gene to-report next-gene-color   ifelse gene-color-counter >= (length base-colors) - 1    [set gene-color-counter 0]    [set gene-color-counter gene-color-counter + 1 ]   report (item gene-color-counter base-colors) end   to-report gene-number-for-this-strand [strand-type]   let this-gene-number 0   if strand-type = \"original\"  [set this-gene-number original-display-mrna-counter]   if strand-type = \"duplicate\" [set this-gene-number duplicate-display-mrna-counter]   report this-gene-number end   ;; reports the mrna code that gets transcribed from the dna to-report mrna-string-from-dna-string [dna-string]   let new-string dna-string   let next-item 0   repeat length dna-string [     set new-string (replace-item next-item new-string (complementary-mRNA-base (item next-item new-string))  )     set next-item next-item + 1   ]   report new-string end  ;; reports a string of dna where any A, G, C, T letter is replaced with a random one of these, and any length beyond ;; characters is deprecated to-report dna-string-with-non-nucleotide-characters-replaced [dna-string]   let new-string dna-string   let next-item 0   repeat length dna-string [     set new-string (replace-item next-item new-string (replace-non-nucleotide-character (item next-item new-string))  )     set next-item next-item + 1   ]   if length dna-string > 64 [set new-string substring new-string 0 64]   report new-string end  ;; replaces any A, G, C, T letter is replaced with a random one of these to-report replace-non-nucleotide-character [nucleotide-character]    let character-to-return nucleotide-character    if nucleotide-character != \"A\" and nucleotide-character != \"T\" and nucleotide-character != \"C\" and nucleotide-character != \"G\"      [set character-to-return random-base-letter-DNA]    report character-to-return end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;; instructions for players ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   to-report current-instruction-label   report ifelse-value current-instruction = 0     [ \"press setup\" ]     [ (word current-instruction \" of \" length instructions) ] end   to next-instruction   show-instruction current-instruction + 1 end   to previous-instruction   show-instruction current-instruction - 1 end   to show-instruction [ i ]   if i >= 1 and i <= length instructions [     set current-instruction i     clear-output     foreach item (current-instruction - 1) instructions output-print   ] end   to-report instructions   report [     [      \"You will be simulating the process\"      \"of protein synthesis from DNA that\"      \"occurs in every cell.  And you will\"      \"explore the effects of mutations\"      \"on the proteins that are produced.\"     ]     [      \"When you press SETUP, a single\"      \"strand of an unwound DNA molecule\"      \"appears. This represents the state\"       \"of DNA in the cell nucleus during\"      \"transcription.\"     ]     [      \"To produce proteins, each gene in\"      \"the original DNA strand must be\"      \"transcribed  into an mRNA molecule.\"      \"Do this by pressing GO/STOP and\"      \"then the 1-TRANSCRIBE button.\"     ]     [      \"For each mRNA molecule that was\"      \"transcribed, press the 2-RELEASE\"      \"button.  This releases the mRNA\"      \"from the nucleus  into the ribosome\"      \"of the cell.\"     ]     [      \"For each mRNA molecule in the\"      \"ribosome, press the 3-TRANSLATE\"      \"button.  This pairs up molecules\"      \"of tRNA with each set of three\"      \"nucleotides in the mRNA molecule.\"     ]     [       \"For each tRNA chain built, press\"       \"the 4-RELEASE button.  This\"       \"releases the amino acid chain\"       \"from the rest of the tRNA chain,\"       \"leaving behind the protein\"       \"molecule that is produced.\"     ]     [       \"Each time the 1-TRANSCRIBE\"       \"button is pressed, the next gene\"       \"in the original strand of DNA \"       \"will be transcribed.  Press the 1-,\"       \"2-, 3-, 4- buttons and repeat to\"       \"translate each subsequent gene.\"     ]     [       \"When you press the 5-REPLICATE\"       \"THE ORIGINAL DNA button a copy\"       \"of the original DNA will be \"       \"generated for a new cell\"       \"(as in mitosis or meiosis) and\"       \"it will appear in the green.\"     ]     [       \"The replicated DNA will have a\"       \"# of random mutations, set by\"       \"#-NUCLEOTIDES-AFFECTED, each\"       \"mutation of the type set by\"       \"MUTATION-TYPE. Press button 5)\"       \"again to explore possible outcomes.\"     ]     [       \"Now repeat the same transcription,\"       \"release, translation, and release\"       \"process for the DNA in this new\"       \"cell by pressing 6-, 7-, 8-, 9-.\"       \"Repeat that sequence again to\"       \"cycle through to the next gene.\"     ]     [       \"If you want to test the outcomes\"       \"for your own DNA code, type any\"       \"sequence of A, G, T, C in the\"       \"USER-CREATED-CODE box and set\"       \"the INITIAL-DNA-STRING to\"       \"“from-user-code”.  Then press\"       \"SETUP and start over again.\"     ]   ] end    to reset-completed-events    if event-1-triggered? or  event-2-triggered? or event-3-triggered? or event-4-triggered? [     set event-4-completed? false     if event-1-triggered? or  event-2-triggered? or event-3-triggered? [       set event-3-completed? false       if event-1-triggered? or  event-2-triggered?  [         set event-2-completed? false         if event-1-triggered?  [ set event-1-completed? false ]       ]     ]   ]   if event-6-triggered? or event-7-triggered? or event-8-triggered? or event-9-triggered? [     set event-9-completed? false     if event-6-triggered? or  event-7-triggered? or event-8-triggered? [       set event-8-completed? false       if event-6-triggered? or  event-7-triggered?  [         set event-7-completed? false         if event-6-triggered?  [ set event-6-completed? false ]       ]     ]    ]   end   ; Copyright 2012 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":465,"y":10,"width":748,"height":388,"dimensions":{"minPxcor":0,"maxPxcor":30,"minPycor":-8,"maxPycor":7,"patchSize":24,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":9,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":5,"y":10,"width":70,"height":40,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":75,"y":10,"width":90,"height":40,"oldSize":true,"display":"go / stop","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"variable":"initial-dna-string","x":5,"y":285,"width":250,"height":45,"oldSize":true,"display":"initial-dna-string","choices":["from user-created-code","no genes (short strand)","no genes (long strand)","1 short gene","1 long gene","2 sequential genes","2 nested genes","3 sequential genes","random (short strand)","random (long strand)"],"currentChoice":4,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"user-created-code","x":5,"y":330,"width":250,"height":60,"oldSize":true,"boxedValue":{"value":"AAAAA","type":"String","multiline":false},"type":"inputBox","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"replicate-dna\"); if (R === StopInterrupt) { return R; } var R = ProcedurePrims.callCommand(\"visualize-all-genes\"); if (R === StopInterrupt) { return R; }","type":"button","source":"replicate-dna visualize-all-genes","x":265,"y":210,"width":190,"height":36,"oldSize":true,"display":"5. replicate the original DNA","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 6; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"#-nucleotides-affected","x":5,"y":205,"width":250,"height":33,"oldSize":true,"display":"#-nucleotides-affected","min":"1","max":"6","default":1,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"variable":"mutation-type","x":5,"y":240,"width":120,"height":45,"oldSize":true,"display":"mutation-type","choices":["deletion","insertion","substitution"],"currentChoice":2,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"compiledSource":"if (world.observer.getGlobal(\"event-2-completed?\")) {   world.observer.setGlobal(\"event-3-triggered?\", true);   var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === DeathInterrupt) { return R; } }","type":"button","source":"if event-2-completed? [   set event-3-triggered? true   reset-completed-events ]","x":280,"y":145,"width":90,"height":34,"oldSize":true,"display":"3. translate","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"world.observer.setGlobal(\"event-1-triggered?\", true); var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === StopInterrupt) { return R; }","type":"button","source":"set event-1-triggered? true reset-completed-events","x":280,"y":92,"width":90,"height":35,"oldSize":true,"display":"1. transcribe","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"if (world.observer.getGlobal(\"event-3-completed?\")) {   world.observer.setGlobal(\"event-4-triggered?\", true);   var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === DeathInterrupt) { return R; } }","type":"button","source":"if event-3-completed? [   set event-4-triggered? true   reset-completed-events ]","x":370,"y":145,"width":76,"height":34,"oldSize":true,"display":"4. release","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"original-strand-gene-counter\"); })","type":"monitor","source":"original-strand-gene-counter","x":295,"y":30,"width":57,"height":41,"oldSize":true,"display":"genes","precision":17,"fontSize":10,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() {   return PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed(\"PROTEINS\"), function() { return Prims.equality(PrimChecks.turtle.getVariable(70, 76, \"strand\"), \"duplicate\"); }); })","type":"monitor","source":"count proteins with [strand = \"duplicate\"]","x":340,"y":280,"width":100,"height":41,"oldSize":true,"display":"proteins made","precision":17,"fontSize":10,"compilation":{"success":true,"messages":[]}}, {"display":"Replicated DNA in new cell","x":306,"y":263,"width":156,"height":18,"fontSize":11,"markdown":false,"textColorLight":-12087248,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"compiledSource":"if (world.observer.getGlobal(\"event-1-completed?\")) {   world.observer.setGlobal(\"event-2-triggered?\", true);   var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === DeathInterrupt) { return R; } }","type":"button","source":"if event-1-completed? [   set event-2-triggered? true   reset-completed-events ]","x":370,"y":92,"width":75,"height":35,"oldSize":true,"display":"2. release","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"x":5,"y":85,"width":250,"height":120,"fontSize":12,"type":"output","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"duplicate-strand-gene-counter\"); })","type":"monitor","source":"duplicate-strand-gene-counter","x":291,"y":280,"width":50,"height":41,"oldSize":true,"display":"genes","precision":17,"fontSize":10,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"world.observer.setGlobal(\"event-6-triggered?\", true); var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === StopInterrupt) { return R; }","type":"button","source":"set event-6-triggered? true reset-completed-events","x":280,"y":340,"width":90,"height":33,"oldSize":true,"display":"6. transcribe","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"if (world.observer.getGlobal(\"event-6-completed?\")) {   world.observer.setGlobal(\"event-7-triggered?\", true);   var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === DeathInterrupt) { return R; } }","type":"button","source":"if event-6-completed? [   set event-7-triggered? true   reset-completed-events ]","x":370,"y":340,"width":75,"height":33,"oldSize":true,"display":"7. release","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"if (world.observer.getGlobal(\"event-7-completed?\")) {   world.observer.setGlobal(\"event-8-triggered?\", true);   var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === DeathInterrupt) { return R; } }","type":"button","source":"if event-7-completed? [   set event-8-triggered? true   reset-completed-events ]","x":280,"y":395,"width":85,"height":33,"oldSize":true,"display":"8. translate","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"if (world.observer.getGlobal(\"event-8-completed?\")) {   world.observer.setGlobal(\"event-9-triggered?\", true);   var R = ProcedurePrims.callCommand(\"reset-completed-events\"); if (R === DeathInterrupt) { return R; } }","type":"button","source":"if event-8-completed? [   set event-9-triggered? true   reset-completed-events ]","x":365,"y":395,"width":80,"height":33,"oldSize":true,"display":"9. release","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"display":"DNA-->mRNA","x":336,"y":79,"width":90,"height":18,"fontSize":9,"markdown":false,"textColorLight":-14730904,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"mRNA-->protein","x":329,"y":382,"width":90,"height":18,"fontSize":9,"markdown":false,"textColorLight":-12087248,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"mRNA-->protein","x":331,"y":131,"width":93,"height":18,"fontSize":9,"markdown":false,"textColorLight":-14730904,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() {   return PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed(\"PROTEINS\"), function() { return Prims.equality(PrimChecks.turtle.getVariable(70, 76, \"strand\"), \"original\"); }); })","type":"monitor","source":"count proteins with [strand = \"original\"]","x":346,"y":30,"width":95,"height":41,"oldSize":true,"display":"proteins made","precision":17,"fontSize":10,"compilation":{"success":true,"messages":[]}}, {"display":"DNA-->mRNA","x":334,"y":325,"width":87,"height":18,"fontSize":9,"markdown":false,"textColorLight":-12087248,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"Original DNA in old cell","x":312,"y":12,"width":134,"height":28,"fontSize":11,"markdown":false,"textColorLight":-14730904,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"<--","x":272,"y":8,"width":50,"height":34,"fontSize":16,"markdown":false,"textColorLight":-5298144,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"variable":"show-genes?","x":130,"y":245,"width":130,"height":33,"oldSize":true,"display":"show-genes?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"show-protein-production\"); if (R === StopInterrupt) { return R; }","type":"button","source":"show-protein-production","x":5,"y":395,"width":250,"height":33,"oldSize":true,"display":"10.  show protein production summary","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"display":"V","x":262,"y":195,"width":20,"height":21,"fontSize":16,"markdown":false,"textColorLight":-5298144,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"| | | | | | | | | | |","x":270,"y":18,"width":15,"height":186,"fontSize":14,"markdown":false,"textColorLight":-5298144,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"-->","x":274,"y":261,"width":43,"height":20,"fontSize":16,"markdown":false,"textColorLight":-5298144,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"| ","x":270,"y":243,"width":15,"height":31,"fontSize":14,"markdown":false,"textColorLight":-5298144,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"display":"V","x":267,"y":256,"width":15,"height":20,"fontSize":16,"markdown":false,"textColorLight":-5298144,"backgroundLight":0,"backgroundDark":0,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"next-instruction\"); if (R === StopInterrupt) { return R; }","type":"button","source":"next-instruction","x":145,"y":50,"width":110,"height":33,"oldSize":true,"display":"next instruction","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"previous-instruction\"); if (R === StopInterrupt) { return R; }","type":"button","source":"previous-instruction","x":5,"y":50,"width":140,"height":33,"oldSize":true,"display":"previous instruction","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return PrimChecks.procedure.callReporter(49, 74, \"current-instruction-label\"); })","type":"monitor","source":"current-instruction-label","x":165,"y":10,"width":90,"height":41,"oldSize":true,"display":"instruction #","precision":17,"fontSize":10,"compilation":{"success":true,"messages":[]}}])(resources)(tortoise_require("extensions/all").porters())(["initial-dna-string", "user-created-code", "#-nucleotides-affected", "mutation-type", "show-genes?", "current-instruction", "codon-to-amino-acid-key", "original-dna-string", "duplicate-dna-string", "duplicate-ribosome-ycor", "original-ribosome-ycor", "duplicate-dna-ycor", "original-dna-ycor", "nucleotide-spacing", "nucleo-tag-color", "terminator-color", "gene-color-counter", "original-strand-gene-counter", "duplicate-strand-gene-counter", "original-display-mrna-counter", "duplicate-display-mrna-counter", "mrnas-traveling", "mrnas-released", "replicate-dna-event?", "show-genes-event?", "event-1-triggered?", "event-2-triggered?", "event-3-triggered?", "event-4-triggered?", "event-6-triggered?", "event-7-triggered?", "event-8-triggered?", "event-9-triggered?", "event-1-completed?", "event-2-completed?", "event-3-completed?", "event-4-completed?", "event-6-completed?", "event-7-completed?", "event-8-completed?", "event-9-completed?"], ["initial-dna-string", "user-created-code", "#-nucleotides-affected", "mutation-type", "show-genes?"], [], 0, 30, -8, 7, 24, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 4135, 5704, (function() {
  world.clearAll();
  world.observer.setGlobal("replicate-dna-event?", false);
  world.observer.setGlobal("show-genes-event?", false);
  world.observer.setGlobal("event-1-triggered?", false);
  world.observer.setGlobal("event-2-triggered?", false);
  world.observer.setGlobal("event-3-triggered?", false);
  world.observer.setGlobal("event-4-triggered?", false);
  world.observer.setGlobal("event-6-triggered?", false);
  world.observer.setGlobal("event-7-triggered?", false);
  world.observer.setGlobal("event-8-triggered?", false);
  world.observer.setGlobal("event-9-triggered?", false);
  world.observer.setGlobal("event-1-completed?", false);
  world.observer.setGlobal("event-2-completed?", false);
  world.observer.setGlobal("event-3-completed?", false);
  world.observer.setGlobal("event-4-completed?", false);
  world.observer.setGlobal("event-6-completed?", false);
  world.observer.setGlobal("event-7-completed?", false);
  world.observer.setGlobal("event-8-completed?", false);
  world.observer.setGlobal("event-9-completed?", false);
  world.observer.setGlobal("mrnas-traveling", []);
  world.observer.setGlobal("mrnas-released", []);
  world.observer.setGlobal("codon-to-amino-acid-key", []);
  world.observer.setGlobal("original-dna-string", "");
  world.observer.setGlobal("duplicate-dna-string", "");
  world.observer.setGlobal("duplicate-ribosome-ycor", -7);
  world.observer.setGlobal("original-ribosome-ycor", 4);
  world.observer.setGlobal("duplicate-dna-ycor", -2);
  world.observer.setGlobal("original-dna-ycor", 1);
  world.observer.setGlobal("gene-color-counter", 1);
  world.observer.setGlobal("nucleotide-spacing", 0.45);
  world.observer.setGlobal("original-strand-gene-counter", 0);
  world.observer.setGlobal("duplicate-strand-gene-counter", 0);
  world.observer.setGlobal("original-display-mrna-counter", 0);
  world.observer.setGlobal("duplicate-display-mrna-counter", 0);
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("PROMOTERS").getSpecialName(), "start")
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("TERMINATORS").getSpecialName(), "end")
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("TAGS").getSpecialName(), "empty")
  world.observer.setGlobal("terminator-color", [255, 0, 0, 150]);
  world.observer.setGlobal("nucleo-tag-color", [255, 255, 255, 120]);
  var R = ProcedurePrims.callCommand("initialize-codon-to-amino-acid-key"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("setup-starting-dna"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("visualize-all-genes"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.patches(), function() { PrimChecks.patch.setVariable(5484, 5490, "pcolor", PrimChecks.math.minus(5496, 5497, 105, 4)); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5467, 5470, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(5515, 5519, world.patches(), function() { return Prims.gt(PrimChecks.patch.getVariable(5521, 5526, "pycor"), 2); }), function() { PrimChecks.patch.setVariable(5538, 5544, "pcolor", PrimChecks.math.minus(5550, 5551, 105, 3.5)); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5503, 5506, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(5571, 5575, world.patches(), function() { return Prims.lt(PrimChecks.patch.getVariable(5577, 5582, "pycor"), 0); }), function() { PrimChecks.patch.setVariable(5594, 5600, "pcolor", PrimChecks.math.minus(5607, 5608, 55, 4)); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5559, 5562, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(5626, 5630, world.patches(), function() { return Prims.lt(PrimChecks.patch.getVariable(5632, 5637, "pycor"), -3); }), function() { PrimChecks.patch.setVariable(5649, 5655, "pcolor", PrimChecks.math.minus(5662, 5663, 55, 3.5)); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5614, 5617, R); return R; }
  var R = ProcedurePrims.callCommand("show-instruction", 1); if (R === DeathInterrupt) { return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-starting-dna", 5713, 6076, (function() {
  var R = ProcedurePrims.callCommand("setup-dna-string"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("build-genes-from-dna", "original", world.observer.getGlobal("original-dna-string")); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("make-a-nucleotide-chain-for-dna-string", "original", world.observer.getGlobal("original-dna-string")); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("place-dna", "original"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("build-mrna-for-each-gene", "original"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("build-protein-from-mrna", "original"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("place-trnas", "original"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("hide-mrna", "original"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("hide-trna", "original"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("hide-genes", "original"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("setup-dna-string", 6109, 7532, (function() {
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "from user-created-code")) {
    world.observer.setGlobal("original-dna-string", PrimChecks.procedure.callReporter(6202, 6252, "dna-string-with-non-nucleotide-characters-replaced", world.observer.getGlobal("user-created-code")));
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "random (short strand)")) {
    let initialHlengthHdna = 12; ProcedurePrims.stack().currentContext().registerStringRunVar("INITIAL-LENGTH-DNA", initialHlengthHdna);
    for (let _index_6358_6364 = 0, _repeatcount_6358_6364 = StrictMath.floor(initialHlengthHdna); _index_6358_6364 < _repeatcount_6358_6364; _index_6358_6364++) {
      world.observer.setGlobal("original-dna-string", StringPrims.word(world.observer.getGlobal("original-dna-string"), PrimChecks.procedure.callReporter(6435, 6457, "random-base-letter-dna")));
    }
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "random (long strand)")) {
    let initialHlengthHdna = 56; ProcedurePrims.stack().currentContext().registerStringRunVar("INITIAL-LENGTH-DNA", initialHlengthHdna);
    for (let _index_6550_6556 = 0, _repeatcount_6550_6556 = StrictMath.floor(initialHlengthHdna); _index_6550_6556 < _repeatcount_6550_6556; _index_6550_6556++) {
      world.observer.setGlobal("original-dna-string", StringPrims.word(world.observer.getGlobal("original-dna-string"), PrimChecks.procedure.callReporter(6627, 6649, "random-base-letter-dna")));
    }
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "no genes (short strand)")) {
    world.observer.setGlobal("original-dna-string", "ATTATATCGTAG");
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "no genes (long strand)")) {
    world.observer.setGlobal("original-dna-string", "GATATTTGGTAGCCCGAGAAGTGGTTTTTCAGATAACAGAGGTGGAGCAGCTTTTAG");
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "1 short gene")) {
    world.observer.setGlobal("original-dna-string", "ATTATGTGGTAG");
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "1 long gene")) {
    world.observer.setGlobal("original-dna-string", "GGGATGGACACCTTATCATTTGCTACTAGCGACCAGTTTGAGTAGCTTCGTCGGTGA");
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "2 sequential genes")) {
    world.observer.setGlobal("original-dna-string", "AGTATGAAAACCCACGAGTGGTAGCCCGAGATTGAGATGTGGTTTTTCAGATAACAG");
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "2 nested genes")) {
    world.observer.setGlobal("original-dna-string", "GTTATGAGGGGGACCCGAGATGTGGTTTTTGAAATAGACAAGTAGACCCTAATAGAC");
  }
  if (Prims.equality(world.observer.getGlobal("initial-dna-string"), "3 sequential genes")) {
    world.observer.setGlobal("original-dna-string", "GATATGTGGTAGCCCGAGATGTGGTTTTTCAGATAACAGATGTGGAGCAGCTTTTAG");
  }
}))
ProcedurePrims.defineCommand("place-dna", 7541, 7796, (function(strandHtype) {
  let dna = PrimChecks.agentset.turtleSet(7576, 7586, world.turtleManager.turtlesOfBreed("GENES"), world.turtleManager.turtlesOfBreed("NUCLEOTIDES"), world.turtleManager.turtlesOfBreed("PROMOTERS"), world.turtleManager.turtlesOfBreed("TERMINATORS")); ProcedurePrims.stack().currentContext().registerStringRunVar("DNA", dna);
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(7638, 7642, PrimChecks.validator.checkArg('WITH', 7638, 7642, 112, dna), function() { return Prims.equality(PrimChecks.turtle.getVariable(7644, 7650, "strand"), strandHtype); }), function() {
    if (Prims.equality(strandHtype, "original")) {
      PrimChecks.turtle.setVariable(7705, 7709, "ycor", world.observer.getGlobal("original-dna-ycor"));
    }
    if (Prims.equality(strandHtype, "duplicate")) {
      PrimChecks.turtle.setVariable(7767, 7771, "ycor", world.observer.getGlobal("duplicate-dna-ycor"));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(7630, 7633, R); return R; }
}))
ProcedurePrims.defineCommand("place-trnas", 7805, 8022, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(7843, 7847, world.turtleManager.turtlesOfBreed("TRNAS"), function() { return Prims.equality(PrimChecks.turtle.getVariable(7849, 7855, "strand"), strandHtype); }), function() {
    if (Prims.equality(strandHtype, "original")) {
      PrimChecks.turtle.setVariable(7912, 7916, "ycor", PrimChecks.math.plus(7940, 7941, PrimChecks.validator.checkArg('+', 7940, 7941, 1, world.observer.getGlobal("original-ribosome-ycor")), 1));
    }
    if (Prims.equality(strandHtype, "duplicate")) {
      PrimChecks.turtle.setVariable(7984, 7988, "ycor", PrimChecks.math.plus(8013, 8014, PrimChecks.validator.checkArg('+', 8013, 8014, 1, world.observer.getGlobal("duplicate-ribosome-ycor")), 1));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(7833, 7836, R); return R; }
}))
ProcedurePrims.defineCommand("make-a-nucleotide-chain-for-dna-string", 8031, 8694, (function(strandHtype, dnaHstring) {
  let previousHnucleotide = Nobody; ProcedurePrims.stack().currentContext().registerStringRunVar("PREVIOUS-NUCLEOTIDE", previousHnucleotide);
  let placeHcounter = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("PLACE-COUNTER", placeHcounter);
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(1, ""), function() {
    PrimChecks.turtle.setVariable(8179, 8186, "heading", 90);
    SelfManager.self()._optimalFdOne();
    for (let _index_8203_8209 = 0, _repeatcount_8203_8209 = StrictMath.floor(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 8211, 8217, 12, dnaHstring))); _index_8203_8209 < _repeatcount_8203_8209; _index_8203_8209++) {
      var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
        PrimChecks.turtleOrLink.setVariable(8264, 8269, "breed", world.turtleManager.turtlesOfBreed("NUCLEOTIDES"));
        PrimChecks.turtle.setVariable(8296, 8302, "strand", strandHtype);
        PrimChecks.turtle.setVariable(8329, 8334, "value", PrimChecks.list.item(8335, 8339, PrimChecks.validator.checkArg('ITEM', 8335, 8339, 1, placeHcounter), PrimChecks.validator.checkArg('ITEM', 8335, 8339, 12, dnaHstring)));
        PrimChecks.turtleOrLink.setVariable(8379, 8384, "shape", StringPrims.word("nucleotide-", PrimChecks.turtle.getVariable(8405, 8410, "value")));
        PrimChecks.turtle.setVariable(8426, 8433, "heading", 0);
        PrimChecks.turtle.setVariable(8450, 8455, "place", placeHcounter);
        var R = ProcedurePrims.callCommand("attach-tag", 5, 0.5, PrimChecks.turtle.getVariable(8497, 8502, "value"), world.observer.getGlobal("nucleo-tag-color")); if (R === DeathInterrupt) { return R; }
        placeHcounter = PrimChecks.math.plus(8562, 8563, PrimChecks.validator.checkArg('+', 8562, 8563, 1, placeHcounter), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("PLACE-COUNTER", placeHcounter);
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(8240, 8245, R); return R; }
      SelfManager.self().fd(world.observer.getGlobal("nucleotide-spacing"));
    }
    return SelfManager.self().die();
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(8152, 8166, R); return R; }
}))
ProcedurePrims.defineCommand("build-genes-from-dna", 8704, 10555, (function(strandHtype, dnaHstring) {
  let remainingHdna = dnaHstring; ProcedurePrims.stack().currentContext().registerStringRunVar("REMAINING-DNA", remainingHdna);
  let thisHitem = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-ITEM", thisHitem);
  let lastHitem = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("LAST-ITEM", lastHitem);
  let lastHlastHitem = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("LAST-LAST-ITEM", lastHlastHitem);
  let triplet = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("TRIPLET", triplet);
  let itemHposition = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("ITEM-POSITION", itemHposition);
  let lastHitemHkept = PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 8903, 8909, 12, dnaHstring)); ProcedurePrims.stack().currentContext().registerStringRunVar("LAST-ITEM-KEPT", lastHitemHkept);
  for (let _index_8923_8929 = 0, _repeatcount_8923_8929 = StrictMath.floor(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 8931, 8937, 12, dnaHstring))); _index_8923_8929 < _repeatcount_8923_8929; _index_8923_8929++) {
    let firstHitem = PrimChecks.list.item(8971, 8975, 0, PrimChecks.validator.checkArg('ITEM', 8971, 8975, 12, remainingHdna)); ProcedurePrims.stack().currentContext().registerStringRunVar("FIRST-ITEM", firstHitem);
    remainingHdna = PrimChecks.list.removeItem(9014, 9025, 0, PrimChecks.validator.checkArg('REMOVE-ITEM', 9014, 9025, 12, remainingHdna)); ProcedurePrims.stack().currentContext().updateStringRunVar("REMAINING-DNA", remainingHdna);
    lastHlastHitem = lastHitem; ProcedurePrims.stack().currentContext().updateStringRunVar("LAST-LAST-ITEM", lastHlastHitem);
    lastHitem = thisHitem; ProcedurePrims.stack().currentContext().updateStringRunVar("LAST-ITEM", lastHitem);
    thisHitem = firstHitem; ProcedurePrims.stack().currentContext().updateStringRunVar("THIS-ITEM", thisHitem);
    triplet = StringPrims.word(lastHlastHitem, lastHitem, thisHitem); ProcedurePrims.stack().currentContext().updateStringRunVar("TRIPLET", triplet);
    if (Prims.equality(triplet, "ATG")) {
      var R = ProcedurePrims.ask(world.turtleManager.createTurtles(1, "GENES"), function() {
        PrimChecks.turtleOrLink.setVariable(9250, 9257, "hidden?", true);
        PrimChecks.turtle.setVariable(9275, 9281, "strand", strandHtype);
        if (Prims.equality(PrimChecks.turtle.getVariable(9305, 9311, "strand"), "original")) {
          world.observer.setGlobal("original-strand-gene-counter", PrimChecks.math.plus(9400, 9401, PrimChecks.validator.checkArg('+', 9400, 9401, 1, world.observer.getGlobal("original-strand-gene-counter")), 1));
          PrimChecks.turtle.setVariable(9418, 9429, "gene-number", world.observer.getGlobal("original-strand-gene-counter"));
        }
        if (Prims.equality(PrimChecks.turtle.getVariable(9480, 9486, "strand"), "duplicate")) {
          world.observer.setGlobal("duplicate-strand-gene-counter", PrimChecks.math.plus(9577, 9578, PrimChecks.validator.checkArg('+', 9577, 9578, 1, world.observer.getGlobal("duplicate-strand-gene-counter")), 1));
          PrimChecks.turtle.setVariable(9595, 9606, "gene-number", world.observer.getGlobal("duplicate-strand-gene-counter"));
        }
        PrimChecks.turtle.setVariable(9659, 9673, "start-position", itemHposition);
        PrimChecks.turtle.setVariable(9700, 9712, "end-position", PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 9715, 9721, 12, world.observer.getGlobal("original-dna-string"))));
        PrimChecks.turtle.setVariable(9756, 9760, "code", StringPrims.word(triplet, PrimChecks.list.substring(PrimChecks.validator.checkArg('SUBSTRING', 9775, 9784, 4, dnaHstring), PrimChecks.math.plus(9811, 9812, PrimChecks.validator.checkArg('+', 9811, 9812, 1, itemHposition), 1), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 9818, 9824, 12, dnaHstring)))));
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(9221, 9233, R); return R; }
    }
    itemHposition = PrimChecks.math.plus(9895, 9896, PrimChecks.validator.checkArg('+', 9895, 9896, 1, itemHposition), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("ITEM-POSITION", itemHposition);
  }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("GENES"), function() {
    let endHofHgene_Q = false; ProcedurePrims.stack().currentContext().registerStringRunVar("END-OF-GENE?", endHofHgene_Q);
    let tripletHcounter = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("TRIPLET-COUNTER", tripletHcounter);
    let newHcode = PrimChecks.turtle.getVariable(9987, 9991, "code"); ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-CODE", newHcode);
    for (let _index_9996_10002 = 0, _repeatcount_9996_10002 = StrictMath.floor(PrimChecks.math.floor(PrimChecks.math.div(10022, 10023, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 10010, 10016, 12, PrimChecks.turtle.getVariable(10017, 10021, "code"))), 3))); _index_9996_10002 < _repeatcount_9996_10002; _index_9996_10002++) {
      let thisHtriplet = StringPrims.word(PrimChecks.list.item(10061, 10065, PrimChecks.math.plus(10069, 10070, 0, PrimChecks.math.mult(10088, 10089, PrimChecks.validator.checkArg('*', 10088, 10089, 1, tripletHcounter), 3)), PrimChecks.validator.checkArg('ITEM', 10061, 10065, 12, PrimChecks.turtle.getVariable(10094, 10098, "code"))), PrimChecks.list.item(10102, 10106, PrimChecks.math.plus(10110, 10111, 1, PrimChecks.math.mult(10129, 10130, PrimChecks.validator.checkArg('*', 10129, 10130, 1, tripletHcounter), 3)), PrimChecks.validator.checkArg('ITEM', 10102, 10106, 12, PrimChecks.turtle.getVariable(10135, 10139, "code"))), PrimChecks.list.item(10143, 10147, PrimChecks.math.plus(10151, 10152, 2, PrimChecks.math.mult(10170, 10171, PrimChecks.validator.checkArg('*', 10170, 10171, 1, tripletHcounter), 3)), PrimChecks.validator.checkArg('ITEM', 10143, 10147, 12, PrimChecks.turtle.getVariable(10176, 10180, "code")))); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-TRIPLET", thisHtriplet);
      if ((((Prims.equality(thisHtriplet, "TAG") || Prims.equality(thisHtriplet, "TGA")) || Prims.equality(thisHtriplet, "TAA")) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 10270, 10273, 2, endHofHgene_Q)))) {
        PrimChecks.turtle.setVariable(10301, 10313, "end-position", PrimChecks.math.mult(10330, 10331, PrimChecks.validator.checkArg('*', 10330, 10331, 1, tripletHcounter), 3));
        newHcode = PrimChecks.list.substring(PrimChecks.validator.checkArg('SUBSTRING', 10355, 10364, 4, PrimChecks.turtle.getVariable(10365, 10369, "code")), 0, PrimChecks.validator.checkArg('SUBSTRING', 10355, 10364, 1, PrimChecks.turtle.getVariable(10372, 10384, "end-position"))); ProcedurePrims.stack().currentContext().updateStringRunVar("NEW-CODE", newHcode);
        endHofHgene_Q = true; ProcedurePrims.stack().currentContext().updateStringRunVar("END-OF-GENE?", endHofHgene_Q);
      }
      tripletHcounter = PrimChecks.math.plus(10465, 10466, PrimChecks.validator.checkArg('+', 10465, 10466, 1, tripletHcounter), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("TRIPLET-COUNTER", tripletHcounter);
    }
    tripletHcounter = 0; ProcedurePrims.stack().currentContext().updateStringRunVar("TRIPLET-COUNTER", tripletHcounter);
    endHofHgene_Q = false; ProcedurePrims.stack().currentContext().updateStringRunVar("END-OF-GENE?", endHofHgene_Q);
    PrimChecks.turtle.setVariable(10536, 10540, "code", newHcode);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(9905, 9908, R); return R; }
}))
ProcedurePrims.defineCommand("build-mrna-for-each-gene", 10564, 12900, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(10615, 10619, world.turtleManager.turtlesOfBreed("GENES"), function() { return Prims.equality(PrimChecks.turtle.getVariable(10621, 10627, "strand"), strandHtype); }), function() {
    let thisHcode = PrimChecks.turtle.getVariable(10663, 10667, "code"); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-CODE", thisHcode);
    let thisHgene = SelfManager.self(); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-GENE", thisHgene);
    PrimChecks.turtle.setVariable(10700, 10707, "heading", 90);
    SelfManager.self()._optimalFdLessThan1(0.1);
    for (let _index_10725_10731 = 0, _repeatcount_10725_10731 = StrictMath.floor(PrimChecks.turtle.getVariable(10732, 10746, "start-position")); _index_10725_10731 < _repeatcount_10725_10731; _index_10725_10731++) {
      SelfManager.self()._optimalFdLessThan1(0.45);
    }
    let geneHcolor = PrimChecks.procedure.callReporter(10827, 10842, "next-gene-color"); ProcedurePrims.stack().currentContext().registerStringRunVar("GENE-COLOR", geneHcolor);
    let geneHcolorHwithHtransparency = ListPrims.sentence(PrimChecks.color.extractRGB(10891, 10902, PrimChecks.validator.checkArg('EXTRACT-RGB', 10891, 10902, 9, geneHcolor)), 110); ProcedurePrims.stack().currentContext().registerStringRunVar("GENE-COLOR-WITH-TRANSPARENCY", geneHcolorHwithHtransparency);
    let geneHcolorHlabel = ListPrims.sentence(PrimChecks.color.extractRGB(10956, 10967, PrimChecks.validator.checkArg('EXTRACT-RGB', 10956, 10967, 9, geneHcolor)), 250); ProcedurePrims.stack().currentContext().registerStringRunVar("GENE-COLOR-LABEL", geneHcolorHlabel);
    var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
      PrimChecks.turtleOrLink.setVariable(11046, 11051, "breed", world.turtleManager.turtlesOfBreed("PROMOTERS"));
      PrimChecks.turtleOrLink.setVariable(11072, 11077, "color", geneHcolorHwithHtransparency);
      PrimChecks.turtle.setVariable(11117, 11121, "size", 3);
      PrimChecks.turtleOrLink.setVariable(11134, 11141, "hidden?", false);
      var R = ProcedurePrims.callCommand("attach-tag", 142, 1.7, StringPrims.word("start:", PrimChecks.turtle.getVariable(11188, 11199, "gene-number")), geneHcolorHlabel); if (R === DeathInterrupt) { return R; }
      var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHgene, "BACKBONES"), function() {
        PrimChecks.turtleOrLink.setVariable(11260, 11267, "hidden?", true);
        PrimChecks.link.setVariable(11277, 11285, "tie-mode", "fixed");
        SelfManager.self().tie();
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11224, 11244, R); return R; }
      var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
        PrimChecks.turtleOrLink.setVariable(11366, 11371, "breed", world.turtleManager.turtlesOfBreed("TERMINATORS"));
        SelfManager.self().fd(PrimChecks.math.mult(11415, 11416, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 11397, 11403, 12, thisHcode)), 0.45));
        var R = ProcedurePrims.callCommand("attach-tag", 142, 1.7, StringPrims.word("end:", PrimChecks.turtle.getVariable(11463, 11474, "gene-number")), geneHcolorHlabel); if (R === DeathInterrupt) { return R; }
        var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHgene, "BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(11537, 11544, "hidden?", true);
          PrimChecks.link.setVariable(11554, 11562, "tie-mode", "fixed");
          SelfManager.self().tie();
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11501, 11521, R); return R; }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11344, 11349, R); return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11026, 11031, R); return R; }
    var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
      let thisHmrna = SelfManager.self(); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-MRNA", thisHmrna);
      PrimChecks.turtleOrLink.setVariable(11680, 11685, "breed", world.turtleManager.turtlesOfBreed("MRNAS"));
      PrimChecks.turtle.setVariable(11702, 11712, "traveling?", false);
      PrimChecks.turtle.setVariable(11729, 11738, "released?", false);
      PrimChecks.turtle.setVariable(11755, 11759, "code", PrimChecks.procedure.callReporter(11760, 11787, "mrna-string-from-dna-string", PrimChecks.turtle.getVariable(11788, 11792, "code")));
      PrimChecks.turtle.setVariable(11803, 11811, "cap-type", "start");
      PrimChecks.turtleOrLink.setVariable(11830, 11835, "shape", "mrna-start");
      PrimChecks.turtleOrLink.setVariable(11859, 11866, "hidden?", false);
      var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHgene, "BACKBONES"), function() {
        PrimChecks.turtleOrLink.setVariable(11973, 11980, "hidden?", true);
        PrimChecks.link.setVariable(11990, 11998, "tie-mode", "fixed");
        SelfManager.self().tie();
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11937, 11957, R); return R; }
      var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
        PrimChecks.turtle.setVariable(12088, 12096, "cap-type", "stop");
        PrimChecks.turtleOrLink.setVariable(12116, 12121, "shape", "mrna-stop");
        let nucleotideHcounter = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("NUCLEOTIDE-COUNTER", nucleotideHcounter);
        var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHmrna, "BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(12270, 12277, "hidden?", true);
          PrimChecks.link.setVariable(12287, 12295, "tie-mode", "fixed");
          SelfManager.self().tie();
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12233, 12253, R); return R; }
        let codeHtoHtranscribe = PrimChecks.turtle.getVariable(12409, 12413, "code"); ProcedurePrims.stack().currentContext().registerStringRunVar("CODE-TO-TRANSCRIBE", codeHtoHtranscribe);
        for (let _index_12422_12428 = 0, _repeatcount_12422_12428 = StrictMath.floor(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 12429, 12435, 12, PrimChecks.turtle.getVariable(12436, 12440, "code")))); _index_12422_12428 < _repeatcount_12422_12428; _index_12422_12428++) {
          var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
            PrimChecks.turtleOrLink.setVariable(12479, 12484, "breed", world.turtleManager.turtlesOfBreed("MRNA-NUCLEOTIDES"));
            PrimChecks.turtle.setVariable(12518, 12523, "value", PrimChecks.list.first(12524, 12529, PrimChecks.validator.checkArg('FIRST', 12524, 12529, 12, codeHtoHtranscribe)));
            PrimChecks.turtleOrLink.setVariable(12565, 12570, "shape", StringPrims.word("mrna-", PrimChecks.turtle.getVariable(12585, 12590, "value")));
            PrimChecks.turtle.setVariable(12608, 12615, "heading", 180);
            var R = ProcedurePrims.callCommand("attach-tag", 175, 0.9, PrimChecks.turtle.getVariable(12651, 12656, "value"), world.observer.getGlobal("nucleo-tag-color")); if (R === DeathInterrupt) { return R; }
            var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHmrna, "BACKBONES"), function() {
              PrimChecks.turtleOrLink.setVariable(12723, 12730, "hidden?", true);
              PrimChecks.link.setVariable(12740, 12748, "tie-mode", "fixed");
              SelfManager.self().tie();
            }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12686, 12706, R); return R; }
          }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12453, 12458, R); return R; }
          codeHtoHtranscribe = PrimChecks.list.removeItem(12807, 12818, 0, PrimChecks.validator.checkArg('REMOVE-ITEM', 12807, 12818, 12, codeHtoHtranscribe)); ProcedurePrims.stack().currentContext().updateStringRunVar("CODE-TO-TRANSCRIBE", codeHtoHtranscribe);
          SelfManager.self().fd(world.observer.getGlobal("nucleotide-spacing"));
        }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12066, 12071, R); return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(11635, 11640, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(10605, 10608, R); return R; }
}))
ProcedurePrims.defineCommand("build-protein-from-mrna", 12909, 13543, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(12959, 12963, world.turtleManager.turtlesOfBreed("MRNAS"), function() {
    return (Prims.equality(PrimChecks.turtle.getVariable(12965, 12973, "cap-type"), "start") && Prims.equality(PrimChecks.turtle.getVariable(12988, 12994, "strand"), strandHtype));
  }), function() {
    let numberHofHtripletsHinHlist = PrimChecks.math.floor(PrimChecks.math.div(13068, 13069, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 13055, 13061, 12, PrimChecks.turtle.getVariable(13062, 13066, "code"))), 3)); ProcedurePrims.stack().currentContext().registerStringRunVar("NUMBER-OF-TRIPLETS-IN-LIST", numberHofHtripletsHinHlist);
    let thisHtriplet = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-TRIPLET", thisHtriplet);
    let tripletHcounter = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("TRIPLET-COUNTER", tripletHcounter);
    for (let _index_13127_13133 = 0, _repeatcount_13127_13133 = StrictMath.floor(numberHofHtripletsHinHlist); _index_13127_13133 < _repeatcount_13127_13133; _index_13127_13133++) {
      thisHtriplet = StringPrims.word(PrimChecks.procedure.callReporter(13202, 13225, "complementary-mrna-base", PrimChecks.list.item(13228, 13232, PrimChecks.math.plus(13236, 13237, 0, PrimChecks.math.mult(13255, 13256, PrimChecks.validator.checkArg('*', 13255, 13256, 1, tripletHcounter), 3)), PrimChecks.validator.checkArg('ITEM', 13228, 13232, 12, PrimChecks.turtle.getVariable(13261, 13265, "code")))), PrimChecks.procedure.callReporter(13275, 13298, "complementary-mrna-base", PrimChecks.list.item(13301, 13305, PrimChecks.math.plus(13309, 13310, 1, PrimChecks.math.mult(13328, 13329, PrimChecks.validator.checkArg('*', 13328, 13329, 1, tripletHcounter), 3)), PrimChecks.validator.checkArg('ITEM', 13301, 13305, 12, PrimChecks.turtle.getVariable(13334, 13338, "code")))), PrimChecks.procedure.callReporter(13348, 13371, "complementary-mrna-base", PrimChecks.list.item(13374, 13378, PrimChecks.math.plus(13382, 13383, 2, PrimChecks.math.mult(13401, 13402, PrimChecks.validator.checkArg('*', 13401, 13402, 1, tripletHcounter), 3)), PrimChecks.validator.checkArg('ITEM', 13374, 13378, 12, PrimChecks.turtle.getVariable(13407, 13411, "code"))))); ProcedurePrims.stack().currentContext().updateStringRunVar("THIS-TRIPLET", thisHtriplet);
      var R = ProcedurePrims.callCommand("build-trna-for-this-triplet", thisHtriplet, tripletHcounter); if (R === DeathInterrupt) { return R; }
      tripletHcounter = PrimChecks.math.plus(13529, 13530, PrimChecks.validator.checkArg('+', 13529, 13530, 1, tripletHcounter), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("TRIPLET-COUNTER", tripletHcounter);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12949, 12952, R); return R; }
}))
ProcedurePrims.defineCommand("build-trna-for-this-triplet", 13553, 14956, (function(thisHtriplet, tripletHcounter) {
  let thisHtrna = Nobody; ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-TRNA", thisHtrna);
  var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
    PrimChecks.turtleOrLink.setVariable(13655, 13660, "breed", world.turtleManager.turtlesOfBreed("TRNAS"));
    thisHtrna = SelfManager.self(); ProcedurePrims.stack().currentContext().updateStringRunVar("THIS-TRNA", thisHtrna);
    PrimChecks.turtleOrLink.setVariable(13698, 13703, "shape", "tRNA-core");
    PrimChecks.turtle.setVariable(13724, 13728, "size", 1.2);
    PrimChecks.turtle.setVariable(13741, 13748, "heading", 0);
    var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
      PrimChecks.turtleOrLink.setVariable(13775, 13780, "breed", world.turtleManager.turtlesOfBreed("AMINO-ACIDS"));
      PrimChecks.turtle.setVariable(13803, 13808, "value", PrimChecks.procedure.callReporter(13811, 13839, "which-protein-for-this-codon", thisHtriplet));
      PrimChecks.turtleOrLink.setVariable(13864, 13869, "shape", StringPrims.word("amino-", PrimChecks.turtle.getVariable(13885, 13890, "value")));
      PrimChecks.turtle.setVariable(13902, 13909, "heading", 0);
      PrimChecks.turtle.setVariable(13922, 13926, "size", 2);
      SelfManager.self()._optimalFdOne();
      var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHtrna, "BACKBONES"), function() {
        PrimChecks.turtleOrLink.setVariable(13983, 13990, "hidden?", true);
        PrimChecks.link.setVariable(14000, 14008, "tie-mode", "free");
        SelfManager.self().tie();
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13946, 13966, R); return R; }
      var R = ProcedurePrims.callCommand("attach-tag", 20, 0.8, PrimChecks.turtle.getVariable(14044, 14049, "value"), world.observer.getGlobal("nucleo-tag-color")); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13755, 13760, R); return R; }
    var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
      PrimChecks.turtleOrLink.setVariable(14097, 14102, "breed", world.turtleManager.turtlesOfBreed("TRNA-NUCLEOTIDES"));
      PrimChecks.turtleOrLink.setVariable(14130, 14135, "shape", StringPrims.word("trna-", PrimChecks.list.item(14151, 14155, 0, PrimChecks.validator.checkArg('ITEM', 14151, 14155, 12, thisHtriplet))));
      PrimChecks.turtle.setVariable(14183, 14190, "heading", -155);
      SelfManager.self().fd(1.1);
      PrimChecks.turtle.setVariable(14219, 14226, "heading", 0);
      var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHtrna, "BACKBONES"), function() {
        PrimChecks.turtleOrLink.setVariable(14272, 14279, "hidden?", true);
        PrimChecks.link.setVariable(14289, 14297, "tie-mode", "fixed");
        SelfManager.self().tie();
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14235, 14255, R); return R; }
      var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
        PrimChecks.turtleOrLink.setVariable(14339, 14344, "breed", world.turtleManager.turtlesOfBreed("TRNA-NUCLEOTIDES"));
        PrimChecks.turtleOrLink.setVariable(14374, 14379, "shape", StringPrims.word("trna-", PrimChecks.list.item(14395, 14399, 1, PrimChecks.validator.checkArg('ITEM', 14395, 14399, 12, thisHtriplet))));
        PrimChecks.turtle.setVariable(14429, 14436, "heading", 90);
        SelfManager.self()._optimalFdLessThan1(0.45);
        PrimChecks.turtle.setVariable(14467, 14474, "heading", 0);
        var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHtrna, "BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(14522, 14529, "hidden?", true);
          PrimChecks.link.setVariable(14539, 14547, "tie-mode", "fixed");
          SelfManager.self().tie();
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14485, 14505, R); return R; }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14317, 14322, R); return R; }
      var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
        PrimChecks.turtleOrLink.setVariable(14597, 14602, "breed", world.turtleManager.turtlesOfBreed("TRNA-NUCLEOTIDES"));
        PrimChecks.turtleOrLink.setVariable(14632, 14637, "shape", StringPrims.word("trna-", PrimChecks.list.item(14653, 14657, 2, PrimChecks.validator.checkArg('ITEM', 14653, 14657, 12, thisHtriplet))));
        PrimChecks.turtle.setVariable(14687, 14694, "heading", 90);
        SelfManager.self()._optimalFdLessThan1(0.9);
        PrimChecks.turtle.setVariable(14725, 14732, "heading", 0);
        var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(thisHtrna, "BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(14780, 14787, "hidden?", true);
          PrimChecks.link.setVariable(14797, 14805, "tie-mode", "fixed");
          SelfManager.self().tie();
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14743, 14763, R); return R; }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14575, 14580, R); return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14077, 14082, R); return R; }
    SelfManager.self()._optimalFdOne();
    PrimChecks.turtle.setVariable(14850, 14857, "heading", 90);
    SelfManager.self().fd(PrimChecks.math.plus(14887, 14888, PrimChecks.validator.checkArg('+', 14887, 14888, 1, world.observer.getGlobal("nucleotide-spacing")), PrimChecks.math.mult(14914, 14915, PrimChecks.math.mult(14910, 14911, PrimChecks.validator.checkArg('*', 14910, 14911, 1, world.observer.getGlobal("nucleotide-spacing")), 3), PrimChecks.validator.checkArg('*', 14914, 14915, 1, tripletHcounter))));
    PrimChecks.turtle.setVariable(14942, 14949, "heading", 0);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13637, 13642, R); return R; }
}))
ProcedurePrims.defineCommand("attach-tag", 15047, 15338, (function(direction, displacement, labelHvalue, colorHvalue) {
  var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
    PrimChecks.turtle.setVariable(15127, 15134, "heading", direction);
    SelfManager.self().fd(displacement);
    PrimChecks.turtleOrLink.setVariable(15173, 15178, "breed", world.turtleManager.turtlesOfBreed("TAGS"));
    PrimChecks.turtleOrLink.setVariable(15192, 15197, "label", labelHvalue);
    PrimChecks.turtle.setVariable(15218, 15222, "size", 0.1);
    PrimChecks.turtleOrLink.setVariable(15235, 15246, "label-color", colorHvalue);
    var R = ProcedurePrims.ask(LinkPrims.createLinkWith(SelfManager.myself(), "TAGLINES"), function() {
      PrimChecks.link.setVariable(15295, 15303, "tie-mode", "fixed");
      PrimChecks.turtleOrLink.setVariable(15316, 15323, "hidden?", true);
      SelfManager.self().tie();
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15263, 15282, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15109, 15114, R); return R; }
}))
ProcedurePrims.defineCommand("visualize-all-genes", 15571, 15714, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.turtleSet(15599, 15609, world.turtleManager.turtlesOfBreed("PROMOTERS"), world.turtleManager.turtlesOfBreed("TERMINATORS")), function() {
    var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() {
      PrimChecks.turtleOrLink.setVariable(15660, 15667, "hidden?", PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 15668, 15671, 2, world.observer.getGlobal("show-genes?"))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15633, 15636, R); return R; }
    PrimChecks.turtleOrLink.setVariable(15689, 15696, "hidden?", PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 15697, 15700, 2, world.observer.getGlobal("show-genes?"))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15594, 15597, R); return R; }
}))
ProcedurePrims.defineCommand("hide-genes", 15723, 15880, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(15792, 15796, PrimChecks.agentset.turtleSet(15757, 15767, world.turtleManager.turtlesOfBreed("PROMOTERS"), world.turtleManager.turtlesOfBreed("TERMINATORS")), function() { return Prims.equality(PrimChecks.turtle.getVariable(15798, 15804, "strand"), strandHtype); }), function() {
    var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(15848, 15855, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15821, 15824, R); return R; }
    PrimChecks.turtleOrLink.setVariable(15866, 15873, "hidden?", true);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15752, 15755, R); return R; }
}))
ProcedurePrims.defineCommand("hide-mrna", 15889, 16045, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(15957, 15961, PrimChecks.agentset.turtleSet(15922, 15932, world.turtleManager.turtlesOfBreed("MRNAS"), world.turtleManager.turtlesOfBreed("MRNA-NUCLEOTIDES")), function() { return Prims.equality(PrimChecks.turtle.getVariable(15963, 15969, "strand"), strandHtype); }), function() {
    var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(16013, 16020, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15986, 15989, R); return R; }
    PrimChecks.turtleOrLink.setVariable(16031, 16038, "hidden?", true);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15917, 15920, R); return R; }
}))
ProcedurePrims.defineCommand("hide-trna", 16054, 16222, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(16134, 16138, PrimChecks.agentset.turtleSet(16087, 16097, world.turtleManager.turtlesOfBreed("TRNAS"), world.turtleManager.turtlesOfBreed("TRNA-NUCLEOTIDES"), world.turtleManager.turtlesOfBreed("AMINO-ACIDS")), function() { return Prims.equality(PrimChecks.turtle.getVariable(16140, 16146, "strand"), strandHtype); }), function() {
    var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(16190, 16197, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16163, 16166, R); return R; }
    PrimChecks.turtleOrLink.setVariable(16208, 16215, "hidden?", true);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16082, 16085, R); return R; }
}))
ProcedurePrims.defineCommand("show-next-mrna", 16231, 17664, (function(strandHtype) {
  let theseHgenes = PrimChecks.agentset.with(16285, 16289, world.turtleManager.turtlesOfBreed("GENES"), function() { return Prims.equality(PrimChecks.turtle.getVariable(16291, 16297, "strand"), strandHtype); }); ProcedurePrims.stack().currentContext().registerStringRunVar("THESE-GENES", theseHgenes);
  if (PrimChecks.agentset.optimizeCount(null, null, theseHgenes, 0, (a, b) => a === b)) {
    var R = ProcedurePrims.callCommand("display-user-message-no-genes"); if (R === DeathInterrupt) { return R; }
  }
  if (Prims.equality(strandHtype, "original")) {
    world.observer.setGlobal("original-display-mrna-counter", PrimChecks.math.plus(16472, 16473, PrimChecks.validator.checkArg('+', 16472, 16473, 1, world.observer.getGlobal("original-display-mrna-counter")), 1));
    if (Prims.gt(world.observer.getGlobal("original-display-mrna-counter"), PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 16516, 16521, 112, theseHgenes)))) {
      world.observer.setGlobal("original-display-mrna-counter", 1);
    }
    var R = ProcedurePrims.ask(PrimChecks.agentset.with(16587, 16591, world.turtleManager.turtlesOfBreed("MRNAS"), function() {
      return (Prims.equality(PrimChecks.turtle.getVariable(16593, 16599, "strand"), strandHtype) && Prims.equality(PrimChecks.turtle.getVariable(16618, 16626, "cap-type"), "start"));
    }), function() {
      if (!Prims.equality(PrimChecks.turtle.getVariable(16653, 16664, "gene-number"), world.observer.getGlobal("original-display-mrna-counter"))) {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(16739, 16746, "hidden?", true);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(16779, 16786, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16752, 16755, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16707, 16710, R); return R; }
        PrimChecks.turtleOrLink.setVariable(16799, 16806, "hidden?", true);
      }
      else {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(16854, 16861, "hidden?", false);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(16895, 16902, "hidden?", false); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16868, 16871, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16822, 16825, R); return R; }
        PrimChecks.turtleOrLink.setVariable(16916, 16923, "hidden?", false);
      }
      PrimChecks.turtle.setVariable(16941, 16951, "traveling?", false);
      PrimChecks.turtle.setVariable(16962, 16971, "released?", false);
      PrimChecks.turtle.setVariable(16982, 16986, "ycor", world.observer.getGlobal("original-dna-ycor"));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16577, 16580, R); return R; }
  }
  if (Prims.equality(strandHtype, "duplicate")) {
    world.observer.setGlobal("duplicate-display-mrna-counter", PrimChecks.math.plus(17118, 17119, PrimChecks.validator.checkArg('+', 17118, 17119, 1, world.observer.getGlobal("duplicate-display-mrna-counter")), 1));
    if (Prims.gt(world.observer.getGlobal("duplicate-display-mrna-counter"), PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 17163, 17168, 112, theseHgenes)))) {
      world.observer.setGlobal("duplicate-display-mrna-counter", 1);
    }
    var R = ProcedurePrims.ask(PrimChecks.agentset.with(17235, 17239, world.turtleManager.turtlesOfBreed("MRNAS"), function() {
      return (Prims.equality(PrimChecks.turtle.getVariable(17241, 17247, "strand"), strandHtype) && Prims.equality(PrimChecks.turtle.getVariable(17266, 17274, "cap-type"), "start"));
    }), function() {
      if (!Prims.equality(PrimChecks.turtle.getVariable(17301, 17312, "gene-number"), world.observer.getGlobal("duplicate-display-mrna-counter"))) {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(17388, 17395, "hidden?", true);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(17428, 17435, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17401, 17404, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17356, 17359, R); return R; }
        PrimChecks.turtleOrLink.setVariable(17448, 17455, "hidden?", true);
      }
      else {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(17503, 17510, "hidden?", false);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(17544, 17551, "hidden?", false); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17517, 17520, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17471, 17474, R); return R; }
        PrimChecks.turtleOrLink.setVariable(17564, 17571, "hidden?", false);
      }
      PrimChecks.turtle.setVariable(17589, 17599, "traveling?", false);
      PrimChecks.turtle.setVariable(17610, 17619, "released?", false);
      PrimChecks.turtle.setVariable(17630, 17634, "ycor", world.observer.getGlobal("duplicate-dna-ycor"));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17225, 17228, R); return R; }
  }
}))
ProcedurePrims.defineCommand("show-next-trna", 17673, 18214, (function(strandHtype) {
  let thisHgeneHnumber = PrimChecks.procedure.callReporter(17726, 17753, "gene-number-for-this-strand", strandHtype); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-GENE-NUMBER", thisHgeneHnumber);
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(17778, 17782, world.turtleManager.turtlesOfBreed("MRNAS"), function() {
    return (((Prims.equality(PrimChecks.turtle.getVariable(17784, 17790, "strand"), strandHtype) && Prims.equality(PrimChecks.turtle.getVariable(17809, 17817, "cap-type"), "start")) && PrimChecks.validator.checkArg('AND', 17828, 17831, 2, PrimChecks.turtle.getVariable(17832, 17841, "released?"))) && Prims.equality(PrimChecks.turtle.getVariable(17846, 17857, "gene-number"), thisHgeneHnumber));
  }), function() {
    var R = ProcedurePrims.ask(PrimChecks.agentset.with(17895, 17899, world.turtleManager.turtlesOfBreed("TRNAS"), function() { return Prims.equality(PrimChecks.turtle.getVariable(17901, 17907, "strand"), strandHtype); }), function() {
      if (Prims.equality(PrimChecks.turtle.getVariable(17938, 17949, "gene-number"), thisHgeneHnumber)) {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(18010, 18017, "hidden?", false);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(18051, 18058, "hidden?", false); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18024, 18027, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17978, 17981, R); return R; }
        PrimChecks.turtleOrLink.setVariable(18072, 18079, "hidden?", false);
      }
      else {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(18128, 18135, "hidden?", true);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(18168, 18175, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18141, 18144, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18096, 18099, R); return R; }
        PrimChecks.turtleOrLink.setVariable(18188, 18195, "hidden?", true);
      }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17885, 17888, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17768, 17771, R); return R; }
}))
ProcedurePrims.defineCommand("display-user-message-no-genes", 18223, 18372, (function() {
  UserDialogPrims.confirm("There are no genes in this strand of DNA. A specific sequence of 3 nucleotides is required for a gene");
}))
ProcedurePrims.defineCommand("release-next-protein", 18381, 19220, (function(strandHtype) {
  let makeHprotein_Q = false; ProcedurePrims.stack().currentContext().registerStringRunVar("MAKE-PROTEIN?", makeHprotein_Q);
  let thisHgeneHnumber = PrimChecks.procedure.callReporter(18466, 18493, "gene-number-for-this-strand", strandHtype); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-GENE-NUMBER", thisHgeneHnumber);
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(18518, 18522, world.turtleManager.turtlesOfBreed("MRNAS"), function() {
    return (((Prims.equality(PrimChecks.turtle.getVariable(18524, 18530, "strand"), strandHtype) && Prims.equality(PrimChecks.turtle.getVariable(18549, 18557, "cap-type"), "start")) && PrimChecks.validator.checkArg('AND', 18568, 18571, 2, PrimChecks.turtle.getVariable(18572, 18581, "released?"))) && Prims.equality(PrimChecks.turtle.getVariable(18587, 18598, "gene-number"), thisHgeneHnumber));
  }), function() {
    var R = ProcedurePrims.ask(PrimChecks.agentset.with(18637, 18641, world.turtleManager.turtlesOfBreed("TRNAS"), function() { return Prims.equality(PrimChecks.turtle.getVariable(18643, 18649, "strand"), strandHtype); }), function() {
      if (Prims.equality(PrimChecks.turtle.getVariable(18680, 18691, "gene-number"), thisHgeneHnumber)) {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          makeHprotein_Q = true; ProcedurePrims.stack().currentContext().updateStringRunVar("MAKE-PROTEIN?", makeHprotein_Q);
          PrimChecks.turtleOrLink.setVariable(18794, 18801, "hidden?", true);
          if (Prims.equality(PrimChecks.turtleOrLink.getVariable(18825, 18830, "breed"), world.turtleManager.turtlesOfBreed("AMINO-ACIDS"))) {
            PrimChecks.turtleOrLink.setVariable(18863, 18870, "hidden?", false);
            var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(18904, 18911, "hidden?", false); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18877, 18880, R); return R; }
          }
          else {
            PrimChecks.turtleOrLink.setVariable(18939, 18946, "hidden?", true);
            var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(18979, 18986, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18952, 18955, R); return R; }
          }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18720, 18723, R); return R; }
      }
      else {
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("BACKBONES"), function() {
          PrimChecks.turtleOrLink.setVariable(19061, 19068, "hidden?", true);
          var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { PrimChecks.turtleOrLink.setVariable(19101, 19108, "hidden?", true); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19074, 19077, R); return R; }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19029, 19032, R); return R; }
        PrimChecks.turtleOrLink.setVariable(19121, 19128, "hidden?", true);
      }
      PrimChecks.turtleOrLink.setVariable(19148, 19155, "hidden?", true);
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18627, 18630, R); return R; }
    if (makeHprotein_Q) {
      var R = ProcedurePrims.callCommand("make-protein", strandHtype); if (R === DeathInterrupt) { return R; }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18508, 18511, R); return R; }
}))
ProcedurePrims.defineCommand("make-protein", 19229, 19848, (function(strandHtype) {
  let thisHgeneHnumber = PrimChecks.procedure.callReporter(19279, 19306, "gene-number-for-this-strand", strandHtype); ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-GENE-NUMBER", thisHgeneHnumber);
  let thisHproteinHvalue = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-PROTEIN-VALUE", thisHproteinHvalue);
  let theseHaminoHacids = PrimChecks.agentset.with(19383, 19387, world.turtleManager.turtlesOfBreed("AMINO-ACIDS"), function() {
    return ((Prims.equality(PrimChecks.turtleOrLink.getVariable(19389, 19394, "breed"), world.turtleManager.turtlesOfBreed("AMINO-ACIDS")) && Prims.equality(strandHtype, PrimChecks.turtle.getVariable(19427, 19433, "strand"))) && Prims.equality(PrimChecks.turtle.getVariable(19438, 19449, "gene-number"), thisHgeneHnumber));
  }); ProcedurePrims.stack().currentContext().registerStringRunVar("THESE-AMINO-ACIDS", theseHaminoHacids);
  let orderedHaminoHacids = PrimChecks.agentset.sortOn(19496, 19503, PrimChecks.validator.checkArg('SORT-ON', 19496, 19503, 112, theseHaminoHacids), function() { return PrimChecks.turtle.getVariable(19505, 19508, "who"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("ORDERED-AMINO-ACIDS", orderedHaminoHacids);
  var R = PrimChecks.task.forEach(19530, 19537, PrimChecks.validator.checkArg('FOREACH', 19530, 19537, 8, orderedHaminoHacids), PrimChecks.task.checked(19558, 19559, function(theHaminoHacid) {
    PrimChecks.procedure.runArgCountCheck('run', 19558, 19668, 1, arguments.length);
    thisHproteinHvalue = StringPrims.word(thisHproteinHvalue, "-", PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 19645, 19647, 1904, theHaminoHacid), function() { return PrimChecks.turtle.getVariable(19638, 19643, "value"); })); ProcedurePrims.stack().currentContext().updateStringRunVar("THIS-PROTEIN-VALUE", thisHproteinHvalue);
  }, "[ the-amino-acid -> set this-protein-value word this-protein-value \"-\" [ value ] of the-amino-acid ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19530, 19537, R); return R; }
  if (PrimChecks.math.not(PrimChecks.agentset.anyWith(null, null, world.turtleManager.turtlesOfBreed("PROTEINS"), function() {
    return (Prims.equality(PrimChecks.turtle.getVariable(19698, 19704, "strand"), strandHtype) && Prims.equality(PrimChecks.turtle.getVariable(19723, 19728, "value"), thisHproteinHvalue));
  }))) {
    var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
      PrimChecks.turtleOrLink.setVariable(19772, 19777, "breed", world.turtleManager.turtlesOfBreed("PROTEINS"));
      PrimChecks.turtle.setVariable(19791, 19796, "value", thisHproteinHvalue);
      PrimChecks.turtleOrLink.setVariable(19820, 19827, "hidden?", true);
      PrimChecks.turtle.setXY(19833, 19838, 0, 0);
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19759, 19764, R); return R; }
  }
}))
ProcedurePrims.defineCommand("release-next-mrna-from-nucleus", 19857, 19983, (function(strandHtype) {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(19914, 19918, world.turtleManager.turtlesOfBreed("MRNAS"), function() { return Prims.equality(PrimChecks.turtle.getVariable(19920, 19926, "strand"), strandHtype); }), function() {
    PrimChecks.turtle.setVariable(19946, 19956, "traveling?", true);
    PrimChecks.turtle.setVariable(19966, 19975, "released?", false);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19904, 19907, R); return R; }
}))
ProcedurePrims.defineCommand("go", 20231, 21904, (function() {
  var R = ProcedurePrims.callCommand("visualize-all-genes"); if (R === DeathInterrupt) { return R; }
  if (world.observer.getGlobal("event-1-triggered?")) {
    var R = ProcedurePrims.callCommand("show-next-mrna", "original"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-1-triggered?", false);
    world.observer.setGlobal("event-1-completed?", true);
    world.observer.setGlobal("event-2-completed?", false);
    world.observer.setGlobal("event-3-completed?", false);
    world.observer.setGlobal("event-4-completed?", false);
  }
  if ((PrimChecks.validator.checkArg('AND', 20590, 20593, 2, world.observer.getGlobal("event-2-triggered?")) && PrimChecks.validator.checkArg('AND', 20590, 20593, 2, world.observer.getGlobal("event-1-completed?")))) {
    var R = ProcedurePrims.callCommand("release-next-mrna-from-nucleus", "original"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-2-triggered?", false);
    world.observer.setGlobal("event-3-completed?", false);
    world.observer.setGlobal("event-4-completed?", false);
  }
  if ((PrimChecks.validator.checkArg('AND', 20788, 20791, 2, world.observer.getGlobal("event-3-triggered?")) && PrimChecks.validator.checkArg('AND', 20788, 20791, 2, world.observer.getGlobal("event-2-completed?")))) {
    var R = ProcedurePrims.callCommand("show-next-trna", "original"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-3-triggered?", false);
    world.observer.setGlobal("event-3-completed?", true);
    world.observer.setGlobal("event-4-completed?", false);
  }
  if ((PrimChecks.validator.checkArg('AND', 20969, 20972, 2, world.observer.getGlobal("event-4-triggered?")) && PrimChecks.validator.checkArg('AND', 20969, 20972, 2, world.observer.getGlobal("event-3-completed?")))) {
    var R = ProcedurePrims.callCommand("release-next-protein", "original"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-4-triggered?", false);
    world.observer.setGlobal("event-4-completed?", true);
  }
  if (world.observer.getGlobal("event-6-triggered?")) {
    var R = ProcedurePrims.callCommand("show-next-mrna", "duplicate"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-6-triggered?", false);
    world.observer.setGlobal("event-6-completed?", true);
    world.observer.setGlobal("event-7-completed?", false);
    world.observer.setGlobal("event-8-completed?", false);
    world.observer.setGlobal("event-9-completed?", false);
  }
  if ((PrimChecks.validator.checkArg('AND', 21348, 21351, 2, world.observer.getGlobal("event-7-triggered?")) && PrimChecks.validator.checkArg('AND', 21348, 21351, 2, world.observer.getGlobal("event-6-completed?")))) {
    var R = ProcedurePrims.callCommand("release-next-mrna-from-nucleus", "duplicate"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-7-triggered?", false);
    world.observer.setGlobal("event-8-completed?", false);
    world.observer.setGlobal("event-9-completed?", false);
  }
  if ((PrimChecks.validator.checkArg('AND', 21547, 21550, 2, world.observer.getGlobal("event-8-triggered?")) && PrimChecks.validator.checkArg('AND', 21547, 21550, 2, world.observer.getGlobal("event-7-completed?")))) {
    var R = ProcedurePrims.callCommand("show-next-trna", "duplicate"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-8-triggered?", false);
    world.observer.setGlobal("event-8-completed?", true);
    world.observer.setGlobal("event-9-completed?", false);
  }
  if ((PrimChecks.validator.checkArg('AND', 21729, 21732, 2, world.observer.getGlobal("event-9-triggered?")) && PrimChecks.validator.checkArg('AND', 21729, 21732, 2, world.observer.getGlobal("event-8-completed?")))) {
    var R = ProcedurePrims.callCommand("release-next-protein", "duplicate"); if (R === DeathInterrupt) { return R; }
    world.observer.setGlobal("event-9-triggered?", false);
    world.observer.setGlobal("event-9-completed?", true);
  }
  var R = ProcedurePrims.callCommand("move-mrna-molecules-out-of-nucleus"); if (R === DeathInterrupt) { return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("move-mrna-molecules-out-of-nucleus", 21913, 22425, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(21960, 21964, world.turtleManager.turtlesOfBreed("MRNAS"), function() {
    return (PrimChecks.validator.checkArg('AND', 21977, 21980, 2, PrimChecks.turtle.getVariable(21966, 21976, "traveling?")) && Prims.equality(PrimChecks.turtle.getVariable(21981, 21989, "cap-type"), "start"));
  }), function() {
    if (Prims.equality(PrimChecks.turtle.getVariable(22010, 22016, "strand"), "original")) {
      if (Prims.lt(PrimChecks.turtle.getVariable(22041, 22045, "ycor"), world.observer.getGlobal("original-ribosome-ycor"))) {
        PrimChecks.turtle.setVariable(22077, 22081, "ycor", PrimChecks.math.plus(22087, 22088, PrimChecks.validator.checkArg('+', 22087, 22088, 1, PrimChecks.turtle.getVariable(22082, 22086, "ycor")), 0.1));
      }
      if (Prims.gte(PrimChecks.turtle.getVariable(22103, 22107, "ycor"), world.observer.getGlobal("original-ribosome-ycor"))) {
        PrimChecks.turtle.setVariable(22140, 22150, "traveling?", false);
        PrimChecks.turtle.setVariable(22161, 22170, "released?", true);
        world.observer.setGlobal("event-2-completed?", true);
      }
    }
    if (Prims.equality(PrimChecks.turtle.getVariable(22218, 22224, "strand"), "duplicate")) {
      if (Prims.gt(PrimChecks.turtle.getVariable(22250, 22254, "ycor"), world.observer.getGlobal("duplicate-ribosome-ycor"))) {
        PrimChecks.turtle.setVariable(22287, 22291, "ycor", PrimChecks.math.minus(22297, 22298, PrimChecks.validator.checkArg('-', 22297, 22298, 1, PrimChecks.turtle.getVariable(22292, 22296, "ycor")), 0.1));
      }
      if (Prims.lte(PrimChecks.turtle.getVariable(22312, 22316, "ycor"), world.observer.getGlobal("duplicate-ribosome-ycor"))) {
        PrimChecks.turtle.setVariable(22350, 22360, "traveling?", false);
        PrimChecks.turtle.setVariable(22371, 22380, "released?", true);
        world.observer.setGlobal("event-7-completed?", true);
      }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(21950, 21953, R); return R; }
}))
ProcedurePrims.defineCommand("show-protein-production", 22434, 23188, (function() {
  OutputPrims.clear();
  let originalHproteins = PrimChecks.agentset.with(22506, 22510, world.turtleManager.turtlesOfBreed("PROTEINS"), function() { return Prims.equality(PrimChecks.turtle.getVariable(22512, 22518, "strand"), "original"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("ORIGINAL-PROTEINS", originalHproteins);
  OutputPrims.print("Proteins Produced");
  OutputPrims.print(StringPrims.word("from original DNA  = ", PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 22613, 22618, 112, originalHproteins))));
  OutputPrims.print("::::::::::::::::::");
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 22676, 22679, 1904, originalHproteins), function() {
    OutputPrims.print(StringPrims.word("Orig.Gene #", PrimChecks.turtle.getVariable(22737, 22748, "gene-number"), " > Protein:"));
    OutputPrims.print(PrimChecks.turtle.getVariable(22781, 22786, "value"));
    OutputPrims.print("");
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(22676, 22679, R); return R; }
  OutputPrims.print("==================");
  let duplicateHproteins = PrimChecks.agentset.with(22882, 22886, world.turtleManager.turtlesOfBreed("PROTEINS"), function() { return Prims.equality(PrimChecks.turtle.getVariable(22888, 22894, "strand"), "duplicate"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("DUPLICATE-PROTEINS", duplicateHproteins);
  OutputPrims.print("Proteins Produced");
  OutputPrims.print(StringPrims.word("from copy of DNA = ", PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 22988, 22993, 112, duplicateHproteins))));
  OutputPrims.print("::::::::::::::::::");
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 23052, 23055, 1904, duplicateHproteins), function() {
    OutputPrims.print(StringPrims.word("Copy.Gene #", PrimChecks.turtle.getVariable(23114, 23125, "gene-number"), " > Protein:"));
    OutputPrims.print(PrimChecks.turtle.getVariable(23158, 23163, "value"));
    OutputPrims.print("");
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(23052, 23055, R); return R; }
}))
ProcedurePrims.defineCommand("make-duplicate-dna-string", 23434, 24783, (function() {
  let positionHcounter = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("POSITION-COUNTER", positionHcounter);
  world.observer.setGlobal("duplicate-strand-gene-counter", 0);
  let cleanHduplicateHdnaHstring = world.observer.getGlobal("original-dna-string"); ProcedurePrims.stack().currentContext().registerStringRunVar("CLEAN-DUPLICATE-DNA-STRING", cleanHduplicateHdnaHstring);
  let mutatingHcopyHofHdnaHstring = world.observer.getGlobal("original-dna-string"); ProcedurePrims.stack().currentContext().registerStringRunVar("MUTATING-COPY-OF-DNA-STRING", mutatingHcopyHofHdnaHstring);
  let targetHloci = PrimChecks.math.random(23651, 23657, PrimChecks.math.minus(23696, 23697, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 23660, 23666, 12, mutatingHcopyHofHdnaHstring)), PrimChecks.validator.checkArg('-', 23696, 23697, 1, world.observer.getGlobal("#-nucleotides-affected")))); ProcedurePrims.stack().currentContext().registerStringRunVar("TARGET-LOCI", targetHloci);
  let dnaHatHtarget = PrimChecks.list.item(23744, 23748, PrimChecks.validator.checkArg('ITEM', 23744, 23748, 1, targetHloci), PrimChecks.validator.checkArg('ITEM', 23744, 23748, 12, mutatingHcopyHofHdnaHstring)); ProcedurePrims.stack().currentContext().registerStringRunVar("DNA-AT-TARGET", dnaHatHtarget);
  let dnaHbeforeHtarget = PrimChecks.list.substring(PrimChecks.validator.checkArg('SUBSTRING', 23815, 23824, 4, mutatingHcopyHofHdnaHstring), 0, PrimChecks.validator.checkArg('SUBSTRING', 23815, 23824, 1, targetHloci)); ProcedurePrims.stack().currentContext().registerStringRunVar("DNA-BEFORE-TARGET", dnaHbeforeHtarget);
  let lociHcounter = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("LOCI-COUNTER", lociHcounter);
  let dnaHatHandHafterHtarget = PrimChecks.list.substring(PrimChecks.validator.checkArg('SUBSTRING', 23922, 23931, 4, mutatingHcopyHofHdnaHstring), PrimChecks.validator.checkArg('SUBSTRING', 23922, 23931, 1, targetHloci), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 23972, 23978, 12, mutatingHcopyHofHdnaHstring))); ProcedurePrims.stack().currentContext().registerStringRunVar("DNA-AT-AND-AFTER-TARGET", dnaHatHandHafterHtarget);
  if (Prims.equality(world.observer.getGlobal("mutation-type"), "deletion")) {
    for (let _index_24050_24056 = 0, _repeatcount_24050_24056 = StrictMath.floor(world.observer.getGlobal("#-nucleotides-affected")); _index_24050_24056 < _repeatcount_24050_24056; _index_24050_24056++) {
      mutatingHcopyHofHdnaHstring = PrimChecks.list.removeItem(24123, 24134, PrimChecks.validator.checkArg('REMOVE-ITEM', 24123, 24134, 1, targetHloci), PrimChecks.validator.checkArg('REMOVE-ITEM', 24123, 24134, 12, mutatingHcopyHofHdnaHstring)); ProcedurePrims.stack().currentContext().updateStringRunVar("MUTATING-COPY-OF-DNA-STRING", mutatingHcopyHofHdnaHstring);
    }
  }
  if (Prims.equality(world.observer.getGlobal("mutation-type"), "substitution")) {
    for (let _index_24236_24242 = 0, _repeatcount_24236_24242 = StrictMath.floor(world.observer.getGlobal("#-nucleotides-affected")); _index_24236_24242 < _repeatcount_24236_24242; _index_24236_24242++) {
      mutatingHcopyHofHdnaHstring = PrimChecks.list.replaceItem(24309, 24321, PrimChecks.math.plus(24335, 24336, PrimChecks.validator.checkArg('+', 24335, 24336, 1, targetHloci), PrimChecks.validator.checkArg('+', 24335, 24336, 1, lociHcounter)), PrimChecks.validator.checkArg('REPLACE-ITEM', 24309, 24321, 12, mutatingHcopyHofHdnaHstring), PrimChecks.procedure.callReporter(24379, 24401, "random-base-letter-dna")); ProcedurePrims.stack().currentContext().updateStringRunVar("MUTATING-COPY-OF-DNA-STRING", mutatingHcopyHofHdnaHstring);
      lociHcounter = PrimChecks.math.plus(24441, 24442, PrimChecks.validator.checkArg('+', 24441, 24442, 1, lociHcounter), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("LOCI-COUNTER", lociHcounter);
    }
  }
  if (Prims.equality(world.observer.getGlobal("mutation-type"), "insertion")) {
    for (let _index_24503_24509 = 0, _repeatcount_24503_24509 = StrictMath.floor(world.observer.getGlobal("#-nucleotides-affected")); _index_24503_24509 < _repeatcount_24503_24509; _index_24503_24509++) {
      dnaHatHandHafterHtarget = StringPrims.word(PrimChecks.procedure.callReporter(24578, 24600, "random-base-letter-dna"), dnaHatHandHafterHtarget); ProcedurePrims.stack().currentContext().updateStringRunVar("DNA-AT-AND-AFTER-TARGET", dnaHatHandHafterHtarget);
    }
    mutatingHcopyHofHdnaHstring = StringPrims.word(dnaHbeforeHtarget, dnaHatHandHafterHtarget); ProcedurePrims.stack().currentContext().updateStringRunVar("MUTATING-COPY-OF-DNA-STRING", mutatingHcopyHofHdnaHstring);
  }
  world.observer.setGlobal("duplicate-dna-string", mutatingHcopyHofHdnaHstring);
}))
ProcedurePrims.defineCommand("replicate-dna", 24792, 25464, (function() {
  let turtlesHtoHremove = PrimChecks.agentset.turtleSet(24831, 24841, world.turtleManager.turtlesOfBreed("NUCLEOTIDES"), world.turtleManager.turtlesOfBreed("MRNAS"), world.turtleManager.turtlesOfBreed("TRNAS"), world.turtleManager.turtlesOfBreed("GENES"), world.turtleManager.turtlesOfBreed("PROMOTERS"), world.turtleManager.turtlesOfBreed("TERMINATORS"), world.turtleManager.turtlesOfBreed("AMINO-ACIDS"), world.turtleManager.turtlesOfBreed("MRNA-NUCLEOTIDES")); ProcedurePrims.stack().currentContext().registerStringRunVar("TURTLES-TO-REMOVE", turtlesHtoHremove);
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(25000, 25004, PrimChecks.validator.checkArg('WITH', 25000, 25004, 112, turtlesHtoHremove), function() { return Prims.equality(PrimChecks.turtle.getVariable(25006, 25012, "strand"), "duplicate"); }), function() {
    var R = ProcedurePrims.ask(LinkPrims.linkNeighbors("TAGLINES"), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(25029, 25032, R); return R; }
    return SelfManager.self().die();
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(24978, 24981, R); return R; }
  var R = ProcedurePrims.callCommand("make-duplicate-dna-string"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("build-genes-from-dna", "duplicate", world.observer.getGlobal("duplicate-dna-string")); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("make-a-nucleotide-chain-for-dna-string", "duplicate", world.observer.getGlobal("duplicate-dna-string")); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("place-dna", "duplicate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("build-mrna-for-each-gene", "duplicate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("build-protein-from-mrna", "duplicate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("place-trnas", "duplicate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("hide-mrna", "duplicate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("hide-trna", "duplicate"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("hide-genes", "duplicate"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("initialize-codon-to-amino-acid-key", 25658, 26888, (function() {
  world.observer.setGlobal("codon-to-amino-acid-key", [["UUU", "Phe"], ["UUC", "Phe"], ["UUA", "Leu"], ["UUG", "Leu"], ["CUU", "Leu"], ["CUC", "Leu"], ["CUA", "Leu"], ["CUG", "Leu"], ["AUU", "Ile"], ["AUC", "Ile"], ["AUA", "Ile"], ["AUG", "Met"], ["GUU", "Val"], ["GUC", "Val"], ["GUA", "Val"], ["GUG", "Val"], ["UCU", "Ser"], ["UCC", "Ser"], ["UCA", "Ser"], ["UCG", "Ser"], ["CCU", "Pro"], ["CCC", "Pro"], ["CCA", "Pro"], ["CCG", "Pro"], ["ACU", "Thr"], ["ACC", "Thr"], ["ACA", "Thr"], ["ACG", "Thr"], ["GCU", "Ala"], ["GCC", "Ala"], ["GCA", "Ala"], ["GCG", "Ala"], ["UAU", "Tyr"], ["UAC", "Tyr"], ["UAA", "Stop"], ["UAG", "Stop"], ["CAU", "His"], ["CAC", "His"], ["CAA", "Gln"], ["CAG", "Gln"], ["AAU", "Asn"], ["AAC", "Asn"], ["AAA", "Lys"], ["AAG", "Lys"], ["GAU", "Asp"], ["GAC", "Asp"], ["GAA", "Glu"], ["GAG", "Glu"], ["UGU", "Cys"], ["UGC", "Cys"], ["UGA", "Stop"], ["UGG", "Trp"], ["CGU", "Arg"], ["CGC", "Arg"], ["CGA", "Arg"], ["CGG", "Arg"], ["AGU", "Ser"], ["AGC", "Ser"], ["AGA", "Arg"], ["AGG", "Arg"], ["GGU", "Gly"], ["GGC", "Gly"], ["GGA", "Gly"], ["GGG", "Gly"]]);
}))
ProcedurePrims.defineReporter("which-protein-for-this-codon", 27188, 27321, (function(thisHcodon) {
  return PrimChecks.procedure.report(27231, 27237, PrimChecks.list.item(27238, 27242, 1, PrimChecks.validator.checkArg('ITEM', 27238, 27242, 12, PrimChecks.list.item(27246, 27250, 0, PrimChecks.list.filter(27253, 27259, PrimChecks.task.checked(27260, 27261, function(pair) {
    PrimChecks.procedure.runArgCountCheck('runresult', 27270, 27293, 1, arguments.length);
    return Prims.equality(PrimChecks.list.first(27270, 27275, PrimChecks.validator.checkArg('FIRST', 27270, 27275, 12, pair)), thisHcodon);
  }, "[ pair -> first pair = this-codon ]", true, false), PrimChecks.validator.checkArg('FILTER', 27253, 27259, 8, world.observer.getGlobal("codon-to-amino-acid-key")))))));
}))
ProcedurePrims.defineReporter("random-base-letter-dna", 27386, 27630, (function() {
  let r = RandomPrims.randomLong(4); ProcedurePrims.stack().currentContext().registerStringRunVar("R", r);
  let letterHtoHreport = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("LETTER-TO-REPORT", letterHtoHreport);
  if (Prims.equality(r, 0)) {
    letterHtoHreport = "A"; ProcedurePrims.stack().currentContext().updateStringRunVar("LETTER-TO-REPORT", letterHtoHreport);
  }
  if (Prims.equality(r, 1)) {
    letterHtoHreport = "G"; ProcedurePrims.stack().currentContext().updateStringRunVar("LETTER-TO-REPORT", letterHtoHreport);
  }
  if (Prims.equality(r, 2)) {
    letterHtoHreport = "T"; ProcedurePrims.stack().currentContext().updateStringRunVar("LETTER-TO-REPORT", letterHtoHreport);
  }
  if (Prims.equality(r, 3)) {
    letterHtoHreport = "C"; ProcedurePrims.stack().currentContext().updateStringRunVar("LETTER-TO-REPORT", letterHtoHreport);
  }
  return PrimChecks.procedure.report(27606, 27612, letterHtoHreport);
}))
ProcedurePrims.defineReporter("complementary-mrna-base", 27735, 28019, (function(base) {
  let baseHtoHreport = ""; ProcedurePrims.stack().currentContext().registerStringRunVar("BASE-TO-REPORT", baseHtoHreport);
  if (Prims.equality(base, "A")) {
    baseHtoHreport = "U"; ProcedurePrims.stack().currentContext().updateStringRunVar("BASE-TO-REPORT", baseHtoHreport);
  }
  if (Prims.equality(base, "T")) {
    baseHtoHreport = "A"; ProcedurePrims.stack().currentContext().updateStringRunVar("BASE-TO-REPORT", baseHtoHreport);
  }
  if (Prims.equality(base, "U")) {
    baseHtoHreport = "A"; ProcedurePrims.stack().currentContext().updateStringRunVar("BASE-TO-REPORT", baseHtoHreport);
  }
  if (Prims.equality(base, "G")) {
    baseHtoHreport = "C"; ProcedurePrims.stack().currentContext().updateStringRunVar("BASE-TO-REPORT", baseHtoHreport);
  }
  if (Prims.equality(base, "C")) {
    baseHtoHreport = "G"; ProcedurePrims.stack().currentContext().updateStringRunVar("BASE-TO-REPORT", baseHtoHreport);
  }
  return PrimChecks.procedure.report(27997, 28003, baseHtoHreport);
}))
ProcedurePrims.defineReporter("next-gene-color", 28110, 28311, (function() {
  if (Prims.gte(world.observer.getGlobal("gene-color-counter"), PrimChecks.math.minus(28178, 28179, PrimChecks.list.length(ColorModel.BASE_COLORS), 1))) {
    world.observer.setGlobal("gene-color-counter", 0);
  }
  else {
    world.observer.setGlobal("gene-color-counter", PrimChecks.math.plus(28258, 28259, PrimChecks.validator.checkArg('+', 28258, 28259, 1, world.observer.getGlobal("gene-color-counter")), 1));
  }
  return PrimChecks.procedure.report(28266, 28272, PrimChecks.list.item(28274, 28278, PrimChecks.validator.checkArg('ITEM', 28274, 28278, 1, world.observer.getGlobal("gene-color-counter")), ColorModel.BASE_COLORS));
}))
ProcedurePrims.defineReporter("gene-number-for-this-strand", 28327, 28589, (function(strandHtype) {
  let thisHgeneHnumber = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("THIS-GENE-NUMBER", thisHgeneHnumber);
  if (Prims.equality(strandHtype, "original")) {
    thisHgeneHnumber = world.observer.getGlobal("original-display-mrna-counter"); ProcedurePrims.stack().currentContext().updateStringRunVar("THIS-GENE-NUMBER", thisHgeneHnumber);
  }
  if (Prims.equality(strandHtype, "duplicate")) {
    thisHgeneHnumber = world.observer.getGlobal("duplicate-display-mrna-counter"); ProcedurePrims.stack().currentContext().updateStringRunVar("THIS-GENE-NUMBER", thisHgeneHnumber);
  }
  return PrimChecks.procedure.report(28565, 28571, thisHgeneHnumber);
}))
ProcedurePrims.defineReporter("mrna-string-from-dna-string", 28665, 28948, (function(dnaHstring) {
  let newHstring = dnaHstring; ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-STRING", newHstring);
  let nextHitem = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("NEXT-ITEM", nextHitem);
  for (let _index_28754_28760 = 0, _repeatcount_28754_28760 = StrictMath.floor(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 28761, 28767, 12, dnaHstring))); _index_28754_28760 < _repeatcount_28754_28760; _index_28754_28760++) {
    newHstring = PrimChecks.list.replaceItem(28801, 28813, PrimChecks.validator.checkArg('REPLACE-ITEM', 28801, 28813, 1, nextHitem), PrimChecks.validator.checkArg('REPLACE-ITEM', 28801, 28813, 12, newHstring), PrimChecks.procedure.callReporter(28836, 28859, "complementary-mrna-base", PrimChecks.list.item(28861, 28865, PrimChecks.validator.checkArg('ITEM', 28861, 28865, 1, nextHitem), PrimChecks.validator.checkArg('ITEM', 28861, 28865, 12, newHstring)))); ProcedurePrims.stack().currentContext().updateStringRunVar("NEW-STRING", newHstring);
    nextHitem = PrimChecks.math.plus(28920, 28921, PrimChecks.validator.checkArg('+', 28920, 28921, 1, nextHitem), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("NEXT-ITEM", nextHitem);
  }
  return PrimChecks.procedure.report(28930, 28936, newHstring);
}))
ProcedurePrims.defineReporter("dna-string-with-non-nucleotide-characters-replaced", 29108, 29494, (function(dnaHstring) {
  let newHstring = dnaHstring; ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-STRING", newHstring);
  let nextHitem = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("NEXT-ITEM", nextHitem);
  for (let _index_29220_29226 = 0, _repeatcount_29220_29226 = StrictMath.floor(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 29227, 29233, 12, dnaHstring))); _index_29220_29226 < _repeatcount_29220_29226; _index_29220_29226++) {
    newHstring = PrimChecks.list.replaceItem(29267, 29279, PrimChecks.validator.checkArg('REPLACE-ITEM', 29267, 29279, 1, nextHitem), PrimChecks.validator.checkArg('REPLACE-ITEM', 29267, 29279, 12, newHstring), PrimChecks.procedure.callReporter(29302, 29334, "replace-non-nucleotide-character", PrimChecks.list.item(29336, 29340, PrimChecks.validator.checkArg('ITEM', 29336, 29340, 1, nextHitem), PrimChecks.validator.checkArg('ITEM', 29336, 29340, 12, newHstring)))); ProcedurePrims.stack().currentContext().updateStringRunVar("NEW-STRING", newHstring);
    nextHitem = PrimChecks.math.plus(29395, 29396, PrimChecks.validator.checkArg('+', 29395, 29396, 1, nextHitem), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("NEXT-ITEM", nextHitem);
  }
  if (Prims.gt(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 29408, 29414, 12, dnaHstring)), 64)) {
    newHstring = PrimChecks.list.substring(PrimChecks.validator.checkArg('SUBSTRING', 29447, 29456, 4, newHstring), 0, 64); ProcedurePrims.stack().currentContext().updateStringRunVar("NEW-STRING", newHstring);
  }
  return PrimChecks.procedure.report(29476, 29482, newHstring);
}))
ProcedurePrims.defineReporter("replace-non-nucleotide-character", 29582, 29900, (function(nucleotideHcharacter) {
  let characterHtoHreturn = nucleotideHcharacter; ProcedurePrims.stack().currentContext().registerStringRunVar("CHARACTER-TO-RETURN", characterHtoHreturn);
  if ((((!Prims.equality(nucleotideHcharacter, "A") && !Prims.equality(nucleotideHcharacter, "T")) && !Prims.equality(nucleotideHcharacter, "C")) && !Prims.equality(nucleotideHcharacter, "G"))) {
    characterHtoHreturn = PrimChecks.procedure.callReporter(29846, 29868, "random-base-letter-dna"); ProcedurePrims.stack().currentContext().updateStringRunVar("CHARACTER-TO-RETURN", characterHtoHreturn);
  }
  return PrimChecks.procedure.report(29873, 29879, characterHtoHreturn);
}))
ProcedurePrims.defineReporter("current-instruction-label", 30172, 30328, (function() {
  return PrimChecks.procedure.report(30200, 30206, (Prims.ifElseValueBooleanCheck(Prims.equality(world.observer.getGlobal("current-instruction"), 0)) ? "press setup" : StringPrims.word(world.observer.getGlobal("current-instruction"), " of ", PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 30305, 30311, 12, PrimChecks.procedure.callReporter(30312, 30324, "instructions"))))));
}))
ProcedurePrims.defineCommand("next-instruction", 30337, 30397, (function() {
  var R = ProcedurePrims.callCommand("show-instruction", PrimChecks.math.plus(30393, 30394, PrimChecks.validator.checkArg('+', 30393, 30394, 1, world.observer.getGlobal("current-instruction")), 1)); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("previous-instruction", 30406, 30470, (function() {
  var R = ProcedurePrims.callCommand("show-instruction", PrimChecks.math.minus(30466, 30467, PrimChecks.validator.checkArg('-', 30466, 30467, 1, world.observer.getGlobal("current-instruction")), 1)); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("show-instruction", 30479, 30665, (function(i) {
  if ((Prims.gte(i, 1) && Prims.lte(i, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 30523, 30529, 12, PrimChecks.procedure.callReporter(30530, 30542, "instructions")))))) {
    world.observer.setGlobal("current-instruction", i);
    OutputPrims.clear();
    var R = PrimChecks.task.forEach(30596, 30603, PrimChecks.validator.checkArg('FOREACH', 30596, 30603, 8, PrimChecks.list.item(30604, 30608, PrimChecks.math.minus(30630, 30631, PrimChecks.validator.checkArg('-', 30630, 30631, 1, world.observer.getGlobal("current-instruction")), 1), PrimChecks.validator.checkArg('ITEM', 30604, 30608, 12, PrimChecks.procedure.callReporter(30635, 30647, "instructions")))), PrimChecks.task.checked(30648, 30660, function(_0) {
      PrimChecks.procedure.runArgCountCheck('run', 30648, 30660, 1, arguments.length);
      OutputPrims.print(_0);
    }, "output-print", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(30596, 30603, R); return R; }
  }
}))
ProcedurePrims.defineReporter("instructions", 30681, 33242, (function() {
  return PrimChecks.procedure.report(30696, 30702, [["You will be simulating the process", "of protein synthesis from DNA that", "occurs in every cell.  And you will", "explore the effects of mutations", "on the proteins that are produced."], ["When you press SETUP, a single", "strand of an unwound DNA molecule", "appears. This represents the state", "of DNA in the cell nucleus during", "transcription."], ["To produce proteins, each gene in", "the original DNA strand must be", "transcribed  into an mRNA molecule.", "Do this by pressing GO/STOP and", "then the 1-TRANSCRIBE button."], ["For each mRNA molecule that was", "transcribed, press the 2-RELEASE", "button.  This releases the mRNA", "from the nucleus  into the ribosome", "of the cell."], ["For each mRNA molecule in the", "ribosome, press the 3-TRANSLATE", "button.  This pairs up molecules", "of tRNA with each set of three", "nucleotides in the mRNA molecule."], ["For each tRNA chain built, press", "the 4-RELEASE button.  This", "releases the amino acid chain", "from the rest of the tRNA chain,", "leaving behind the protein", "molecule that is produced."], ["Each time the 1-TRANSCRIBE", "button is pressed, the next gene", "in the original strand of DNA ", "will be transcribed.  Press the 1-,", "2-, 3-, 4- buttons and repeat to", "translate each subsequent gene."], ["When you press the 5-REPLICATE", "THE ORIGINAL DNA button a copy", "of the original DNA will be ", "generated for a new cell", "(as in mitosis or meiosis) and", "it will appear in the green."], ["The replicated DNA will have a", "# of random mutations, set by", "#-NUCLEOTIDES-AFFECTED, each", "mutation of the type set by", "MUTATION-TYPE. Press button 5)", "again to explore possible outcomes."], ["Now repeat the same transcription,", "release, translation, and release", "process for the DNA in this new", "cell by pressing 6-, 7-, 8-, 9-.", "Repeat that sequence again to", "cycle through to the next gene."], ["If you want to test the outcomes", "for your own DNA code, type any", "sequence of A, G, T, C in the", "USER-CREATED-CODE box and set", "the INITIAL-DNA-STRING to", "“from-user-code”.  Then press", "SETUP and start over again."]]);
}))
ProcedurePrims.defineCommand("reset-completed-events", 33252, 34092, (function() {
  if ((((PrimChecks.validator.checkArg('OR', 33300, 33302, 2, world.observer.getGlobal("event-1-triggered?")) || PrimChecks.validator.checkArg('OR', 33300, 33302, 2, world.observer.getGlobal("event-2-triggered?"))) || PrimChecks.validator.checkArg('OR', 33323, 33325, 2, world.observer.getGlobal("event-3-triggered?"))) || PrimChecks.validator.checkArg('OR', 33345, 33347, 2, world.observer.getGlobal("event-4-triggered?")))) {
    world.observer.setGlobal("event-4-completed?", false);
    if (((PrimChecks.validator.checkArg('OR', 33428, 33430, 2, world.observer.getGlobal("event-1-triggered?")) || PrimChecks.validator.checkArg('OR', 33428, 33430, 2, world.observer.getGlobal("event-2-triggered?"))) || PrimChecks.validator.checkArg('OR', 33451, 33453, 2, world.observer.getGlobal("event-3-triggered?")))) {
      world.observer.setGlobal("event-3-completed?", false);
      if ((PrimChecks.validator.checkArg('OR', 33538, 33540, 2, world.observer.getGlobal("event-1-triggered?")) || PrimChecks.validator.checkArg('OR', 33538, 33540, 2, world.observer.getGlobal("event-2-triggered?")))) {
        world.observer.setGlobal("event-2-completed?", false);
        if (world.observer.getGlobal("event-1-triggered?")) {
          world.observer.setGlobal("event-1-completed?", false);
        }
      }
    }
  }
  if ((((PrimChecks.validator.checkArg('OR', 33707, 33709, 2, world.observer.getGlobal("event-6-triggered?")) || PrimChecks.validator.checkArg('OR', 33707, 33709, 2, world.observer.getGlobal("event-7-triggered?"))) || PrimChecks.validator.checkArg('OR', 33729, 33731, 2, world.observer.getGlobal("event-8-triggered?"))) || PrimChecks.validator.checkArg('OR', 33751, 33753, 2, world.observer.getGlobal("event-9-triggered?")))) {
    world.observer.setGlobal("event-9-completed?", false);
    if (((PrimChecks.validator.checkArg('OR', 33834, 33836, 2, world.observer.getGlobal("event-6-triggered?")) || PrimChecks.validator.checkArg('OR', 33834, 33836, 2, world.observer.getGlobal("event-7-triggered?"))) || PrimChecks.validator.checkArg('OR', 33857, 33859, 2, world.observer.getGlobal("event-8-triggered?")))) {
      world.observer.setGlobal("event-8-completed?", false);
      if ((PrimChecks.validator.checkArg('OR', 33944, 33946, 2, world.observer.getGlobal("event-6-triggered?")) || PrimChecks.validator.checkArg('OR', 33944, 33946, 2, world.observer.getGlobal("event-7-triggered?")))) {
        world.observer.setGlobal("event-7-completed?", false);
        if (world.observer.getGlobal("event-6-triggered?")) {
          world.observer.setGlobal("event-6-completed?", false);
        }
      }
    }
  }
}))
world.observer.setGlobal("initial-dna-string", "1 long gene");
world.observer.setGlobal("user-created-code", "AAAAA");
world.observer.setGlobal("#-nucleotides-affected", 1);
world.observer.setGlobal("mutation-type", "substitution");
world.observer.setGlobal("show-genes?", true);