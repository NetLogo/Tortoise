var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]},"curved":{"name":"curved","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":105,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":195,"y2":210,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":1,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [];
var workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "pages", singular: "page", varNames: ["rank", "new-rank", "visits"] }, { name: "surfers", singular: "surfer", varNames: ["current-page"] }])([], [])('breed [ pages page ] breed [ surfers surfer ]  pages-own [   rank new-rank ; for the diffusion approach   visits ; for the random-surfer approach ]  surfers-own [ current-page ]  globals [ total-rank max-rank ]  ;; ;; Setup Procedures ;;  to setup   clear-all   set-default-shape pages \"circle\"    ifelse network-choice = \"Example 1\"   [ create-network-example-1 ][     ifelse network-choice = \"Example 2\"     [ create-network-example-2 ][       ifelse network-choice = \"Preferential Attachment\"       [ create-network-preferential 100 2 ]       [ user-message word \"Error: unknown network-choice: \" network-choice ] ] ]    ask patches [ set pcolor white ]   ask pages   [ set rank 1 / count pages ]   update-globals   ask pages   [     setxy random-xcor random-ycor     set label-color black     update-page-appearance   ]    repeat 300 [ do-layout ]    ask links [ set shape \"curved\" ]   reset-ticks end  to create-network-example-1   create-pages 11   ask page 0 [ set color blue create-link-from page 3 ]   ask page 1 [ set color red create-links-from (turtle-set page 2 page 3 page 4 page 5 page 6 page 7 page 8 ) ]   ask page 2 [ set color orange create-link-from page 1 ]   ask page 3 [ set color green create-link-from page 4 ]   ask page 4 [ set color yellow create-links-from (turtle-set page 5 page 6 page 7 page 8 page 9 page 10) ]   ask page 5 [ set color green create-link-from page 4 ]   ask pages with [who > 5] [ set color violet ] end  to create-network-example-2   create-pages 8   ask page 0 [ die ]   ask page 1 [ create-links-from (turtle-set page 2 page 3 page 5 page 6) ]   ask page 2 [ create-links-from (turtle-set page 1 page 3 page 4) ]   ask page 3 [ create-links-from (turtle-set page 1 page 4 page 5) ]   ask page 4 [ create-links-from (turtle-set page 1 page 5) ]   ask page 5 [ create-links-from (turtle-set page 1 page 4 page 6 page 7) ]   ask page 6 [ create-links-from (turtle-set page 5) ]   ask page 7 [ create-links-from (turtle-set page 1) ] end  to create-network-preferential [ n k ]   create-pages n [ set color sky ]   link-preferentially pages k end  ; The parameter k (always an integer) gives the number of edges to add at ; each step (e.g. k=1 builds a tree) to link-preferentially [nodeset k]   ;; get the nodes in sorted order   let node-list sort nodeset    ;; get a sublist of the nodes from 0 to k   let neighbor-choice-list sublist node-list 0 k    ;; ask the kth node...   ask item k node-list   [     ;; to make a link either to or from each preceding     ;; node in the sorted list.     foreach neighbor-choice-list [ neighbor ->       ifelse random 2 = 0         [ create-link-to neighbor ]         [ create-link-from neighbor ]     ]     ;; add k copies of this node to the beginning of the sublist     set neighbor-choice-list sentence (n-values k [self]) neighbor-choice-list   ]    ;; ask each node after the kth node in order...   foreach sublist node-list (k + 1) (length node-list) [ node ->     ask node [       ;; ...to make k links       let temp-neighbor-list neighbor-choice-list       repeat k       [         ;; link to one of the nodes in the neighbor list         ;; we remove that node from the list once it\'s been linked to         ;; however, there may be more than one copy of some nodes         ;; since those nodes have a higher probability of being linked to         let neighbor one-of temp-neighbor-list         set temp-neighbor-list remove neighbor temp-neighbor-list         ;; when we\'ve linked to a node put another copy of it on the         ;; master neighbor choice list as it\'s now more likely to be         ;; linked to again         set neighbor-choice-list fput neighbor neighbor-choice-list         ifelse random 2 = 0           [ create-link-to neighbor ]           [ create-link-from neighbor ]       ]       set neighbor-choice-list sentence (n-values k [self]) neighbor-choice-list     ]   ] end  to do-layout   layout-spring pages links 0.2 20 / (sqrt count pages) 0.5 end  ;; ;; Runtime Procedures ;;  to go   ifelse calculation-method = \"diffusion\"   [     if any? surfers [ ask surfers [ die ] ] ;; remove surfers if the calculation-method is changed      ;; return links and pages to initial state     ask links [ set color gray set thickness 0 ]     ask pages [ set new-rank 0 ]      ask pages     [       ifelse any? out-link-neighbors       [         ;; if a node has any out-links divide current rank         ;; equally among them.         let rank-increment rank / count out-link-neighbors         ask out-link-neighbors [           set new-rank new-rank + rank-increment         ]       ]       [         ;; if a node has no out-links divide current         ;; rank equally among all the nodes         let rank-increment rank / count pages         ask pages [           set new-rank new-rank + rank-increment         ]       ]     ]      ask pages     [       ;; set current rank to the new-rank and take the damping-factor into account       set rank (1 - damping-factor) / count pages + damping-factor * new-rank     ]   ]   [ ;;; \"random-surfer\" calculation-method     ; surfers are created or destroyed on the fly if users move the     ; NUMBER-OF-SURFERS slider while the model is running.     if count surfers < number-of-surfers     [       create-surfers number-of-surfers - count surfers       [         set current-page one-of pages         ifelse watch-surfers?         [ move-surfer ]         [ hide-turtle ]       ]     ]     if count surfers > number-of-surfers     [       ask n-of (count surfers - number-of-surfers) surfers         [ die ]     ]     ;; return links to their initial state     ask links [ set color gray set thickness 0 ]      ask surfers [       let old-page current-page       ;; increment the visits on the page we\'re on       ask current-page [ set visits visits + 1 ]       ;; with a probability depending on the damping-factor either go to a       ;; random page or a random one of the pages that this page is linked to       ifelse random-float 1 <= damping-factor and any? [my-out-links] of current-page       [ set current-page one-of [out-link-neighbors] of current-page ]       [ set current-page one-of pages ]        ;; update the visualization       ifelse watch-surfers?       [         show-turtle         move-surfer         let surfer-color color         ask old-page [           let traveled-link out-link-to [current-page] of myself           if traveled-link != nobody [             ask traveled-link [ set color surfer-color set thickness 0.08 ]           ]         ]       ]       [ hide-turtle ]     ]     ;; update the rank of each page     let total-visits sum [visits] of pages     ask pages [       set rank visits / total-visits     ]   ]    update-globals   ask pages [ update-page-appearance ]   tick end  to move-surfer ;; surfer procedure   face current-page   move-to current-page end  to update-globals   set total-rank sum [rank] of pages   set max-rank max [rank] of pages end  to update-page-appearance ;; page procedure   ; keep size between 0.1 and 5   set size 0.2 + 4 * sqrt (rank / total-rank)   ifelse show-page-ranks?   [ set label word (precision rank 3) \"     \" ]   [ set label \"\" ] end   ; Copyright 2009 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":255,"y":10,"width":428,"height":429,"dimensions":{"minPxcor":-10,"maxPxcor":10,"minPycor":-10,"maxPycor":10,"patchSize":20,"wrappingAllowedInX":false,"wrappingAllowedInY":false},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":15,"y":95,"width":75,"height":33,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":170,"y":95,"width":70,"height":33,"oldSize":true,"forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.01; })","type":"slider","variable":"damping-factor","x":25,"y":165,"width":200,"height":33,"oldSize":true,"display":"damping-factor","min":"0","max":"1.00","default":0.85,"step":"0.01","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"variable":"calculation-method","x":25,"y":235,"width":200,"height":45,"oldSize":true,"display":"calculation-method","choices":["diffusion","random-surfer"],"currentChoice":1,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"watch-surfers?","x":35,"y":370,"width":180,"height":33,"oldSize":true,"display":"watch-surfers?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"number-of-surfers","x":25,"y":285,"width":200,"height":33,"oldSize":true,"display":"number-of-surfers","min":"1","max":"100","default":5,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"variable":"network-choice","x":15,"y":35,"width":225,"height":45,"oldSize":true,"display":"network-choice","choices":["Example 1","Example 2","Preferential Attachment"],"currentChoice":0,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"variable":"show-page-ranks?","x":35,"y":415,"width":180,"height":33,"oldSize":true,"display":"show-page-ranks?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":95,"y":95,"width":70,"height":33,"oldSize":true,"display":"step","forever":false,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["damping-factor", "calculation-method", "watch-surfers?", "number-of-surfers", "network-choice", "show-page-ranks?", "total-rank", "max-rank"], ["damping-factor", "calculation-method", "watch-surfers?", "number-of-surfers", "network-choice", "show-page-ranks?"], [], -10, 10, -10, 10, 20, false, false, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 242, 902, (function() {
  world.clearAll();
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("PAGES").getSpecialName(), "circle")
  if (Prims.equality(world.observer.getGlobal("network-choice"), "Example 1")) {
    var R = ProcedurePrims.callCommand("create-network-example-1"); if (R === DeathInterrupt) { return R; }
  }
  else {
    if (Prims.equality(world.observer.getGlobal("network-choice"), "Example 2")) {
      var R = ProcedurePrims.callCommand("create-network-example-2"); if (R === DeathInterrupt) { return R; }
    }
    else {
      if (Prims.equality(world.observer.getGlobal("network-choice"), "Preferential Attachment")) {
        var R = ProcedurePrims.callCommand("create-network-preferential", 100, 2); if (R === DeathInterrupt) { return R; }
      }
      else {
        UserDialogPrims.confirm(StringPrims.word("Error: unknown network-choice: ", world.observer.getGlobal("network-choice")));
      }
    }
  }
  var R = ProcedurePrims.ask(world.patches(), function() { PrimChecks.patch.setVariable(642, 648, "pcolor", 9.9); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(624, 627, R); return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
    PrimChecks.turtle.setVariable(677, 681, "rank", PrimChecks.math.div(684, 685, 1, PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PAGES"))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(659, 662, R); return R; }
  var R = ProcedurePrims.callCommand("update-globals"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
    PrimChecks.turtle.setXY(737, 742, RandomPrims.randomFloatInRange(world.topology.minPxcor, world.topology.maxPxcor), RandomPrims.randomFloatInRange(world.topology.minPycor, world.topology.maxPycor));
    PrimChecks.turtleOrLink.setVariable(775, 786, "label-color", 0);
    var R = ProcedurePrims.callCommand("update-page-appearance"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(719, 722, R); return R; }
  for (let _index_827_833 = 0, _repeatcount_827_833 = StrictMath.floor(300); _index_827_833 < _repeatcount_827_833; _index_827_833++) {
    var R = ProcedurePrims.callCommand("do-layout"); if (R === DeathInterrupt) { return R; }
  }
  var R = ProcedurePrims.ask(world.links(), function() { PrimChecks.turtleOrLink.setVariable(871, 876, "shape", "curved"); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(855, 858, R); return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("create-network-example-1", 910, 1449, (function() {
  world.turtleManager.createTurtles(11, "PAGES");
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 955, 958, 1904, PrimChecks.turtle.getTurtleOfBreed(959, 963, "PAGES", 0)), function() {
    PrimChecks.turtleOrLink.setVariable(972, 977, "color", 105);
    var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(PrimChecks.turtle.getTurtleOfBreed(1000, 1004, "PAGES", 3), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(983, 999, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(955, 958, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1011, 1014, 1904, PrimChecks.turtle.getTurtleOfBreed(1015, 1019, "PAGES", 1)), function() {
    PrimChecks.turtleOrLink.setVariable(1028, 1033, "color", 15);
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1057, 1067, PrimChecks.turtle.getTurtleOfBreed(1068, 1072, "PAGES", 2), PrimChecks.turtle.getTurtleOfBreed(1075, 1079, "PAGES", 3), PrimChecks.turtle.getTurtleOfBreed(1082, 1086, "PAGES", 4), PrimChecks.turtle.getTurtleOfBreed(1089, 1093, "PAGES", 5), PrimChecks.turtle.getTurtleOfBreed(1096, 1100, "PAGES", 6), PrimChecks.turtle.getTurtleOfBreed(1103, 1107, "PAGES", 7), PrimChecks.turtle.getTurtleOfBreed(1110, 1114, "PAGES", 8)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1038, 1055, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1011, 1014, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1123, 1126, 1904, PrimChecks.turtle.getTurtleOfBreed(1127, 1131, "PAGES", 2)), function() {
    PrimChecks.turtleOrLink.setVariable(1140, 1145, "color", 25);
    var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(PrimChecks.turtle.getTurtleOfBreed(1170, 1174, "PAGES", 1), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1153, 1169, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1123, 1126, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1181, 1184, 1904, PrimChecks.turtle.getTurtleOfBreed(1185, 1189, "PAGES", 3)), function() {
    PrimChecks.turtleOrLink.setVariable(1198, 1203, "color", 55);
    var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(PrimChecks.turtle.getTurtleOfBreed(1227, 1231, "PAGES", 4), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1210, 1226, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1181, 1184, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1238, 1241, 1904, PrimChecks.turtle.getTurtleOfBreed(1242, 1246, "PAGES", 4)), function() {
    PrimChecks.turtleOrLink.setVariable(1255, 1260, "color", 45);
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1287, 1297, PrimChecks.turtle.getTurtleOfBreed(1298, 1302, "PAGES", 5), PrimChecks.turtle.getTurtleOfBreed(1305, 1309, "PAGES", 6), PrimChecks.turtle.getTurtleOfBreed(1312, 1316, "PAGES", 7), PrimChecks.turtle.getTurtleOfBreed(1319, 1323, "PAGES", 8), PrimChecks.turtle.getTurtleOfBreed(1326, 1330, "PAGES", 9), PrimChecks.turtle.getTurtleOfBreed(1333, 1337, "PAGES", 10)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1268, 1285, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1238, 1241, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1346, 1349, 1904, PrimChecks.turtle.getTurtleOfBreed(1350, 1354, "PAGES", 5)), function() {
    PrimChecks.turtleOrLink.setVariable(1363, 1368, "color", 55);
    var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(PrimChecks.turtle.getTurtleOfBreed(1392, 1396, "PAGES", 4), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1375, 1391, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1346, 1349, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(1413, 1417, world.turtleManager.turtlesOfBreed("PAGES"), function() { return Prims.gt(PrimChecks.turtle.getVariable(1419, 1422, "who"), 5); }), function() { PrimChecks.turtleOrLink.setVariable(1434, 1439, "color", 115); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1403, 1406, R); return R; }
}))
ProcedurePrims.defineCommand("create-network-example-2", 1457, 1982, (function() {
  world.turtleManager.createTurtles(8, "PAGES");
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1501, 1504, 1904, PrimChecks.turtle.getTurtleOfBreed(1505, 1509, "PAGES", 0)), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1501, 1504, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1522, 1525, 1904, PrimChecks.turtle.getTurtleOfBreed(1526, 1530, "PAGES", 1)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1554, 1564, PrimChecks.turtle.getTurtleOfBreed(1565, 1569, "PAGES", 2), PrimChecks.turtle.getTurtleOfBreed(1572, 1576, "PAGES", 3), PrimChecks.turtle.getTurtleOfBreed(1579, 1583, "PAGES", 5), PrimChecks.turtle.getTurtleOfBreed(1586, 1590, "PAGES", 6)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1535, 1552, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1522, 1525, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1598, 1601, 1904, PrimChecks.turtle.getTurtleOfBreed(1602, 1606, "PAGES", 2)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1630, 1640, PrimChecks.turtle.getTurtleOfBreed(1641, 1645, "PAGES", 1), PrimChecks.turtle.getTurtleOfBreed(1648, 1652, "PAGES", 3), PrimChecks.turtle.getTurtleOfBreed(1655, 1659, "PAGES", 4)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1611, 1628, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1598, 1601, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1667, 1670, 1904, PrimChecks.turtle.getTurtleOfBreed(1671, 1675, "PAGES", 3)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1699, 1709, PrimChecks.turtle.getTurtleOfBreed(1710, 1714, "PAGES", 1), PrimChecks.turtle.getTurtleOfBreed(1717, 1721, "PAGES", 4), PrimChecks.turtle.getTurtleOfBreed(1724, 1728, "PAGES", 5)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1680, 1697, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1667, 1670, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1736, 1739, 1904, PrimChecks.turtle.getTurtleOfBreed(1740, 1744, "PAGES", 4)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1768, 1778, PrimChecks.turtle.getTurtleOfBreed(1779, 1783, "PAGES", 1), PrimChecks.turtle.getTurtleOfBreed(1786, 1790, "PAGES", 5)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1749, 1766, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1736, 1739, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1798, 1801, 1904, PrimChecks.turtle.getTurtleOfBreed(1802, 1806, "PAGES", 5)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1830, 1840, PrimChecks.turtle.getTurtleOfBreed(1841, 1845, "PAGES", 1), PrimChecks.turtle.getTurtleOfBreed(1848, 1852, "PAGES", 4), PrimChecks.turtle.getTurtleOfBreed(1855, 1859, "PAGES", 6), PrimChecks.turtle.getTurtleOfBreed(1862, 1866, "PAGES", 7)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1811, 1828, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1798, 1801, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1874, 1877, 1904, PrimChecks.turtle.getTurtleOfBreed(1878, 1882, "PAGES", 6)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1906, 1916, PrimChecks.turtle.getTurtleOfBreed(1917, 1921, "PAGES", 5)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1887, 1904, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1874, 1877, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1929, 1932, 1904, PrimChecks.turtle.getTurtleOfBreed(1933, 1937, "PAGES", 7)), function() {
    var R = ProcedurePrims.ask(LinkPrims.createLinksFrom(PrimChecks.agentset.turtleSet(1961, 1971, PrimChecks.turtle.getTurtleOfBreed(1972, 1976, "PAGES", 1)), "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1942, 1959, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1929, 1932, R); return R; }
}))
ProcedurePrims.defineCommand("create-network-preferential", 1990, 2091, (function(n, k) {
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(n, "PAGES"), function() { PrimChecks.turtleOrLink.setVariable(2049, 2054, "color", 95); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2028, 2040, R); return R; }
  var R = ProcedurePrims.callCommand("link-preferentially", world.turtleManager.turtlesOfBreed("PAGES"), k); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("link-preferentially", 2210, 3891, (function(nodeset, k) {
  let nodeHlist = PrimChecks.list.sort(PrimChecks.validator.checkArg('SORT', 2293, 2297, 120, nodeset)); ProcedurePrims.stack().currentContext().registerStringRunVar("NODE-LIST", nodeHlist);
  let neighborHchoiceHlist = PrimChecks.list.sublist(2378, 2385, PrimChecks.validator.checkArg('SUBLIST', 2378, 2385, 8, nodeHlist), 0, PrimChecks.validator.checkArg('SUBLIST', 2378, 2385, 1, k)); ProcedurePrims.stack().currentContext().registerStringRunVar("NEIGHBOR-CHOICE-LIST", neighborHchoiceHlist);
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2428, 2431, 1904, PrimChecks.list.item(2432, 2436, PrimChecks.validator.checkArg('ITEM', 2432, 2436, 1, k), PrimChecks.validator.checkArg('ITEM', 2432, 2436, 12, nodeHlist))), function() {
    var R = PrimChecks.task.forEach(2544, 2551, PrimChecks.validator.checkArg('FOREACH', 2544, 2551, 8, neighborHchoiceHlist), PrimChecks.task.checked(2573, 2574, function(neighbor) {
      PrimChecks.procedure.runArgCountCheck('run', 2573, 2692, 1, arguments.length);
      if (Prims.equality(RandomPrims.randomLong(2), 0)) {
        var R = ProcedurePrims.ask(LinkPrims.createLinkTo(neighbor, "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2623, 2637, R); return R; }
      }
      else {
        var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(neighbor, "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2659, 2675, R); return R; }
      }
    }, "[ neighbor -> ifelse random 2 = 0 [ create-link-to neighbor ] [ create-link-from neighbor ] ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2544, 2551, R); return R; }
    neighborHchoiceHlist = ListPrims.sentence(PrimChecks.task.nValues(2797, 2805, PrimChecks.validator.checkArg('N-VALUES', 2797, 2805, 1, k), PrimChecks.task.checked(2808, 2809, function() { return SelfManager.self(); }, "[ self ]", true, false)), neighborHchoiceHlist); ProcedurePrims.stack().currentContext().updateStringRunVar("NEIGHBOR-CHOICE-LIST", neighborHchoiceHlist);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2428, 2431, R); return R; }
  var R = PrimChecks.task.forEach(2894, 2901, PrimChecks.list.sublist(2902, 2909, PrimChecks.validator.checkArg('SUBLIST', 2902, 2909, 8, nodeHlist), PrimChecks.math.plus(2923, 2924, PrimChecks.validator.checkArg('+', 2923, 2924, 1, k), 1), PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 2929, 2935, 12, nodeHlist))), PrimChecks.task.checked(2947, 2948, function(node) {
    PrimChecks.procedure.runArgCountCheck('run', 2947, 3890, 1, arguments.length);
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2961, 2964, 1904, node), function() {
      let tempHneighborHlist = neighborHchoiceHlist; ProcedurePrims.stack().currentContext().registerStringRunVar("TEMP-NEIGHBOR-LIST", tempHneighborHlist);
      for (let _index_3056_3062 = 0, _repeatcount_3056_3062 = StrictMath.floor(k); _index_3056_3062 < _repeatcount_3056_3062; _index_3056_3062++) {
        let neighbor = PrimChecks.list.oneOf(3361, 3367, PrimChecks.validator.checkArg('ONE-OF', 3361, 3367, 120, tempHneighborHlist)); ProcedurePrims.stack().currentContext().registerStringRunVar("NEIGHBOR", neighbor);
        tempHneighborHlist = PrimChecks.list.remove(3418, 3424, neighbor, PrimChecks.validator.checkArg('REMOVE', 3418, 3424, 12, tempHneighborHlist)); ProcedurePrims.stack().currentContext().updateStringRunVar("TEMP-NEIGHBOR-LIST", tempHneighborHlist);
        neighborHchoiceHlist = PrimChecks.list.fput(neighbor, PrimChecks.validator.checkArg('FPUT', 3651, 3655, 8, neighborHchoiceHlist)); ProcedurePrims.stack().currentContext().updateStringRunVar("NEIGHBOR-CHOICE-LIST", neighborHchoiceHlist);
        if (Prims.equality(RandomPrims.randomLong(2), 0)) {
          var R = ProcedurePrims.ask(LinkPrims.createLinkTo(neighbor, "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3726, 3740, R); return R; }
        }
        else {
          var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(neighbor, "LINKS"), function() {}, false); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3764, 3780, R); return R; }
        }
      }
      neighborHchoiceHlist = ListPrims.sentence(PrimChecks.task.nValues(3841, 3849, PrimChecks.validator.checkArg('N-VALUES', 3841, 3849, 1, k), PrimChecks.task.checked(3852, 3853, function() { return SelfManager.self(); }, "[ self ]", true, false)), neighborHchoiceHlist); ProcedurePrims.stack().currentContext().updateStringRunVar("NEIGHBOR-CHOICE-LIST", neighborHchoiceHlist);
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2961, 2964, R); return R; }
  }, "[ node -> ask node [ let temp-neighbor-list neighbor-choice-list repeat k [ let neighbor one-of temp-neighbor-list set temp-neighbor-list remove neighbor temp-neighbor-list set neighbor-choice-list fput neighbor neighbor-choice-list ifelse random 2 = 0 [ create-link-to neighbor ] [ create-link-from neighbor ] ] set neighbor-choice-list sentence n-values k [ self ] neighbor-choice-list ] ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2894, 2901, R); return R; }
}))
ProcedurePrims.defineCommand("do-layout", 3899, 3969, (function() {
  LayoutManager.layoutSpring(world.turtleManager.turtlesOfBreed("PAGES"), world.links(), 0.2, PrimChecks.math.div(3944, 3945, 20, PrimChecks.math.sqrt(3947, 3951, PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PAGES")))), 0.5);
}))
ProcedurePrims.defineCommand("go", 4006, 6777, (function() {
  if (Prims.equality(world.observer.getGlobal("calculation-method"), "diffusion")) {
    if (PrimChecks.agentset.any(world.turtleManager.turtlesOfBreed("SURFERS"))) {
      var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("SURFERS"), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4077, 4080, R); return R; }
    }
    var R = ProcedurePrims.ask(world.links(), function() {
      PrimChecks.turtleOrLink.setVariable(4222, 4227, "color", 5);
      PrimChecks.link.setVariable(4237, 4246, "thickness", 0);
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4206, 4209, R); return R; }
    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() { PrimChecks.turtle.setVariable(4271, 4279, "new-rank", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4255, 4258, R); return R; }
    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
      if (PrimChecks.agentset.any(LinkPrims.outLinkNeighbors("LINKS"))) {
        let rankHincrement = PrimChecks.math.div(4472, 4473, PrimChecks.validator.checkArg('/', 4472, 4473, 1, PrimChecks.turtle.getVariable(4467, 4471, "rank")), PrimChecks.agentset.count(LinkPrims.outLinkNeighbors("LINKS"))); ProcedurePrims.stack().currentContext().registerStringRunVar("RANK-INCREMENT", rankHincrement);
        var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("LINKS"), function() {
          PrimChecks.turtle.setVariable(4546, 4554, "new-rank", PrimChecks.math.plus(4564, 4565, PrimChecks.validator.checkArg('+', 4564, 4565, 1, PrimChecks.turtle.getVariable(4555, 4563, "new-rank")), PrimChecks.validator.checkArg('+', 4564, 4565, 1, rankHincrement)));
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4507, 4510, R); return R; }
      }
      else {
        let rankHincrement = PrimChecks.math.div(4736, 4737, PrimChecks.validator.checkArg('/', 4736, 4737, 1, PrimChecks.turtle.getVariable(4731, 4735, "rank")), PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PAGES"))); ProcedurePrims.stack().currentContext().registerStringRunVar("RANK-INCREMENT", rankHincrement);
        var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
          PrimChecks.turtle.setVariable(4784, 4792, "new-rank", PrimChecks.math.plus(4802, 4803, PrimChecks.validator.checkArg('+', 4802, 4803, 1, PrimChecks.turtle.getVariable(4793, 4801, "new-rank")), PrimChecks.validator.checkArg('+', 4802, 4803, 1, rankHincrement)));
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4758, 4761, R); return R; }
      }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4289, 4292, R); return R; }
    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
      PrimChecks.turtle.setVariable(4957, 4961, "rank", PrimChecks.math.plus(4997, 4998, PrimChecks.math.div(4983, 4984, PrimChecks.math.minus(4965, 4966, 1, PrimChecks.validator.checkArg('-', 4965, 4966, 1, world.observer.getGlobal("damping-factor"))), PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("PAGES"))), PrimChecks.math.mult(5014, 5015, PrimChecks.validator.checkArg('*', 5014, 5015, 1, world.observer.getGlobal("damping-factor")), PrimChecks.validator.checkArg('*', 5014, 5015, 1, PrimChecks.turtle.getVariable(5016, 5024, "new-rank")))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4848, 4851, R); return R; }
  }
  else {
    if (Prims.lt(PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("SURFERS")), world.observer.getGlobal("number-of-surfers"))) {
      var R = ProcedurePrims.ask(world.turtleManager.createTurtles(PrimChecks.math.minus(5291, 5292, PrimChecks.validator.checkArg('-', 5291, 5292, 1, world.observer.getGlobal("number-of-surfers")), PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("SURFERS"))), "SURFERS"), function() {
        PrimChecks.turtle.setVariable(5327, 5339, "current-page", PrimChecks.list.oneOf(5340, 5346, world.turtleManager.turtlesOfBreed("PAGES")));
        if (world.observer.getGlobal("watch-surfers?")) {
          var R = ProcedurePrims.callCommand("move-surfer"); if (R === DeathInterrupt) { return R; }
        }
        else {
          SelfManager.self().hideTurtle(true);
        }
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5258, 5272, R); return R; }
    }
    if (Prims.gt(PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("SURFERS")), world.observer.getGlobal("number-of-surfers"))) {
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5498, 5501, 1904, PrimChecks.list.nOf(5502, 5506, PrimChecks.math.minus(5522, 5523, PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed("SURFERS")), PrimChecks.validator.checkArg('-', 5522, 5523, 1, world.observer.getGlobal("number-of-surfers"))), world.turtleManager.turtlesOfBreed("SURFERS"))), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5498, 5501, R); return R; }
    }
    var R = ProcedurePrims.ask(world.links(), function() {
      PrimChecks.turtleOrLink.setVariable(5636, 5641, "color", 5);
      PrimChecks.link.setVariable(5651, 5660, "thickness", 0);
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5620, 5623, R); return R; }
    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("SURFERS"), function() {
      let oldHpage = PrimChecks.turtle.getVariable(5703, 5715, "current-page"); ProcedurePrims.stack().currentContext().registerStringRunVar("OLD-PAGE", oldHpage);
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5773, 5776, 1904, PrimChecks.turtle.getVariable(5777, 5789, "current-page")), function() {
        PrimChecks.turtle.setVariable(5796, 5802, "visits", PrimChecks.math.plus(5810, 5811, PrimChecks.validator.checkArg('+', 5810, 5811, 1, PrimChecks.turtle.getVariable(5803, 5809, "visits")), 1));
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5773, 5776, R); return R; }
      if ((Prims.lte(PrimChecks.math.randomFloat(1), world.observer.getGlobal("damping-factor")) && PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 6021, 6025, 112, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 6041, 6043, 1904, PrimChecks.turtle.getVariable(6044, 6056, "current-page")), function() { return LinkPrims.myOutLinks("LINKS"); }))))) {
        PrimChecks.turtle.setVariable(6069, 6081, "current-page", PrimChecks.list.oneOf(6082, 6088, PrimChecks.validator.checkArg('ONE-OF', 6082, 6088, 120, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 6110, 6112, 1904, PrimChecks.turtle.getVariable(6113, 6125, "current-page")), function() { return LinkPrims.outLinkNeighbors("LINKS"); }))));
      }
      else {
        PrimChecks.turtle.setVariable(6140, 6152, "current-page", PrimChecks.list.oneOf(6153, 6159, world.turtleManager.turtlesOfBreed("PAGES")));
      }
      if (world.observer.getGlobal("watch-surfers?")) {
        SelfManager.self().hideTurtle(false);
        var R = ProcedurePrims.callCommand("move-surfer"); if (R === DeathInterrupt) { return R; }
        let surferHcolor = PrimChecks.turtleOrLink.getVariable(6304, 6309, "color"); ProcedurePrims.stack().currentContext().registerStringRunVar("SURFER-COLOR", surferHcolor);
        var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6318, 6321, 1904, oldHpage), function() {
          let traveledHlink = LinkPrims.outLinkTo("LINKS", PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtle.getVariable(6374, 6386, "current-page"); })); ProcedurePrims.stack().currentContext().registerStringRunVar("TRAVELED-LINK", traveledHlink);
          if (!Prims.equality(traveledHlink, Nobody)) {
            var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6449, 6452, 1904, traveledHlink), function() {
              PrimChecks.turtleOrLink.setVariable(6473, 6478, "color", surferHcolor);
              PrimChecks.link.setVariable(6496, 6505, "thickness", 0.08);
            }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6449, 6452, R); return R; }
          }
        }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6318, 6321, R); return R; }
      }
      else {
        SelfManager.self().hideTurtle(true);
      }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5670, 5673, R); return R; }
    let totalHvisits = PrimChecks.list.sum(6628, 6631, PrimChecks.validator.checkArg('SUM', 6628, 6631, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PAGES"), function() { return PrimChecks.turtle.getVariable(6633, 6639, "visits"); }))); ProcedurePrims.stack().currentContext().registerStringRunVar("TOTAL-VISITS", totalHvisits);
    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
      PrimChecks.turtle.setVariable(6676, 6680, "rank", PrimChecks.math.div(6688, 6689, PrimChecks.validator.checkArg('/', 6688, 6689, 1, PrimChecks.turtle.getVariable(6681, 6687, "visits")), PrimChecks.validator.checkArg('/', 6688, 6689, 1, totalHvisits)));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6654, 6657, R); return R; }
  }
  var R = ProcedurePrims.callCommand("update-globals"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PAGES"), function() {
    var R = ProcedurePrims.callCommand("update-page-appearance"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6733, 6736, R); return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("move-surfer", 6785, 6860, (function() {
  SelfManager.self().face(PrimChecks.validator.checkArg('FACE', 6819, 6823, 768, PrimChecks.turtle.getVariable(6824, 6836, "current-page")));
  SelfManager.self().moveTo(PrimChecks.turtle.getVariable(6847, 6859, "current-page"));
}))
ProcedurePrims.defineCommand("update-globals", 6868, 6955, (function() {
  world.observer.setGlobal("total-rank", PrimChecks.list.sum(6900, 6903, PrimChecks.validator.checkArg('SUM', 6900, 6903, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PAGES"), function() { return PrimChecks.turtle.getVariable(6905, 6909, "rank"); }))));
  world.observer.setGlobal("max-rank", PrimChecks.list.max(6935, 6938, PrimChecks.validator.checkArg('MAX', 6935, 6938, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PAGES"), function() { return PrimChecks.turtle.getVariable(6940, 6944, "rank"); }))));
}))
ProcedurePrims.defineCommand("update-page-appearance", 6963, 7177, (function() {
  PrimChecks.turtle.setVariable(7044, 7048, "size", PrimChecks.math.plus(7053, 7054, 0.2, PrimChecks.math.mult(7057, 7058, 4, PrimChecks.math.sqrt(7059, 7063, PrimChecks.math.div(7070, 7071, PrimChecks.validator.checkArg('/', 7070, 7071, 1, PrimChecks.turtle.getVariable(7065, 7069, "rank")), PrimChecks.validator.checkArg('/', 7070, 7071, 1, world.observer.getGlobal("total-rank")))))));
  if (world.observer.getGlobal("show-page-ranks?")) {
    PrimChecks.turtleOrLink.setVariable(7118, 7123, "label", StringPrims.word(PrimChecks.math.precision(PrimChecks.validator.checkArg('PRECISION', 7130, 7139, 1, PrimChecks.turtle.getVariable(7140, 7144, "rank")), 3), "     "));
  }
  else {
    PrimChecks.turtleOrLink.setVariable(7166, 7171, "label", "");
  }
}))
world.observer.setGlobal("damping-factor", 0.85);
world.observer.setGlobal("calculation-method", "random-surfer");
world.observer.setGlobal("watch-surfers?", true);
world.observer.setGlobal("number-of-surfers", 5);
world.observer.setGlobal("network-choice", "Example 1");
world.observer.setGlobal("show-page-ranks?", true);