var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"clocker":{"name":"clocker","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,105,135,135,165,165,195],"ycors":[30,195,180,270,270,180,195],"type":"polygon","color":"rgba(167, 27, 106, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = 'Pressure vs. Time';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(25, 1, PenBundle.DisplayMode.Line), function() {}, function() {})];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "time", "pressure", false, true, true, 0, 20, 0, 100, setup, update);
})(), (function() {
  var name    = 'Wall Hits per Particle';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('default', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {})];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "", "", false, true, true, 0, 20, 0, 1, setup, update);
})(), (function() {
  var name    = 'Energy Histogram';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('fast', plotOps.makePenOps, false, new PenBundle.State(15, 10, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('medium', plotOps.makePenOps, false, new PenBundle.State(55, 10, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('slow', plotOps.makePenOps, false, new PenBundle.State(105, 10, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('avg-energy', plotOps.makePenOps, false, new PenBundle.State(5, 1, PenBundle.DisplayMode.Line), function() {}, function() {}),
  new PenBundle.Pen('init-avg-energy', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {})];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "Energy", "Number", true, false, false, 0, 400, 0, 10, setup, update);
})(), (function() {
  var name    = 'Speed Counts';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('fast', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Line), function() {}, function() {}),
  new PenBundle.Pen('medium', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Line), function() {}, function() {}),
  new PenBundle.Pen('slow', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Line), function() {}, function() {})];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "time", "count", false, true, true, 0, 20, 0, 100, setup, update);
})(), (function() {
  var name    = 'Speed Histogram';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('fast', plotOps.makePenOps, false, new PenBundle.State(15, 5, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('medium', plotOps.makePenOps, false, new PenBundle.State(55, 5, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('slow', plotOps.makePenOps, false, new PenBundle.State(105, 5, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('avg-speed', plotOps.makePenOps, false, new PenBundle.State(5, 1, PenBundle.DisplayMode.Line), function() {}, function() {}),
  new PenBundle.Pen('init-avg-speed', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {})];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "Speed", "Number", true, false, false, 0, 50, 0, 100, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "particles", singular: "particle", varNames: ["speed", "mass", "energy", "wall-hits", "momentum-difference", "last-collision"] }, { name: "flashes", singular: "flash", varNames: ["birthday"] }, { name: "clockers", singular: "clocker", varNames: [] }])([], [])('globals [   result   tick-length          ;; clock variable   box-edge                   ;; distance of box edge from axes   pressure   pressure-history   zero-pressure-count        ;; how many zero entries are in pressure-history   wall-hits-per-particle     ;; average number of wall hits per particle   length-horizontal-surface  ;; the size of the wall surfaces that run horizontally - the top and bottom of the box   length-vertical-surface    ;; the size of the wall surfaces that run vertically - the left and right of the box    init-avg-speed init-avg-energy  ;; initial averages   avg-speed avg-energy            ;; current averages   fast medium slow                ;; current counts    fade-needed? ]  breed [ particles particle ] breed [ flashes flash ] breed [clockers clocker ]  flashes-own [birthday]  particles-own [   speed mass energy          ;; particle info   wall-hits                  ;; # of wall hits during this clock cycle (\"big tick\")   momentum-difference        ;; used to calculate pressure from wall hits   last-collision ]  to benchmark   random-seed 361   reset-timer   setup   repeat 17000 [ go ]   set result timer end  to setup   ca reset-ticks   set-default-shape particles \"circle\"   set fade-needed? false   ;; box has constant size...   set box-edge (max-pxcor - 1)   ;;; the length of the horizontal or vertical surface of   ;;; the inside of the box must exclude the two patches   ;; that are the where the perpendicular walls join it,   ;;; but must also add in the axes as an additional patch   ;;; example:  a box with an box-edge of 10, is drawn with   ;;; 19 patches of wall space on the inside of the box   set length-horizontal-surface  ( 2 * (box-edge - 1) + 1)   set length-vertical-surface  ( 2 * (box-edge - 1) + 1)   make-box   make-particles   make-clocker   set pressure-history []   set zero-pressure-count 0   update-variables   set init-avg-speed avg-speed   set init-avg-energy avg-energy   setup-plotz   setup-histograms   do-plotting end  to update-variables   set medium count particles with [color = green]   set slow   count particles with [color = blue]   set fast   count particles with [color = red]   set avg-speed  mean [speed] of particles   set avg-energy mean [energy] of particles end  to go   ask particles [ bounce ]   ask particles [ move ]   ask particles [ if collide? [check-for-collision] ]   if trace?   [ ask particle 0      [ set pcolor gray set fade-needed? true ]   ]   let old-clock ticks   tick-advance tick-length   if floor ticks > floor (ticks - tick-length)   [     ifelse any? particles       [ set wall-hits-per-particle mean [wall-hits] of particles ]       [ set wall-hits-per-particle 0 ]     ask particles       [ set wall-hits 0 ]     if fade-needed? [fade-patches]     calculate-pressure     update-variables     do-plotting   ]   calculate-tick-length   ask clockers [ set heading ticks * 360 ]   ask flashes with [ticks - birthday > 0.4]   [     set pcolor yellow     die   ]   display end  to calculate-tick-length   ifelse any? particles with [speed > 0]     [ set tick-length 1 / (ceiling max [speed] of particles) ]     [ set tick-length 1 ] end  ;;; Pressure is defined as the force per unit area.  In this context, ;;; that means the total momentum per unit time transferred to the walls ;;; by particle hits, divided by the surface area of the walls.  (Here ;;; we\'re in a two dimensional world, so the \"surface area\" of the walls ;;; is just their length.)  Each wall contributes a different amount ;;; to the total pressure in the box, based on the number of collisions, the ;;; direction of each collision, and the length of the wall.  Conservation of momentum ;;; in hits ensures that the difference in momentum for the particles is equal to and ;;; opposite to that for the wall.  The force on each wall is the rate of change in ;;; momentum imparted to the wall, or the sum of change in momentum for each particle: ;;; F = SUM  [d(mv)/dt] = SUM [m(dv/dt)] = SUM [ ma ], in a direction perpendicular to ;;; the wall surface.  The pressure (P) on a given wall is the force (F) applied to that ;;; wall over its surface area.  The total pressure in the box is sum of each wall\'s ;;; pressure contribution.  to calculate-pressure   ;; by summing the momentum change for each particle,   ;; the wall\'s total momentum change is calculated   set pressure 15 * sum [momentum-difference] of particles   set pressure-history lput pressure pressure-history   set zero-pressure-count length filter [ [p] -> p = 0] pressure-history   ask particles     [ set momentum-difference 0 ]  ;; once the contribution to momentum has been calculated                                    ;; this value is reset to zero till the next wall hit end  to bounce  ;; particle procedure   ;; if we\'re not about to hit a wall (yellow patch), or if we\'re already on a   ;; wall, we don\'t need to do any further checks   if shade-of? yellow pcolor     [ stop ]   let new-patch patch-ahead 1   let new-px [pxcor] of new-patch   let new-py [pycor] of new-patch   if not shade-of? yellow [pcolor] of new-patch     [ stop ]   ;; get the coordinates of the patch we\'ll be on if we go forward 1   if (abs new-px != box-edge and abs new-py != box-edge)     [stop]   ;; if hitting left or right wall, reflect heading around x axis   if (abs new-px = box-edge)     [ set heading (- heading)       set wall-hits wall-hits + 1   ;;  if the particle is hitting a vertical wall, only the horizontal component of the speed   ;;  vector can change.  The change in velocity for this component is 2 * the speed of the particle,   ;; due to the reversing of direction of travel from the collision with the wall       set momentum-difference momentum-difference + (abs (sin heading * 2 * mass * speed) / length-vertical-surface) ]   ;; if hitting top or bottom wall, reflect heading around y axis   if (abs new-py = box-edge)     [ set heading (180 - heading)       set wall-hits wall-hits + 1   ;;  if the particle is hitting a horizontal wall, only the vertical component of the speed   ;;  vector can change.  The change in velocity for this component is 2 * the speed of the particle,   ;; due to the reversing of direction of travel from the collision with the wall       set momentum-difference momentum-difference + (abs (cos heading * 2 * mass * speed) / length-horizontal-surface)  ]     ask patch new-px new-py     [ sprout-flashes 1 [ ht                  set birthday ticks                  set pcolor yellow - 3 ] ] end  to move  ;; particle procedure   let old-patch patch-here   jump (speed * tick-length)   if patch-here != old-patch     [ set last-collision nobody ] end  to check-for-collision  ;; particle procedure   ;; Here we impose a rule that collisions only take place when there   ;; are exactly two particles per patch.  We do this because when the   ;; student introduces new particles from the side, we want them to   ;; form a uniform wavefront.   ;;   ;; Why do we want a uniform wavefront?  Because it is actually more   ;; realistic.  (And also because the curriculum uses the uniform   ;; wavefront to help teach the relationship between particle collisions,   ;; wall hits, and pressure.)   ;;   ;; Why is it realistic to assume a uniform wavefront?  Because in reality,   ;; whether a collision takes place would depend on the actual headings   ;; of the particles, not merely on their proximity.  Since the particles   ;; in the wavefront have identical speeds and near-identical headings,   ;; in reality they would not collide.  So even though the two-particles   ;; rule is not itself realistic, it produces a realistic result.  Also,   ;; unless the number of particles is extremely large, it is very rare   ;; for three or more particles to land on the same patch (for example,   ;; with 400 particles it happens less than 1% of the time).  So imposing   ;; this additional rule should have only a negligible effect on the   ;; aggregate behavior of the system.   ;;   ;; Why does this rule produce a uniform wavefront?  The particles all   ;; start out on the same patch, which means that without the only-two   ;; rule, they would all start colliding with each other immediately,   ;; resulting in much random variation of speeds and headings.  With   ;; the only-two rule, they are prevented from colliding with each other   ;; until they have spread out a lot.  (And in fact, if you observe   ;; the wavefront closely, you will see that it is not completely smooth,   ;; because some collisions eventually do start occurring when it thins out while fanning.)    if count other particles-here = 1   [     ;; the following conditions are imposed on collision candidates:     ;;   1. they must have a lower who number than my own, because collision     ;;      code is asymmetrical: it must always happen from the point of view     ;;      of just one particle.     ;;   2. they must not be the same particle that we last collided with on     ;;      this patch, so that we have a chance to leave the patch after we\'ve     ;;      collided with someone.     let candidate one-of other particles-here with       [who < [who] of myself and myself != last-collision]     ;; we also only collide if one of us has non-zero speed. It\'s useless     ;; (and incorrect, actually) for two particles with zero speed to collide.     if (candidate != nobody) and (speed > 0 or [speed] of candidate > 0)     [       collide-with candidate       set last-collision candidate       ask candidate [ set last-collision myself ]     ]   ] end  ;; implements a collision with another particle. ;; ;; THIS IS THE HEART OF THE PARTICLE SIMULATION, AND YOU ARE STRONGLY ADVISED ;; NOT TO CHANGE IT UNLESS YOU REALLY UNDERSTAND WHAT YOU\'RE DOING! ;; ;; The two particles colliding are self and other-particle, and while the ;; collision is performed from the point of view of self, both particles are ;; modified to reflect its effects. This is somewhat complicated, so I\'ll ;; give a general outline here: ;;   1. Do initial setup, and determine the heading between particle centers ;;      (call it theta). ;;   2. Convert the representation of the velocity of each particle from ;;      speed/heading to a theta-based vector whose first component is the ;;      particle\'s speed along theta, and whose second component is the speed ;;      perpendicular to theta. ;;   3. Modify the velocity vectors to reflect the effects of the collision. ;;      This involves: ;;        a. computing the velocity of the center of mass of the whole system ;;           along direction theta ;;        b. updating the along-theta components of the two velocity vectors. ;;   4. Convert from the theta-based vector representation of velocity back to ;;      the usual speed/heading representation for each particle. ;;   5. Perform final cleanup and update derived quantities. to collide-with [ other-particle ] ;; particle procedure    ;;; PHASE 1: initial setup    ;; for convenience, grab some quantities from other-particle   let mass2 [mass] of other-particle   let speed2 [speed] of other-particle   let heading2 [heading] of other-particle    ;; since particles are modeled as zero-size points, theta isn\'t meaningfully   ;; defined. we can assign it randomly without affecting the model\'s outcome.   let theta (random-float 360)      ;;; PHASE 2: convert velocities to theta-based vector representation    ;; now convert my velocity from speed/heading representation to components   ;; along theta and perpendicular to theta   let v1t (speed * cos (theta - heading))   let v1l (speed * sin (theta - heading))    ;; do the same for other-particle   let v2t (speed2 * cos (theta - heading2))   let v2l (speed2 * sin (theta - heading2))      ;;; PHASE 3: manipulate vectors to implement collision    ;; compute the velocity of the system\'s center of mass along theta   let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )    ;; now compute the new velocity for each particle along direction theta.   ;; velocity perpendicular to theta is unaffected by a collision along theta,   ;; so the next two lines actually implement the collision itself, in the   ;; sense that the effects of the collision are exactly the following changes   ;; in particle velocity.   set v1t (2 * vcm - v1t)   set v2t (2 * vcm - v2t)      ;;; PHASE 4: convert back to normal speed/heading    ;; now convert my velocity vector into my new speed and heading   set speed sqrt ((v1t * v1t) + (v1l * v1l))   set energy (0.5 * mass * speed * speed)   ;; if the magnitude of the velocity vector is 0, atan is undefined. but   ;; speed will be 0, so heading is irrelevant anyway. therefore, in that   ;; case we\'ll just leave it unmodified.   if v1l != 0 or v1t != 0     [ set heading (theta - (atan v1l v1t)) ]    ;; and do the same for other-particle   ask other-particle [ set speed sqrt ((v2t * v2t) + (v2l * v2l)) ]   ask other-particle [ set energy 0.5 * mass * speed * speed ]   if v2l != 0 or v2t != 0     [ ask other-particle [ set heading (theta - (atan v2l v2t)) ] ]      ;; PHASE 5: final updates    ;; now recolor, since color is based on quantities that may have changed   recolor   ask other-particle     [ recolor ] end  to recolor  ;; particle procedure   ifelse speed < (0.5 * 10)   [     set color blue   ]   [     ifelse speed > (1.5 * 10)       [ set color red ]       [ set color green ]   ] end  to fade-patches   let trace-patches patches with [(pcolor != yellow) and (pcolor != black)]   ifelse any? trace-patches     [ ask trace-patches       [ set pcolor ( pcolor - 0.4 )         if (not trace?) or (round pcolor = black)           [ set pcolor black ] ] ]     [ set fade-needed? false ] end  ;;; ;;; drawing procedures ;;;  ;; draws the box to make-box   ask patches with [ ((abs pxcor = box-edge) and (abs pycor <= box-edge)) or                      ((abs pycor = box-edge) and (abs pxcor <= box-edge)) ]     [ set pcolor yellow ] end  ;; creates initial particles to make-particles   create-ordered-particles number-of-particles   [     setup-particle     random-position     recolor   ]   calculate-tick-length end   to setup-particle  ;; particle procedure   set speed init-particle-speed   set mass particle-mass   set energy (0.5 * mass * speed * speed)   set last-collision nobody   set wall-hits 0   set momentum-difference 0 end  ;; place particle at random location inside the box. to random-position ;; particle procedure   setxy ((1 - box-edge) + random-float ((2 * box-edge) - 2))         ((1 - box-edge) + random-float ((2 * box-edge) - 2))   set heading random-float 360 end  ;;; plotting procedures  to setup-plotz   set-current-plot \"Speed Counts\"   set-plot-y-range 0 ceiling (number-of-particles / 6) end  to setup-histograms   set-current-plot \"Speed Histogram\"   set-plot-x-range 0 (init-particle-speed * 2)   set-plot-y-range 0 ceiling (number-of-particles / 6)   set-current-plot-pen \"medium\"   set-histogram-num-bars 40   set-current-plot-pen \"slow\"   set-histogram-num-bars 40   set-current-plot-pen \"fast\"   set-histogram-num-bars 40   set-current-plot-pen \"init-avg-speed\"   draw-vert-line init-avg-speed    set-current-plot \"Energy Histogram\"   set-plot-x-range 0 (0.5 * (init-particle-speed * 2) * (init-particle-speed * 2) * particle-mass)   set-plot-y-range 0 ceiling (number-of-particles / 6)   set-current-plot-pen \"medium\"   set-histogram-num-bars 40   set-current-plot-pen \"slow\"   set-histogram-num-bars 40   set-current-plot-pen \"fast\"   set-histogram-num-bars 40   set-current-plot-pen \"init-avg-energy\"   draw-vert-line init-avg-energy end   to do-plotting   set-current-plot \"Pressure vs. Time\"   if length pressure-history > 0     [ plotxy ticks (mean last-n 3 pressure-history) ]    set-current-plot \"Speed Counts\"   set-current-plot-pen \"fast\"   plot fast   set-current-plot-pen \"medium\"   plot medium   set-current-plot-pen \"slow\"   plot slow    if ticks > 1   [      set-current-plot \"Wall Hits per Particle\"      plotxy ticks wall-hits-per-particle   ]    plot-histograms end   to plot-histograms   set-current-plot \"Energy histogram\"   set-current-plot-pen \"fast\"   histogram [ energy ] of particles with [color = red]   set-current-plot-pen \"medium\"   histogram [ energy ] of particles with [color = green]   set-current-plot-pen \"slow\"   histogram [ energy ] of particles with [color = blue]   set-current-plot-pen \"avg-energy\"   plot-pen-reset   draw-vert-line avg-energy    set-current-plot \"Speed histogram\"   set-current-plot-pen \"fast\"   histogram [ speed ] of particles with [color = red]   set-current-plot-pen \"medium\"   histogram [ speed ] of particles with [color = green]   set-current-plot-pen \"slow\"   histogram [ speed ] of particles with [color = blue]   set-current-plot-pen \"avg-speed\"   plot-pen-reset   draw-vert-line avg-speed end  ;; histogram procedure to draw-vert-line [ xval ]   plotxy xval plot-y-min   plot-pen-down   plotxy xval plot-y-max   plot-pen-up end  to-report last-n [n the-list]   ifelse n >= length the-list     [ report the-list ]     [ report last-n n butfirst the-list ] end  to make-clocker   set-default-shape clockers \"clocker\"   create-ordered-clockers 1   [     setxy (box-edge - 5) (box-edge - 5)     set color violet + 2     set size 10     set heading 0   ] end')([{"x":325,"y":11,"width":412,"height":413,"dimensions":{"minPxcor":-50,"maxPxcor":50,"minPycor":-50,"maxPycor":50,"patchSize":4,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":7,"y":43,"width":86,"height":33,"oldSize":true,"display":"go/stop","forever":true,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":7,"y":10,"width":86,"height":33,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1000; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"number-of-particles","x":95,"y":10,"width":207,"height":33,"oldSize":true,"display":"number-of-particles","min":"0","max":"1000","default":150,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"default","interval":1,"mode":0,"color":-955883,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Pressure vs. Time","x":742,"y":11,"width":238,"height":179,"oldSize":true,"xAxis":"time","yAxis":"pressure","xmin":0,"xmax":20,"ymin":0,"ymax":100,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"default","interval":1,"mode":0,"color":-955883,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"pressure\"); })","type":"monitor","source":"pressure","x":155,"y":207,"width":84,"height":45,"oldSize":true,"display":"pressure","precision":0,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"wall-hits-per-particle\"); })","type":"monitor","source":"wall-hits-per-particle","x":9,"y":207,"width":140,"height":45,"oldSize":true,"display":"wall hits per particle","precision":2,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"default","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Wall Hits per Particle","x":742,"y":192,"width":238,"height":169,"oldSize":true,"xmin":0,"xmax":20,"ymin":0,"ymax":1,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"default","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"avg-speed\"); })","type":"monitor","source":"avg-speed","x":70,"y":154,"width":79,"height":45,"oldSize":true,"precision":2,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"fast","interval":10,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"medium","interval":10,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"slow","interval":10,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"avg-energy","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"init-avg-energy","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Energy Histogram","x":312,"y":455,"width":290,"height":196,"oldSize":true,"xAxis":"Energy","yAxis":"Number","xmin":0,"xmax":400,"ymin":0,"ymax":10,"autoPlotX":false,"autoPlotY":false,"legendOn":true,"setupCode":"","updateCode":"","pens":[{"display":"fast","interval":10,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"medium","interval":10,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"slow","interval":10,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"avg-energy","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"init-avg-energy","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"avg-energy\"); })","type":"monitor","source":"avg-energy","x":154,"y":154,"width":85,"height":45,"oldSize":true,"precision":2,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"fast","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"medium","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"slow","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Speed Counts","x":9,"y":264,"width":289,"height":185,"oldSize":true,"xAxis":"time","yAxis":"count","xmin":0,"xmax":20,"ymin":0,"ymax":100,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"fast","interval":1,"mode":0,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"medium","interval":1,"mode":0,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"slow","interval":1,"mode":0,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"variable":"collide?","x":96,"y":44,"width":103,"height":33,"oldSize":true,"display":"collide?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"fast","interval":5,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"medium","interval":5,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"slow","interval":5,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"avg-speed","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","type":"pen","display":"init-avg-speed","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"","compilation":{"success":true,"messages":[]}}],"type":"plot","display":"Speed Histogram","x":10,"y":454,"width":294,"height":197,"oldSize":true,"xAxis":"Speed","yAxis":"Number","xmin":0,"xmax":50,"ymin":0,"ymax":100,"autoPlotX":false,"autoPlotY":false,"legendOn":true,"setupCode":"","updateCode":"","pens":[{"display":"fast","interval":5,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"medium","interval":5,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"slow","interval":5,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"avg-speed","interval":1,"mode":0,"color":-7500403,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"init-avg-speed","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"}],"compilation":{"success":true,"messages":[]}}, {"variable":"trace?","x":199,"y":44,"width":103,"height":33,"oldSize":true,"display":"trace?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 20; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"init-particle-speed","x":7,"y":80,"width":173,"height":33,"oldSize":true,"display":"init-particle-speed","min":"1","max":"20","default":10,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 20; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"particle-mass","x":7,"y":114,"width":173,"height":33,"oldSize":true,"display":"particle-mass","min":"1","max":"20","default":5,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"benchmark\"); if (R === StopInterrupt) { return R; }","type":"button","source":"benchmark","x":609,"y":458,"width":171,"height":175,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"result\"); })","type":"monitor","source":"result","x":628,"y":579,"width":139,"height":45,"oldSize":true,"precision":17,"fontSize":11,"compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["number-of-particles", "collide?", "trace?", "init-particle-speed", "particle-mass", "result", "tick-length", "box-edge", "pressure", "pressure-history", "zero-pressure-count", "wall-hits-per-particle", "length-horizontal-surface", "length-vertical-surface", "init-avg-speed", "init-avg-energy", "avg-speed", "avg-energy", "fast", "medium", "slow", "fade-needed?"], ["number-of-particles", "collide?", "trace?", "init-particle-speed", "particle-mass"], [], -50, 50, -50, 50, 4, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("benchmark", 1061, 1152, (function() {
  PrimChecks.math.randomSeed(1073, 1084, 361);
  workspace.timer.reset();
  var R = ProcedurePrims.callCommand("setup"); if (R === DeathInterrupt) { return R; }
  for (let _index_1113_1119 = 0, _repeatcount_1113_1119 = StrictMath.floor(17000); _index_1113_1119 < _repeatcount_1113_1119; _index_1113_1119++) {
    var R = ProcedurePrims.callCommand("go"); if (R === DeathInterrupt) { return R; }
  }
  world.observer.setGlobal("result", workspace.timer.elapsed());
}))
ProcedurePrims.defineCommand("setup", 1160, 1998, (function() {
  world.clearAll();
  world.ticker.reset();
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("PARTICLES").getSpecialName(), "circle")
  world.observer.setGlobal("fade-needed?", false);
  world.observer.setGlobal("box-edge", PrimChecks.math.minus(1303, 1304, world.topology.maxPxcor, 1));
  world.observer.setGlobal("length-horizontal-surface", PrimChecks.math.plus(1709, 1710, PrimChecks.math.mult(1692, 1693, 2, PrimChecks.math.minus(1704, 1705, PrimChecks.validator.checkArg('-', 1704, 1705, 1, world.observer.getGlobal("box-edge")), 1)), 1));
  world.observer.setGlobal("length-vertical-surface", PrimChecks.math.plus(1766, 1767, PrimChecks.math.mult(1749, 1750, 2, PrimChecks.math.minus(1761, 1762, PrimChecks.validator.checkArg('-', 1761, 1762, 1, world.observer.getGlobal("box-edge")), 1)), 1));
  var R = ProcedurePrims.callCommand("make-box"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("make-particles"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("make-clocker"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("pressure-history", []);
  world.observer.setGlobal("zero-pressure-count", 0);
  var R = ProcedurePrims.callCommand("update-variables"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("init-avg-speed", world.observer.getGlobal("avg-speed"));
  world.observer.setGlobal("init-avg-energy", world.observer.getGlobal("avg-energy"));
  var R = ProcedurePrims.callCommand("setup-plotz"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("setup-histograms"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("do-plotting"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("update-variables", 2006, 2257, (function() {
  world.observer.setGlobal("medium", PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(2058, 2063, "color"), 55); }));
  world.observer.setGlobal("slow", PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(2108, 2113, "color"), 105); }));
  world.observer.setGlobal("fast", PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(2157, 2162, "color"), 15); }));
  world.observer.setGlobal("avg-speed", PrimChecks.list.mean(2187, 2191, PrimChecks.validator.checkArg('MEAN', 2187, 2191, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(2193, 2198, "speed"); }))));
  world.observer.setGlobal("avg-energy", PrimChecks.list.mean(2230, 2234, PrimChecks.validator.checkArg('MEAN', 2230, 2234, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(2236, 2242, "energy"); }))));
}))
ProcedurePrims.defineCommand("go", 2265, 2990, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { var R = ProcedurePrims.callCommand("bounce"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2270, 2273, R); return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { var R = ProcedurePrims.callCommand("move"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2297, 2300, R); return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() {
    if (world.observer.getGlobal("collide?")) {
      var R = ProcedurePrims.callCommand("check-for-collision"); if (R === DeathInterrupt) { return R; }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2322, 2325, R); return R; }
  if (world.observer.getGlobal("trace?")) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2390, 2393, 1904, PrimChecks.turtle.getTurtleOfBreed(2394, 2402, "PARTICLES", 0)), function() {
      PrimChecks.patch.setVariable(2416, 2422, "pcolor", 5);
      world.observer.setGlobal("fade-needed?", true);
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2390, 2393, R); return R; }
  }
  let oldHclock = world.ticker.tickCount(); ProcedurePrims.stack().currentContext().registerStringRunVar("OLD-CLOCK", oldHclock);
  world.ticker.tickAdvance(world.observer.getGlobal("tick-length"));
  if (Prims.gt(PrimChecks.math.floor(world.ticker.tickCount()), PrimChecks.math.floor(PrimChecks.math.minus(2537, 2538, world.ticker.tickCount(), PrimChecks.validator.checkArg('-', 2537, 2538, 1, world.observer.getGlobal("tick-length")))))) {
    if (PrimChecks.agentset.any(world.turtleManager.turtlesOfBreed("PARTICLES"))) {
      world.observer.setGlobal("wall-hits-per-particle", PrimChecks.list.mean(2617, 2621, PrimChecks.validator.checkArg('MEAN', 2617, 2621, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(2623, 2632, "wall-hits"); }))));
    }
    else {
      world.observer.setGlobal("wall-hits-per-particle", 0);
    }
    var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { PrimChecks.turtle.setVariable(2718, 2727, "wall-hits", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2692, 2695, R); return R; }
    if (world.observer.getGlobal("fade-needed?")) {
      var R = ProcedurePrims.callCommand("fade-patches"); if (R === DeathInterrupt) { return R; }
    }
    var R = ProcedurePrims.callCommand("calculate-pressure"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("update-variables"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("do-plotting"); if (R === DeathInterrupt) { return R; }
  }
  var R = ProcedurePrims.callCommand("calculate-tick-length"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("CLOCKERS"), function() {
    PrimChecks.turtle.setVariable(2876, 2883, "heading", PrimChecks.math.mult(2890, 2891, world.ticker.tickCount(), 360));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2857, 2860, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(2912, 2916, world.turtleManager.turtlesOfBreed("FLASHES"), function() {
    return Prims.gt(PrimChecks.math.minus(2924, 2925, world.ticker.tickCount(), PrimChecks.validator.checkArg('-', 2924, 2925, 1, PrimChecks.turtle.getVariable(2926, 2934, "birthday"))), 0.4);
  }), function() {
    PrimChecks.patch.setVariable(2954, 2960, "pcolor", 45);
    return SelfManager.self().die();
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2900, 2903, R); return R; }
  Prims.display();
}))
ProcedurePrims.defineCommand("calculate-tick-length", 2998, 3150, (function() {
  if (PrimChecks.agentset.anyWith(null, null, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.gt(PrimChecks.turtle.getVariable(3050, 3055, "speed"), 0); })) {
    world.observer.setGlobal("tick-length", PrimChecks.math.div(3085, 3086, 1, PrimChecks.math.ceil(PrimChecks.list.max(3096, 3099, PrimChecks.validator.checkArg('MAX', 3096, 3099, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(3101, 3106, "speed"); }))))));
  }
  else {
    world.observer.setGlobal("tick-length", 1);
  }
}))
ProcedurePrims.defineCommand("calculate-pressure", 4224, 4733, (function() {
  world.observer.setGlobal("pressure", PrimChecks.math.mult(4368, 4369, 15, PrimChecks.list.sum(4370, 4373, PrimChecks.validator.checkArg('SUM', 4370, 4373, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(4375, 4394, "momentum-difference"); })))));
  world.observer.setGlobal("pressure-history", PrimChecks.list.lput(world.observer.getGlobal("pressure"), PrimChecks.validator.checkArg('LPUT', 4432, 4436, 8, world.observer.getGlobal("pressure-history"))));
  world.observer.setGlobal("zero-pressure-count", PrimChecks.list.length(PrimChecks.list.filter(4496, 4502, PrimChecks.task.checked(4503, 4504, function(p) {
    PrimChecks.procedure.runArgCountCheck('runresult', 4512, 4517, 1, arguments.length);
    return Prims.equality(p, 0);
  }, "[ [p] -> p = 0 ]", true, false), PrimChecks.validator.checkArg('FILTER', 4496, 4502, 8, world.observer.getGlobal("pressure-history")))));
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { PrimChecks.turtle.setVariable(4562, 4581, "momentum-difference", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4538, 4541, R); return R; }
}))
ProcedurePrims.defineCommand("bounce", 4741, 6490, (function() {
  if (ColorModel.areRelatedByShade(45, PrimChecks.patch.getVariable(4922, 4928, "pcolor"))) {
    return PrimChecks.procedure.stop(4935, 4939);
  }
  let newHpatch = SelfManager.self().patchAhead(1); ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-PATCH", newHpatch);
  let newHpx = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4993, 4995, 1904, newHpatch), function() { return PrimChecks.patch.getVariable(4986, 4991, "pxcor"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-PX", newHpx);
  let newHpy = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 5027, 5029, 1904, newHpatch), function() { return PrimChecks.patch.getVariable(5020, 5025, "pycor"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-PY", newHpy);
  if (PrimChecks.math.not(ColorModel.areRelatedByShade(45, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 5075, 5077, 1904, newHpatch), function() { return PrimChecks.patch.getVariable(5067, 5073, "pcolor"); })))) {
    return PrimChecks.procedure.stop(5094, 5098);
  }
  if ((!Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 5176, 5179, 1, newHpx)), world.observer.getGlobal("box-edge")) && !Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 5203, 5206, 1, newHpy)), world.observer.getGlobal("box-edge")))) {
    return PrimChecks.procedure.stop(5232, 5236);
  }
  if (Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 5310, 5313, 1, newHpx)), world.observer.getGlobal("box-edge"))) {
    PrimChecks.turtle.setVariable(5343, 5350, "heading", PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 5352, 5353, 1, PrimChecks.turtle.getVariable(5354, 5361, "heading"))));
    PrimChecks.turtle.setVariable(5373, 5382, "wall-hits", PrimChecks.math.plus(5393, 5394, PrimChecks.validator.checkArg('+', 5393, 5394, 1, PrimChecks.turtle.getVariable(5383, 5392, "wall-hits")), 1));
    PrimChecks.turtle.setVariable(5684, 5703, "momentum-difference", PrimChecks.math.plus(5724, 5725, PrimChecks.validator.checkArg('+', 5724, 5725, 1, PrimChecks.turtle.getVariable(5704, 5723, "momentum-difference")), PrimChecks.math.div(5764, 5765, PrimChecks.math.abs(PrimChecks.math.mult(5755, 5756, PrimChecks.math.mult(5748, 5749, PrimChecks.math.mult(5744, 5745, PrimChecks.math.sin(PrimChecks.validator.checkArg('SIN', 5732, 5735, 1, PrimChecks.turtle.getVariable(5736, 5743, "heading"))), 2), PrimChecks.validator.checkArg('*', 5748, 5749, 1, PrimChecks.turtle.getVariable(5750, 5754, "mass"))), PrimChecks.validator.checkArg('*', 5755, 5756, 1, PrimChecks.turtle.getVariable(5757, 5762, "speed")))), PrimChecks.validator.checkArg('/', 5764, 5765, 1, world.observer.getGlobal("length-vertical-surface")))));
  }
  if (Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 5865, 5868, 1, newHpy)), world.observer.getGlobal("box-edge"))) {
    PrimChecks.turtle.setVariable(5898, 5905, "heading", PrimChecks.math.minus(5911, 5912, 180, PrimChecks.validator.checkArg('-', 5911, 5912, 1, PrimChecks.turtle.getVariable(5913, 5920, "heading"))));
    PrimChecks.turtle.setVariable(5932, 5941, "wall-hits", PrimChecks.math.plus(5952, 5953, PrimChecks.validator.checkArg('+', 5952, 5953, 1, PrimChecks.turtle.getVariable(5942, 5951, "wall-hits")), 1));
    PrimChecks.turtle.setVariable(6243, 6262, "momentum-difference", PrimChecks.math.plus(6283, 6284, PrimChecks.validator.checkArg('+', 6283, 6284, 1, PrimChecks.turtle.getVariable(6263, 6282, "momentum-difference")), PrimChecks.math.div(6323, 6324, PrimChecks.math.abs(PrimChecks.math.mult(6314, 6315, PrimChecks.math.mult(6307, 6308, PrimChecks.math.mult(6303, 6304, PrimChecks.math.cos(PrimChecks.validator.checkArg('COS', 6291, 6294, 1, PrimChecks.turtle.getVariable(6295, 6302, "heading"))), 2), PrimChecks.validator.checkArg('*', 6307, 6308, 1, PrimChecks.turtle.getVariable(6309, 6313, "mass"))), PrimChecks.validator.checkArg('*', 6314, 6315, 1, PrimChecks.turtle.getVariable(6316, 6321, "speed")))), PrimChecks.validator.checkArg('/', 6323, 6324, 1, world.observer.getGlobal("length-horizontal-surface")))));
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 6359, 6362, 1904, world.getPatchAt(PrimChecks.validator.checkArg('PATCH', 6363, 6368, 1, newHpx), PrimChecks.validator.checkArg('PATCH', 6363, 6368, 1, newHpy))), function() {
    var R = ProcedurePrims.ask(SelfManager.self().sprout(1, "FLASHES"), function() {
      SelfManager.self().hideTurtle(true);
      PrimChecks.turtle.setVariable(6432, 6440, "birthday", world.ticker.tickCount());
      PrimChecks.patch.setVariable(6468, 6474, "pcolor", PrimChecks.math.minus(6482, 6483, 45, 3));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6389, 6403, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(6359, 6362, R); return R; }
}))
ProcedurePrims.defineCommand("move", 6498, 6645, (function() {
  let oldHpatch = SelfManager.self().getPatchHere(); ProcedurePrims.stack().currentContext().registerStringRunVar("OLD-PATCH", oldHpatch);
  SelfManager.self().jumpIfAble(PrimChecks.math.mult(6567, 6568, PrimChecks.validator.checkArg('*', 6567, 6568, 1, PrimChecks.turtle.getVariable(6561, 6566, "speed")), PrimChecks.validator.checkArg('*', 6567, 6568, 1, world.observer.getGlobal("tick-length"))));
  if (!Prims.equality(SelfManager.self().getPatchHere(), oldHpatch)) {
    PrimChecks.turtle.setVariable(6621, 6635, "last-collision", Nobody);
  }
}))
ProcedurePrims.defineCommand("check-for-collision", 6653, 9524, (function() {
  if (Prims.equality(SelfPrims._optimalCountOther(SelfManager.self().breedHere("PARTICLES")), 1)) {
    let candidate = PrimChecks.list.oneOf(9076, 9082, PrimChecks.validator.checkArg('ONE-OF', 9076, 9082, 120, PrimChecks.agentset.otherWith(null, null, SelfManager.self().breedHere("PARTICLES"), function() {
      return (Prims.lt(PrimChecks.turtle.getVariable(9116, 9119, "who"), PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtle.getVariable(9123, 9126, "who"); })) && !Prims.equality(SelfManager.myself(), PrimChecks.turtle.getVariable(9152, 9166, "last-collision")));
    }))); ProcedurePrims.stack().currentContext().registerStringRunVar("CANDIDATE", candidate);
    if ((!Prims.equality(candidate, Nobody) && (Prims.gt(PrimChecks.turtle.getVariable(9355, 9360, "speed"), 0) || Prims.gt(PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 9376, 9378, 1904, candidate), function() { return PrimChecks.turtle.getVariable(9369, 9374, "speed"); }), 0)))) {
      var R = ProcedurePrims.callCommand("collide-with", candidate); if (R === DeathInterrupt) { return R; }
      PrimChecks.turtle.setVariable(9439, 9453, "last-collision", candidate);
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 9470, 9473, 1904, candidate), function() { PrimChecks.turtle.setVariable(9490, 9504, "last-collision", SelfManager.myself()); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(9470, 9473, R); return R; }
    }
  }
}))
ProcedurePrims.defineCommand("collide-with", 10847, 13178, (function(otherHparticle) {
  let mass2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 11014, 11016, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(11008, 11012, "mass"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("MASS2", mass2);
  let speed2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 11053, 11055, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(11046, 11051, "speed"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("SPEED2", speed2);
  let heading2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 11096, 11098, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(11087, 11094, "heading"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("HEADING2", heading2);
  let theta = PrimChecks.math.randomFloat(360); ProcedurePrims.stack().currentContext().registerStringRunVar("THETA", theta);
  let v1t = PrimChecks.math.mult(11517, 11518, PrimChecks.validator.checkArg('*', 11517, 11518, 1, PrimChecks.turtle.getVariable(11511, 11516, "speed")), PrimChecks.math.cos(PrimChecks.math.minus(11530, 11531, PrimChecks.validator.checkArg('-', 11530, 11531, 1, theta), PrimChecks.validator.checkArg('-', 11530, 11531, 1, PrimChecks.turtle.getVariable(11532, 11539, "heading"))))); ProcedurePrims.stack().currentContext().registerStringRunVar("V1T", v1t);
  let v1l = PrimChecks.math.mult(11559, 11560, PrimChecks.validator.checkArg('*', 11559, 11560, 1, PrimChecks.turtle.getVariable(11553, 11558, "speed")), PrimChecks.math.sin(PrimChecks.math.minus(11572, 11573, PrimChecks.validator.checkArg('-', 11572, 11573, 1, theta), PrimChecks.validator.checkArg('-', 11572, 11573, 1, PrimChecks.turtle.getVariable(11574, 11581, "heading"))))); ProcedurePrims.stack().currentContext().registerStringRunVar("V1L", v1l);
  let v2t = PrimChecks.math.mult(11639, 11640, PrimChecks.validator.checkArg('*', 11639, 11640, 1, speed2), PrimChecks.math.cos(PrimChecks.math.minus(11652, 11653, PrimChecks.validator.checkArg('-', 11652, 11653, 1, theta), PrimChecks.validator.checkArg('-', 11652, 11653, 1, heading2)))); ProcedurePrims.stack().currentContext().registerStringRunVar("V2T", v2t);
  let v2l = PrimChecks.math.mult(11683, 11684, PrimChecks.validator.checkArg('*', 11683, 11684, 1, speed2), PrimChecks.math.sin(PrimChecks.math.minus(11696, 11697, PrimChecks.validator.checkArg('-', 11696, 11697, 1, theta), PrimChecks.validator.checkArg('-', 11696, 11697, 1, heading2)))); ProcedurePrims.stack().currentContext().registerStringRunVar("V2L", v2l);
  let vcm = PrimChecks.math.div(11881, 11882, PrimChecks.math.plus(11864, 11865, PrimChecks.math.mult(11857, 11858, PrimChecks.validator.checkArg('*', 11857, 11858, 1, PrimChecks.turtle.getVariable(11852, 11856, "mass")), PrimChecks.validator.checkArg('*', 11857, 11858, 1, v1t)), PrimChecks.math.mult(11873, 11874, PrimChecks.validator.checkArg('*', 11873, 11874, 1, mass2), PrimChecks.validator.checkArg('*', 11873, 11874, 1, v2t))), PrimChecks.math.plus(11889, 11890, PrimChecks.validator.checkArg('+', 11889, 11890, 1, PrimChecks.turtle.getVariable(11884, 11888, "mass")), PrimChecks.validator.checkArg('+', 11889, 11890, 1, mass2))); ProcedurePrims.stack().currentContext().registerStringRunVar("VCM", vcm);
  v1t = PrimChecks.math.minus(12255, 12256, PrimChecks.math.mult(12249, 12250, 2, PrimChecks.validator.checkArg('*', 12249, 12250, 1, vcm)), PrimChecks.validator.checkArg('-', 12255, 12256, 1, v1t)); ProcedurePrims.stack().currentContext().updateStringRunVar("V1T", v1t);
  v2t = PrimChecks.math.minus(12281, 12282, PrimChecks.math.mult(12275, 12276, 2, PrimChecks.validator.checkArg('*', 12275, 12276, 1, vcm)), PrimChecks.validator.checkArg('-', 12281, 12282, 1, v2t)); ProcedurePrims.stack().currentContext().updateStringRunVar("V2T", v2t);
  PrimChecks.turtle.setVariable(12416, 12421, "speed", PrimChecks.math.sqrt(12422, 12426, PrimChecks.math.plus(12440, 12441, PrimChecks.math.mult(12433, 12434, PrimChecks.validator.checkArg('*', 12433, 12434, 1, v1t), PrimChecks.validator.checkArg('*', 12433, 12434, 1, v1t)), PrimChecks.math.mult(12447, 12448, PrimChecks.validator.checkArg('*', 12447, 12448, 1, v1l), PrimChecks.validator.checkArg('*', 12447, 12448, 1, v1l)))));
  PrimChecks.turtle.setVariable(12461, 12467, "energy", PrimChecks.math.mult(12488, 12489, PrimChecks.math.mult(12480, 12481, PrimChecks.math.mult(12473, 12474, 0.5, PrimChecks.validator.checkArg('*', 12473, 12474, 1, PrimChecks.turtle.getVariable(12475, 12479, "mass"))), PrimChecks.validator.checkArg('*', 12480, 12481, 1, PrimChecks.turtle.getVariable(12482, 12487, "speed"))), PrimChecks.validator.checkArg('*', 12488, 12489, 1, PrimChecks.turtle.getVariable(12490, 12495, "speed"))));
  if ((!Prims.equality(v1l, 0) || !Prims.equality(v1t, 0))) {
    PrimChecks.turtle.setVariable(12723, 12730, "heading", PrimChecks.math.minus(12738, 12739, PrimChecks.validator.checkArg('-', 12738, 12739, 1, theta), PrimChecks.math.atan(12741, 12745, PrimChecks.validator.checkArg('ATAN', 12741, 12745, 1, v1l), PrimChecks.validator.checkArg('ATAN', 12741, 12745, 1, v1t))));
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 12801, 12804, 1904, otherHparticle), function() {
    PrimChecks.turtle.setVariable(12826, 12831, "speed", PrimChecks.math.sqrt(12832, 12836, PrimChecks.math.plus(12850, 12851, PrimChecks.math.mult(12843, 12844, PrimChecks.validator.checkArg('*', 12843, 12844, 1, v2t), PrimChecks.validator.checkArg('*', 12843, 12844, 1, v2t)), PrimChecks.math.mult(12857, 12858, PrimChecks.validator.checkArg('*', 12857, 12858, 1, v2l), PrimChecks.validator.checkArg('*', 12857, 12858, 1, v2l)))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12801, 12804, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 12869, 12872, 1904, otherHparticle), function() {
    PrimChecks.turtle.setVariable(12894, 12900, "energy", PrimChecks.math.mult(12920, 12921, PrimChecks.math.mult(12912, 12913, PrimChecks.math.mult(12905, 12906, 0.5, PrimChecks.validator.checkArg('*', 12905, 12906, 1, PrimChecks.turtle.getVariable(12907, 12911, "mass"))), PrimChecks.validator.checkArg('*', 12912, 12913, 1, PrimChecks.turtle.getVariable(12914, 12919, "speed"))), PrimChecks.validator.checkArg('*', 12920, 12921, 1, PrimChecks.turtle.getVariable(12922, 12927, "speed"))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12869, 12872, R); return R; }
  if ((!Prims.equality(v2l, 0) || !Prims.equality(v2t, 0))) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 12962, 12965, 1904, otherHparticle), function() {
      PrimChecks.turtle.setVariable(12987, 12994, "heading", PrimChecks.math.minus(13002, 13003, PrimChecks.validator.checkArg('-', 13002, 13003, 1, theta), PrimChecks.math.atan(13005, 13009, PrimChecks.validator.checkArg('ATAN', 13005, 13009, 1, v2l), PrimChecks.validator.checkArg('ATAN', 13005, 13009, 1, v2t))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(12962, 12965, R); return R; }
  }
  var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 13143, 13146, 1904, otherHparticle), function() { var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13143, 13146, R); return R; }
}))
ProcedurePrims.defineCommand("recolor", 13186, 13360, (function() {
  if (Prims.lt(PrimChecks.turtle.getVariable(13226, 13231, "speed"), PrimChecks.math.mult(13239, 13240, 0.5, 10))) {
    PrimChecks.turtleOrLink.setVariable(13257, 13262, "color", 105);
  }
  else {
    if (Prims.gt(PrimChecks.turtle.getVariable(13287, 13292, "speed"), PrimChecks.math.mult(13300, 13301, 1.5, 10))) {
      PrimChecks.turtleOrLink.setVariable(13318, 13323, "color", 15);
    }
    else {
      PrimChecks.turtleOrLink.setVariable(13342, 13347, "color", 55);
    }
  }
}))
ProcedurePrims.defineCommand("fade-patches", 13368, 13661, (function() {
  let traceHpatches = PrimChecks.agentset.with(13409, 13413, world.patches(), function() {
    return (!Prims.equality(PrimChecks.patch.getVariable(13416, 13422, "pcolor"), 45) && !Prims.equality(PrimChecks.patch.getVariable(13439, 13445, "pcolor"), 0));
  }); ProcedurePrims.stack().currentContext().registerStringRunVar("TRACE-PATCHES", traceHpatches);
  if (PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 13466, 13470, 112, traceHpatches))) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 13491, 13494, 1904, traceHpatches), function() {
      PrimChecks.patch.setVariable(13521, 13527, "pcolor", PrimChecks.math.minus(13537, 13538, PrimChecks.validator.checkArg('-', 13537, 13538, 1, PrimChecks.patch.getVariable(13530, 13536, "pcolor")), 0.4));
      if ((PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 13557, 13560, 2, world.observer.getGlobal("trace?"))) || Prims.equality(PrimChecks.math.round(PrimChecks.validator.checkArg('ROUND', 13573, 13578, 1, PrimChecks.patch.getVariable(13579, 13585, "pcolor"))), 0))) {
        PrimChecks.patch.setVariable(13611, 13617, "pcolor", 0);
      }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13491, 13494, R); return R; }
  }
  else {
    world.observer.setGlobal("fade-needed?", false);
  }
}))
ProcedurePrims.defineCommand("make-box", 13718, 13906, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(13741, 13745, world.patches(), function() {
    return ((Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 13750, 13753, 1, PrimChecks.patch.getVariable(13754, 13759, "pxcor"))), world.observer.getGlobal("box-edge")) && Prims.lte(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 13777, 13780, 1, PrimChecks.patch.getVariable(13781, 13786, "pycor"))), world.observer.getGlobal("box-edge"))) || (Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 13827, 13830, 1, PrimChecks.patch.getVariable(13831, 13836, "pycor"))), world.observer.getGlobal("box-edge")) && Prims.lte(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 13854, 13857, 1, PrimChecks.patch.getVariable(13858, 13863, "pxcor"))), world.observer.getGlobal("box-edge"))));
  }), function() { PrimChecks.patch.setVariable(13890, 13896, "pcolor", 45); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13729, 13732, R); return R; }
}))
ProcedurePrims.defineCommand("make-particles", 13943, 14088, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.createOrderedTurtles(world.observer.getGlobal("number-of-particles"), "PARTICLES"), function() {
    var R = ProcedurePrims.callCommand("setup-particle"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("random-position"); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(13960, 13984, R); return R; }
  var R = ProcedurePrims.callCommand("calculate-tick-length"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("setup-particle", 14097, 14308, (function() {
  PrimChecks.turtle.setVariable(14141, 14146, "speed", world.observer.getGlobal("init-particle-speed"));
  PrimChecks.turtle.setVariable(14173, 14177, "mass", world.observer.getGlobal("particle-mass"));
  PrimChecks.turtle.setVariable(14198, 14204, "energy", PrimChecks.math.mult(14225, 14226, PrimChecks.math.mult(14217, 14218, PrimChecks.math.mult(14210, 14211, 0.5, PrimChecks.validator.checkArg('*', 14210, 14211, 1, PrimChecks.turtle.getVariable(14212, 14216, "mass"))), PrimChecks.validator.checkArg('*', 14217, 14218, 1, PrimChecks.turtle.getVariable(14219, 14224, "speed"))), PrimChecks.validator.checkArg('*', 14225, 14226, 1, PrimChecks.turtle.getVariable(14227, 14232, "speed"))));
  PrimChecks.turtle.setVariable(14240, 14254, "last-collision", Nobody);
  PrimChecks.turtle.setVariable(14268, 14277, "wall-hits", 0);
  PrimChecks.turtle.setVariable(14286, 14305, "momentum-difference", 0);
}))
ProcedurePrims.defineCommand("random-position", 14369, 14560, (function() {
  PrimChecks.turtle.setXY(14409, 14414, PrimChecks.math.plus(14431, 14432, PrimChecks.math.minus(14419, 14420, 1, PrimChecks.validator.checkArg('-', 14419, 14420, 1, world.observer.getGlobal("box-edge"))), PrimChecks.math.randomFloat(PrimChecks.math.minus(14462, 14463, PrimChecks.math.mult(14450, 14451, 2, PrimChecks.validator.checkArg('*', 14450, 14451, 1, world.observer.getGlobal("box-edge"))), 2))), PrimChecks.math.plus(14492, 14493, PrimChecks.math.minus(14480, 14481, 1, PrimChecks.validator.checkArg('-', 14480, 14481, 1, world.observer.getGlobal("box-edge"))), PrimChecks.math.randomFloat(PrimChecks.math.minus(14523, 14524, PrimChecks.math.mult(14511, 14512, 2, PrimChecks.validator.checkArg('*', 14511, 14512, 1, world.observer.getGlobal("box-edge"))), 2))));
  PrimChecks.turtle.setVariable(14535, 14542, "heading", PrimChecks.math.randomFloat(360));
}))
ProcedurePrims.defineCommand("setup-plotz", 14593, 14694, (function() {
  plotManager.setCurrentPlot("Speed Counts");
  plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(14689, 14690, PrimChecks.validator.checkArg('/', 14689, 14690, 1, world.observer.getGlobal("number-of-particles")), 6)));
}))
ProcedurePrims.defineCommand("setup-histograms", 14702, 15549, (function() {
  plotManager.setCurrentPlot("Speed Histogram");
  plotManager.setXRange(0, PrimChecks.math.mult(14798, 14799, PrimChecks.validator.checkArg('*', 14798, 14799, 1, world.observer.getGlobal("init-particle-speed")), 2));
  plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(14853, 14854, PrimChecks.validator.checkArg('/', 14853, 14854, 1, world.observer.getGlobal("number-of-particles")), 6)));
  plotManager.setCurrentPen("medium");
  plotManager.setHistogramBarCount(40);
  plotManager.setCurrentPen("slow");
  plotManager.setHistogramBarCount(40);
  plotManager.setCurrentPen("fast");
  plotManager.setHistogramBarCount(40);
  plotManager.setCurrentPen("init-avg-speed");
  var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("init-avg-speed")); if (R === DeathInterrupt) { return R; }
  plotManager.setCurrentPlot("Energy Histogram");
  plotManager.setXRange(0, PrimChecks.math.mult(15227, 15228, PrimChecks.math.mult(15199, 15200, PrimChecks.math.mult(15171, 15172, 0.5, PrimChecks.math.mult(15194, 15195, PrimChecks.validator.checkArg('*', 15194, 15195, 1, world.observer.getGlobal("init-particle-speed")), 2)), PrimChecks.math.mult(15222, 15223, PrimChecks.validator.checkArg('*', 15222, 15223, 1, world.observer.getGlobal("init-particle-speed")), 2)), PrimChecks.validator.checkArg('*', 15227, 15228, 1, world.observer.getGlobal("particle-mass"))));
  plotManager.setYRange(0, PrimChecks.math.ceil(PrimChecks.math.div(15294, 15295, PrimChecks.validator.checkArg('/', 15294, 15295, 1, world.observer.getGlobal("number-of-particles")), 6)));
  plotManager.setCurrentPen("medium");
  plotManager.setHistogramBarCount(40);
  plotManager.setCurrentPen("slow");
  plotManager.setHistogramBarCount(40);
  plotManager.setCurrentPen("fast");
  plotManager.setHistogramBarCount(40);
  plotManager.setCurrentPen("init-avg-energy");
  var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("init-avg-energy")); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("do-plotting", 15558, 15992, (function() {
  plotManager.setCurrentPlot("Pressure vs. Time");
  if (Prims.gt(PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 15614, 15620, 12, world.observer.getGlobal("pressure-history"))), 0)) {
    plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.list.mean(15662, 15666, PrimChecks.validator.checkArg('MEAN', 15662, 15666, 8, PrimChecks.procedure.callReporter(15667, 15673, "last-n", 3, world.observer.getGlobal("pressure-history")))));
  }
  plotManager.setCurrentPlot("Speed Counts");
  plotManager.setCurrentPen("fast");
  plotManager.plotValue(world.observer.getGlobal("fast"));
  plotManager.setCurrentPen("medium");
  plotManager.plotValue(world.observer.getGlobal("medium"));
  plotManager.setCurrentPen("slow");
  plotManager.plotValue(world.observer.getGlobal("slow"));
  if (Prims.gt(world.ticker.tickCount(), 1)) {
    plotManager.setCurrentPlot("Wall Hits per Particle");
    plotManager.plotPoint(world.ticker.tickCount(), world.observer.getGlobal("wall-hits-per-particle"));
  }
  var R = ProcedurePrims.callCommand("plot-histograms"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("plot-histograms", 16001, 16770, (function() {
  plotManager.setCurrentPlot("Energy histogram");
  plotManager.setCurrentPen("fast");
  plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(16121, 16125, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(16127, 16132, "color"), 15); }), function() { return PrimChecks.turtle.getVariable(16099, 16105, "energy"); }));
  plotManager.setCurrentPen("medium");
  plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(16208, 16212, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(16214, 16219, "color"), 55); }), function() { return PrimChecks.turtle.getVariable(16186, 16192, "energy"); }));
  plotManager.setCurrentPen("slow");
  plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(16295, 16299, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(16301, 16306, "color"), 105); }), function() { return PrimChecks.turtle.getVariable(16273, 16279, "energy"); }));
  plotManager.setCurrentPen("avg-energy");
  plotManager.resetPen();
  var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("avg-energy")); if (R === DeathInterrupt) { return R; }
  plotManager.setCurrentPlot("Speed histogram");
  plotManager.setCurrentPen("fast");
  plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(16499, 16503, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(16505, 16510, "color"), 15); }), function() { return PrimChecks.turtle.getVariable(16478, 16483, "speed"); }));
  plotManager.setCurrentPen("medium");
  plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(16585, 16589, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(16591, 16596, "color"), 55); }), function() { return PrimChecks.turtle.getVariable(16564, 16569, "speed"); }));
  plotManager.setCurrentPen("slow");
  plotManager.drawHistogramFrom(PrimChecks.agentset.of(PrimChecks.agentset.with(16671, 16675, world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return Prims.equality(PrimChecks.turtleOrLink.getVariable(16677, 16682, "color"), 105); }), function() { return PrimChecks.turtle.getVariable(16650, 16655, "speed"); }));
  plotManager.setCurrentPen("avg-speed");
  plotManager.resetPen();
  var R = ProcedurePrims.callCommand("draw-vert-line", world.observer.getGlobal("avg-speed")); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("draw-vert-line", 16801, 16905, (function(xval) {
  plotManager.plotPoint(xval, plotManager.getPlotYMin());
  plotManager.lowerPen();
  plotManager.plotPoint(xval, plotManager.getPlotYMax());
  plotManager.raisePen();
}))
ProcedurePrims.defineReporter("last-n", 16920, 17036, (function(n, theHlist) {
  if (Prims.gte(n, PrimChecks.list.length(PrimChecks.validator.checkArg('LENGTH', 16954, 16960, 12, theHlist)))) {
    return PrimChecks.procedure.report(16976, 16982, theHlist);
  }
  else {
    return PrimChecks.procedure.report(17000, 17006, PrimChecks.procedure.callReporter(17007, 17013, "last-n", n, PrimChecks.list.butFirst('butfirst', 17016, 17024, PrimChecks.validator.checkArg('BUTFIRST', 17016, 17024, 12, theHlist))));
  }
}))
ProcedurePrims.defineCommand("make-clocker", 17044, 17231, (function() {
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("CLOCKERS").getSpecialName(), "clocker")
  var R = ProcedurePrims.ask(world.turtleManager.createOrderedTurtles(1, "CLOCKERS"), function() {
    PrimChecks.turtle.setXY(17132, 17137, PrimChecks.math.minus(17148, 17149, PrimChecks.validator.checkArg('-', 17148, 17149, 1, world.observer.getGlobal("box-edge")), 5), PrimChecks.math.minus(17163, 17164, PrimChecks.validator.checkArg('-', 17163, 17164, 1, world.observer.getGlobal("box-edge")), 5));
    PrimChecks.turtleOrLink.setVariable(17176, 17181, "color", PrimChecks.math.plus(17189, 17190, 115, 2));
    PrimChecks.turtle.setVariable(17201, 17205, "size", 10);
    PrimChecks.turtle.setVariable(17217, 17224, "heading", 0);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(17098, 17121, R); return R; }
}))
world.observer.setGlobal("number-of-particles", 150);
world.observer.setGlobal("collide?", true);
world.observer.setGlobal("trace?", true);
world.observer.setGlobal("init-particle-speed", 10);
world.observer.setGlobal("particle-mass", 5);