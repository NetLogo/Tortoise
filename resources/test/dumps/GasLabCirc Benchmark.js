var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":1,"y":1,"diam":298,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"vector":{"name":"vector","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":15,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[120,150,180,120],"ycors":[30,0,30,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [];
var workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "particles", singular: "particle", varNames: ["speed", "mass"] }])([], [])('globals [   result ;; for benchmarking   tick-length               ;; how much simulation will pass in this step   box-edge                  ;; distance of box edge from axes   colliding-particles   sorted-colliding-particles   colliding-particle-1   colliding-particle-2   original-tick-length   last-view-update   manage-view-updates?   view-update-rate          ;; specifies the minimum amount of simulation time that must                             ;; pass before the view is updated ]  breed [ particles particle ]  particles-own [   speed   mass ]  ;;;;;;;;;;;;;;;;  to benchmark   random-seed 12345   reset-timer   setup   set manage-view-updates? false   repeat 3500 [ go ]   set result timer end  to setup   ca reset-ticks   set-default-shape particles \"circle\"   set manage-view-updates? true   set view-update-rate 0.2   set box-edge (max-pxcor - 1)   make-box   make-particles    ;; set variable tick length based on fastest particle.   If the fastest particle has a speed of 1,   ;; then tick-length is 1.  If the fastest particles has a speed of 10, then tick-length is 1/10.   set tick-length (1 / (ceiling max [speed] of particles))   set original-tick-length tick-length   set colliding-particle-1 nobody   set colliding-particle-2 nobody   rebuild-collision-list end  to rebuild-collision-list   set colliding-particles []   ask particles [check-for-wall-collision]   ask particles [check-for-particle-collision ] end   to go   ;;Since only collisions involving the particles that collided most recently could be affected,   ;;we filter those out of colliding-particles.  Then we recalculate all possible collisions for the   ;;particles that collided last.  The ifelse statement is necessary because colliding-particle-2   ;;can be either a particle or a string representing a wall.  If it is a wall, we don\'t want to   ;;invalidate all collisions involving that wall (because the wall\'s position wasn\'t affected, those   ;;collisions are still valid.   ifelse is-turtle? colliding-particle-2   [     set colliding-particles filter [ [collision] ->       item 1 collision != colliding-particle-1 and       item 2 collision != colliding-particle-1 and       item 1 collision != colliding-particle-2 and       item 2 collision != colliding-particle-2]     colliding-particles     ask colliding-particle-2 [check-for-wall-collision]     ask colliding-particle-2 [check-for-particle-collision]   ]   [     set colliding-particles filter [ [collision] ->       item 1 collision != colliding-particle-1 and       item 2 collision != colliding-particle-1]     colliding-particles   ]   if colliding-particle-1 != nobody [ask colliding-particle-1 [check-for-wall-collision]]   if colliding-particle-1 != nobody [ask colliding-particle-1 [check-for-particle-collision]]    sort-collisions   ask particles [ jump speed * tick-length ]   collide-winners   tick-advance tick-length    ;; flag that updates display only after enough simulation time has passed.   ;; the display-update-rate sets the minimum simulation time that must pass   ;; before updating the display.  This avoids many redisplays of the view for   ;; a series of small time steps in the simulation (which would make the view show   ;; what looks like particles slowing down as they get near multiple collision points)   if manage-view-updates? [     if (ticks - last-view-update) > view-update-rate     [ display       set last-view-update ticks ]       ] end  to-report convert-heading-x [heading-angle]   report sin heading-angle end  to-report convert-heading-y [heading-angle]   report cos heading-angle end   to check-for-particle-collision  ;; check-for-particle-collision is a particle procedure that determines the time it takes to the collision between ;; two particles (if one exists).  It solves for the time by representing the equations of motion for ;; distance, velocity, and time in a quadratic equation of the vector components of the relative velocities ;; and changes in position between the two particles and solves for the time until the next collision    let my-x xcor   let my-y ycor   let my-particle-size size   let my-x-speed (speed * convert-heading-x heading)   let my-y-speed (speed * convert-heading-y heading)    ask other particles   [           let dpx (xcor - my-x)   ;; relative distance between particles in the x direction          let dpy (ycor - my-y)    ;; relative distance between particles in the y direction          let x-speed (speed * convert-heading-x heading) ;; speed of other particle in the x direction          let y-speed (speed * convert-heading-y heading) ;; speed of other particle in the x direction          let dvx (x-speed - my-x-speed) ;; relative speed difference between particles in the x direction          let dvy (y-speed - my-y-speed) ;; relative speed difference between particles in the y direction          let sum-r (((my-particle-size) / 2 ) + (([size] of self) / 2 )) ;; sum of both particle radii            ;; To figure out what the difference in position (P1) between two particles at a future time (t) would be,         ;; one would need to know the current difference in position (P0) between the two particles         ;; and the current difference in the velocity (V0) between of the two particles.          ;; The equation that represents the relationship would be:   P1 = P0 + t * V0          ;; we want find when in time (t), P1 would be equal to the sum of both the particle\'s radii (sum-r).         ;; When P1 is equal to is equal to sum-r, the particles will just be touching each other at         ;; their edges  (a single point of contact).          ;; Therefore we are looking for when:   sum-r =  P0 + t * V0          ;; This equation is not a simple linear equation, since P0 and V0 should both have x and y components         ;;  in their two dimensional vector representation (calculated as dpx, dpy, and dvx, dvy).           ;; By squaring both sides of the equation, we get:     (sum-r) * (sum-r) =  (P0 + t * V0) * (P0 + t * V0)          ;;  When expanded gives:   (sum-r ^ 2) = (P0 ^ 2) + (t * PO * V0) + (t * PO * V0) + (t ^ 2 * VO ^ 2)          ;;  Which can be simplified to:    0 = (P0 ^ 2) - (sum-r ^ 2) + (2 * PO * V0) * t + (VO ^ 2) * t ^ 2          ;;  Below, we will let p-squared represent:   (P0 ^ 2) - (sum-r ^ 2)         ;;  and pv represent: (2 * PO * V0)         ;;  and v-squared represent: (VO ^ 2)          ;;  then the equation will simplify to:     0 = p-squared + pv * t + v-squared * t^2            let p-squared   ((dpx * dpx) + (dpy * dpy)) - (sum-r ^ 2)   ;; p-squared represents difference of the                                                                      ;; square of the radii and the square                                                                      ;; of the initial positions           let pv  (2 * ((dpx * dvx) + (dpy * dvy)))  ;;the vector product of the position times the velocity          let v-squared  ((dvx * dvx) + (dvy * dvy)) ;; the square of the difference in speeds                                                     ;; represented as the sum of the squares of the x-component                                                     ;; and y-component of relative speeds between the two particles            ;; p-squared, pv, and v-squared are coefficients in the quadratic equation shown above that          ;; represents how distance between the particles and relative velocity are related to the time,          ;; t, at which they will next collide (or when their edges will just be touching)           ;; Any quadratic equation that is the function of time (t), can represented in a general form as:          ;;   a*t*t + b*t + c = 0,          ;; where a, b, and c are the coefficients of the three different terms, and has solutions for t          ;; that can be found by using the quadratic formula.  The quadratic formula states that if a is not 0,          ;; then there are two solutions for t, either real or complex.           ;; t is equal to (b +/- sqrt (b^2 - 4*a*c)) / 2*a           ;; the portion of this equation that is under a square root is referred to here          ;; as the determinant, D1.   D1 is equal to (b^2 - 4*a*c)          ;; and:   a = v-squared, b = pv, and c = p-squared.            let D1 pv ^ 2 -  (4 * v-squared * p-squared)            ;; the next line next line tells us that a collision will happen in the future if          ;; the determinant, D1 is >= 0,  since a positive determinant tells us that there is a          ;; real solution for the quadratic equation.  Quadratic equations can have solutions          ;; that are not real (they are square roots of negative numbers).  These are referred          ;; to as imaginary numbers and for many real world systems that the equations represent          ;; are not real world states the system can actually end up in.           ;; Once we determine that a real solution exists, we want to take only one of the two          ;; possible solutions to the quadratic equation, namely the smaller of the two the solutions:           ;;  (b - sqrt (b^2 - 4*a*c)) / 2*a          ;;  which is a solution that represents when the particles first touching on their edges.           ;;  instead of (b + sqrt (b^2 - 4*a*c)) / 2*a          ;;  which is a solution that represents a time after the particles have penetrated          ;;  and are coming back out of each other and when they are just touching on their edges.            let time-to-collision  -1           if D1 >= 0             [set time-to-collision (- pv - sqrt D1) / (2 * v-squared) ]        ;;solution for time step            ;; if time-to-collision is still -1 there is no collision in the future - no valid solution          ;; note:  negative values for time-to-collision represent where particles would collide          ;; if allowed to move backward in time.          ;; if time-to-collision is greater than 1, then we continue to advance the motion          ;; of the particles along their current trajectories.  They do not collide yet.           if time-to-collision > 0              [              ;; time-to-collision is relative (ie, a collision will occur one second from now)              ;; We need to store the absolute time (ie, a collision will occur at time 48.5 seconds.              ;; So, we add clock to time-to-collision when we store it.               let colliding-pair (list (time-to-collision + ticks) self myself) ;; sets a three element list of                                                         ;; time to collision and the colliding pair               set colliding-particles fput colliding-pair colliding-particles  ;; adds above list to collection                                                                                ;; of colliding pairs and time                                                                                ;; steps              ]   ]  end   to check-for-wall-collision ;; particle procedure for determining if a particle will hit one of the                             ;; four walls of the box    let x-speed (speed * convert-heading-x heading)   let y-speed (speed * convert-heading-y heading)   let xpos-plane (box-edge - 0.5)      ;;inside boundary of right side of the box   let xneg-plane (- box-edge + 0.5)    ;;inside boundary of left side of the box   let ypos-plane (box-edge - 0.5)      ;;inside boundary of top side of the box   let yneg-plane (- box-edge + 0.5)    ;;inside boundary of bottom side of the box    ;; find point of contact on edge of circle   ;; points of contact located at 1 radius above, below, to the left, and to the right   ;; of the center of the particle    let contact-point-xpos (xcor + (size / 2))   let contact-point-xneg (xcor - (size / 2))   let contact-point-ypos (ycor + (size / 2))   let contact-point-yneg (ycor - (size / 2))    ;; find difference in position between plane location and edge of circle    let dpxpos (xpos-plane - contact-point-xpos)   let dpxneg (xneg-plane - contact-point-xneg)   let dpypos (ypos-plane - contact-point-ypos)   let dpyneg (yneg-plane - contact-point-yneg)    let t-plane-xpos 0    ;; solve for the time it will take the particle to reach the wall by taking   ;; the distance to the wall and dividing it by the speed in the direction to the wall    ifelse  x-speed != 0 [set t-plane-xpos (dpxpos / x-speed)] [set t-plane-xpos 0]    if t-plane-xpos > 0       [        assign-colliding-wall t-plane-xpos \"plane-xpos\"       ]    let t-plane-xneg 0   ifelse  x-speed != 0 [set t-plane-xneg (dpxneg / x-speed)] [set t-plane-xneg 0]    if t-plane-xneg > 0       [        assign-colliding-wall t-plane-xneg \"plane-xneg\"       ]   let t-plane-ypos 0   ifelse  y-speed != 0 [set t-plane-ypos (dpypos / y-speed)] [set t-plane-ypos 0]    if t-plane-ypos > 0       [        assign-colliding-wall t-plane-ypos \"plane-ypos\"       ]    let t-plane-yneg 0   ifelse  y-speed != 0 [set t-plane-yneg (dpyneg / y-speed)] [set t-plane-yneg 0]   if t-plane-yneg > 0       [        assign-colliding-wall t-plane-yneg \"plane-yneg\"       ]  end  to assign-colliding-wall [time-to-collision wall]   ;; this procedure is used by the check-for-wall-collision procedure   ;; to assemble the correct particle-wall pair   ;; time-to-collision is relative (ie, a collision will occur one second from now)   ;; We need to store the absolute time (ie, a collision will occur at time 48.5 seconds.   ;; So, we add clock to time-to-collision when we store it.    let colliding-pair (list (time-to-collision + ticks) self wall)   set colliding-particles fput colliding-pair colliding-particles  end   to sort-collisions   ;; Slight errors in floating point math can cause a collision that just   ;; happened to be calculated as happening again a very tiny amount of   ;; time into the future, so we remove any collisions that involves   ;; the same two particles (or particle and wall) as last time.   set colliding-particles filter [ [collision] ->     item 1 collision != colliding-particle-1 or     item 2 collision != colliding-particle-2]   colliding-particles   set colliding-particle-1 nobody   set colliding-particle-2 nobody   set tick-length original-tick-length   if colliding-particles = [] [ stop ]   ;; Sort the list of projected collisions between all the particles into an ordered list.   ;; Take the smallest time-step from the list (which represents the next collision that will   ;; happen in time).  Use this time step as the tick-length for all the particles to move through   let winner first colliding-particles   foreach colliding-particles [ [collision] -> if first collision < first winner [set winner collision]]   ;;winner is now the collision that will occur next   let dt item 0 winner   if dt > 0   [     ;;If the next collision is more than 1 in the future,     ;;clear the winners and advance the simulation one tick.     ;;This helps smooth the model on smaller particle counts.     ifelse dt - ticks <= 1     ;;We have to subtract clock back out because now we want the relative time until collision,     ;;not the absolute time the collision will occur.     [set tick-length dt - ticks      set colliding-particle-1 item 1 winner      set colliding-particle-2 item 2 winner]     ;;Since there are no collisions in the next second, we will set winners to [] to keep from     ;;mistakenly colliding any particles that shouldn\'t collide yet.     [set tick-length 1]   ] end   to collide-winners  ;; deal with 3 possible cases of collisions:                     ;; particle and one wall, particle and two walls, and two particles     if colliding-particle-1 = nobody [ stop ]     ;; deal with a case where the next collision in time is between a particle and a wall      if colliding-particle-2 = \"plane-xpos\" or colliding-particle-2 = \"plane-xneg\"          [ask colliding-particle-1 [set heading (- heading)]           stop]     if colliding-particle-2 = \"plane-ypos\" or colliding-particle-2 = \"plane-yneg\"          [ask colliding-particle-1 [set heading (180 - heading)]           stop]      ;; deal with the remaining case of the next collision in time being between two particles.      ask colliding-particle-1 [collide-with colliding-particle-2]  end   to collide-with [ other-particle ] ;; particle procedure    ;;; PHASE 1: initial setup      ;; for convenience, grab some quantities from other-particle     let mass2 [mass] of other-particle     let speed2 [speed] of other-particle     let heading2 [heading] of other-particle    ;;modified so that theta is heading toward other particle   let theta towards other-particle    ;;; PHASE 2: convert velocities to theta-based vector representation    ;; now convert my velocity from speed/heading representation to components   ;; along theta and perpendicular to theta   let v1t (speed * cos (theta - heading))   let v1l (speed * sin (theta - heading))    ;; do the same for other-particle   let v2t (speed2 * cos (theta - heading2))   let v2l (speed2 * sin (theta - heading2))    ;;; PHASE 3: manipulate vectors to implement collision    ;; compute the velocity of the system\'s center of mass along theta   let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )    ;; now compute the new velocity for each particle along direction theta.   ;; velocity perpendicular to theta is unaffected by a collision along theta,   ;; so the next two lines actually implement the collision itself, in the   ;; sense that the effects of the collision are exactly the following changes   ;; in particle velocity.   set v1t (2 * vcm - v1t)   set v2t (2 * vcm - v2t)     ;;; PHASE 4: convert back to normal speed/heading    ;; now convert my velocity vector into my new speed and heading   set speed sqrt ((v1t * v1t) + (v1l * v1l))   ;; if the magnitude of the velocity vector is 0, atan is undefined. but   ;; speed will be 0, so heading is irrelevant anyway. therefore, in that   ;; case we\'ll just leave it unmodified.   if v1l != 0 or v1t != 0     [ set heading (theta - (atan v1l v1t)) ]    ;; and do the same for other-particle   ask other-particle [ set speed sqrt (((v2t * v2t) + (v2l * v2l))) ]   if v2l != 0 or v2t != 0     [ ask other-particle [ set heading (theta - (atan v2l v2t)) ] ]    ;; PHASE 5: final updates    ;; now recolor, since color is based on quantities that may have changed   recolor ask other-particle [ recolor ] end   to recolor     if color-scheme = \"red-green-blue\" [ recolor-banded ]     if color-scheme = \"blue shades\" [ recolor-shaded ]     if color-scheme  = \"one color\" [ recolor-none ] end   to recolor-banded  ;; particle procedure   let avg-speed 1   ;; avg-speed is assumed to be 0.5, since particles are assigned a random speed between 0 and 1   ;; particle coloring procedures for visualizing speed with a color palette,   ;; red are fast particles, blue slow, and green in between.    ifelse speed < (0.5 * avg-speed) ;; at lower than 50% the average speed   [     set color blue       ;; slow particles colored blue   ]   [     ifelse speed > (1.5 * avg-speed) ;; above 50% higher the average speed       [ set color red ]        ;; fast particles colored blue       [ set color green ]      ;; medium speed particles colored green   ]  end   to recolor-shaded   let avg-speed 1  ;; avg-speed is assumed to be 0.5, since particles are assigned a random speed between 0 and 1  ;; a particle shading gradient is applied to all particles less than speed 1.5,  ;; the uppermost threshold speed to apply the shading gradient to.    ifelse speed < (3 * avg-speed)   [ set color (sky - 3.001) + (8 * speed / (3 * avg-speed)) ]   [ set color (sky + 4.999)] end  to recolor-none   set color green - 1 end   ;;; ;;; drawing procedures ;;;  to make-box   ask patches with [ ((abs pxcor = box-edge) and (abs pycor <= box-edge)) or                      ((abs pycor = box-edge) and (abs pxcor <= box-edge)) ]     [ set pcolor yellow ] end  ;; creates some particles to make-particles   create-ordered-particles number [     set speed 1     set size smallest-particle-size + random-float (largest-particle-size - smallest-particle-size)     set mass (size * size) ;; set the mass proportional to the area of the particle     recolor     set heading random-float 360   ]   arrange particles end  ;; If the number of particles requested by the user won\'t fit in the box, ;; this code will go into an infinite loop. To work around a NetLogo bug ;; where some kinds of infinite loops cannot be halted by Tools->Halt, ;; we put this code in a separate procedure and write it a certain way. ;; (It\'s necessary for the loop not to be within an ASK.  The reason ;; for this is very obscure.  We plan to fix the problem in a future ;; NetLogo version.) to arrange [particle-set]   if not any? particle-set [ stop ]   ask particle-set [ random-position ]   arrange particle-set with [overlapping?] end  to-report overlapping?  ;; particle procedure   ;; here, we use in-radius just for improved speed   report any? other particles in-radius ((size + largest-particle-size) / 2)                               with [distance myself < (size + [size] of myself) / 2] end  ;; place particle at random location inside the box. to random-position  ;; particle procedure   setxy one-of [1 -1] * random-float (box-edge - 0.5 - size / 2)         one-of [1 -1] * random-float (box-edge - 0.5 - size / 2) end   ;;; ;;; procedure for reversing time ;;;  to reverse-time   ask particles [ rt 180 ]   rebuild-collision-list   ;; the last collision that happened before the model was paused   ;; (if the model was paused immediately after a collision)   ;; won\'t happen again after time is reversed because of the   ;; \"don\'t do the same collision twice in a row\" rule.  We could   ;; try to fool that rule by setting colliding-particle-1 and   ;; colliding-particle-2 to nobody, but that might not always work,   ;; because the vagaries of floating point math means that the   ;; collision might be calculated to be slightly in the past   ;; (the past that used to be the future!) and be skipped.   ;; So to be sure, we force the collision to happen:   collide-winners end  ;; Here\'s a procedure that demonstrates time-reversing the model. ;; You can run it from the command center.  When it finishes, ;; the final particle positions may be slightly different because ;; the amount of time that passes after the reversal might not ;; be exactly the same as the amount that passed before; this ;; doesn\'t indicate a bug in the model. ;; For larger values of n, you will start to notice larger ;; discrepancies, eventually causing the behavior of the system ;; to diverge totally. Unless the model has some bug we don\'t know ;; about, this is due to accumulating tiny inaccuracies in the ;; floating point calculations.  Once these inaccuracies accumulate ;; to the point that a collision is missed or an extra collision ;; happens, after that the reversed model will diverge rapidly. to test-time-reversal [n]   setup   ask particles [ stamp ]   while [ticks < n] [ go ]   let old-clock ticks   reverse-time   while [ticks < 2 * old-clock] [ go ]   ask particles [ set color white ] end')([{"x":212,"y":10,"width":494,"height":495,"dimensions":{"minPxcor":-40,"maxPxcor":40,"minPycor":-40,"maxPycor":40,"patchSize":6,"wrappingAllowedInX":false,"wrappingAllowedInY":false},"fontSize":20,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":13,"y":172,"width":93,"height":33,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 200; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"number","x":10,"y":38,"width":189,"height":33,"oldSize":true,"display":"number","min":"1","max":"200","default":200,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":112,"y":172,"width":87,"height":33,"oldSize":true,"forever":true,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 10; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.5; })","type":"slider","variable":"largest-particle-size","x":10,"y":117,"width":188,"height":33,"oldSize":true,"display":"largest-particle-size","min":"1","max":"10","default":4,"step":"0.5","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"variable":"color-scheme","x":14,"y":226,"width":131,"height":45,"oldSize":true,"display":"color-scheme","choices":["red-green-blue","blue shades","one color"],"currentChoice":0,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 5; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 0.5; })","type":"slider","variable":"smallest-particle-size","x":10,"y":77,"width":188,"height":33,"oldSize":true,"display":"smallest-particle-size","min":"1","max":"5","default":1,"step":"0.5","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"benchmark\"); if (R === StopInterrupt) { return R; }","type":"button","source":"benchmark","x":23,"y":359,"width":177,"height":145,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"result\"); })","type":"monitor","source":"result","x":32,"y":455,"width":158,"height":45,"oldSize":true,"precision":17,"fontSize":11,"compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["number", "largest-particle-size", "color-scheme", "smallest-particle-size", "result", "tick-length", "box-edge", "colliding-particles", "sorted-colliding-particles", "colliding-particle-1", "colliding-particle-2", "original-tick-length", "last-view-update", "manage-view-updates?", "view-update-rate"], ["number", "largest-particle-size", "color-scheme", "smallest-particle-size"], [], -40, 40, -40, 40, 6, false, false, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("benchmark", 577, 702, (function() {
  PrimChecks.math.randomSeed(589, 600, 12345);
  workspace.timer.reset();
  var R = ProcedurePrims.callCommand("setup"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("manage-view-updates?", false);
  for (let _index_664_670 = 0, _repeatcount_664_670 = StrictMath.floor(3500); _index_664_670 < _repeatcount_664_670; _index_664_670++) {
    var R = ProcedurePrims.callCommand("go"); if (R === DeathInterrupt) { return R; }
  }
  world.observer.setGlobal("result", workspace.timer.elapsed());
}))
ProcedurePrims.defineCommand("setup", 710, 1282, (function() {
  world.clearAll();
  world.ticker.reset();
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("PARTICLES").getSpecialName(), "circle")
  world.observer.setGlobal("manage-view-updates?", true);
  world.observer.setGlobal("view-update-rate", 0.2);
  world.observer.setGlobal("box-edge", PrimChecks.math.minus(857, 858, world.topology.maxPxcor, 1));
  var R = ProcedurePrims.callCommand("make-box"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("make-particles"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("tick-length", PrimChecks.math.div(1112, 1113, 1, PrimChecks.math.ceil(PrimChecks.list.max(1123, 1126, PrimChecks.validator.checkArg('MAX', 1123, 1126, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { return PrimChecks.turtle.getVariable(1128, 1133, "speed"); }))))));
  world.observer.setGlobal("original-tick-length", world.observer.getGlobal("tick-length"));
  world.observer.setGlobal("colliding-particle-1", Nobody);
  world.observer.setGlobal("colliding-particle-2", Nobody);
  var R = ProcedurePrims.callCommand("rebuild-collision-list"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("rebuild-collision-list", 1290, 1433, (function() {
  world.observer.setGlobal("colliding-particles", []);
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() {
    var R = ProcedurePrims.callCommand("check-for-wall-collision"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1344, 1347, R); return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() {
    var R = ProcedurePrims.callCommand("check-for-particle-collision"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1387, 1390, R); return R; }
}))
ProcedurePrims.defineCommand("go", 1442, 3434, (function() {
  if (NLType.checks.isValidTurtle(world.observer.getGlobal("colliding-particle-2"))) {
    world.observer.setGlobal("colliding-particles", PrimChecks.list.filter(2045, 2051, PrimChecks.task.checked(2052, 2053, function(collision) {
      PrimChecks.procedure.runArgCountCheck('runresult', 2075, 2268, 1, arguments.length);
      return (((!Prims.equality(PrimChecks.list.item(2075, 2079, 1, PrimChecks.validator.checkArg('ITEM', 2075, 2079, 12, collision)), world.observer.getGlobal("colliding-particle-1")) && !Prims.equality(PrimChecks.list.item(2126, 2130, 2, PrimChecks.validator.checkArg('ITEM', 2126, 2130, 12, collision)), world.observer.getGlobal("colliding-particle-1"))) && !Prims.equality(PrimChecks.list.item(2177, 2181, 1, PrimChecks.validator.checkArg('ITEM', 2177, 2181, 12, collision)), world.observer.getGlobal("colliding-particle-2"))) && !Prims.equality(PrimChecks.list.item(2228, 2232, 2, PrimChecks.validator.checkArg('ITEM', 2228, 2232, 12, collision)), world.observer.getGlobal("colliding-particle-2")));
    }, "[ [collision] -> item 1 collision != colliding-particle-1 and item 2 collision != colliding-particle-1 and item 1 collision != colliding-particle-2 and item 2 collision != colliding-particle-2 ]", true, false), PrimChecks.validator.checkArg('FILTER', 2045, 2051, 8, world.observer.getGlobal("colliding-particles"))));
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2298, 2301, 1904, world.observer.getGlobal("colliding-particle-2")), function() {
      var R = ProcedurePrims.callCommand("check-for-wall-collision"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2298, 2301, R); return R; }
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2354, 2357, 1904, world.observer.getGlobal("colliding-particle-2")), function() {
      var R = ProcedurePrims.callCommand("check-for-particle-collision"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2354, 2357, R); return R; }
  }
  else {
    world.observer.setGlobal("colliding-particles", PrimChecks.list.filter(2446, 2452, PrimChecks.task.checked(2453, 2454, function(collision) {
      PrimChecks.procedure.runArgCountCheck('runresult', 2476, 2567, 1, arguments.length);
      return (!Prims.equality(PrimChecks.list.item(2476, 2480, 1, PrimChecks.validator.checkArg('ITEM', 2476, 2480, 12, collision)), world.observer.getGlobal("colliding-particle-1")) && !Prims.equality(PrimChecks.list.item(2527, 2531, 2, PrimChecks.validator.checkArg('ITEM', 2527, 2531, 12, collision)), world.observer.getGlobal("colliding-particle-1")));
    }, "[ [collision] -> item 1 collision != colliding-particle-1 and item 2 collision != colliding-particle-1 ]", true, false), PrimChecks.validator.checkArg('FILTER', 2446, 2452, 8, world.observer.getGlobal("colliding-particles"))));
  }
  if (!Prims.equality(world.observer.getGlobal("colliding-particle-1"), Nobody)) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2634, 2637, 1904, world.observer.getGlobal("colliding-particle-1")), function() {
      var R = ProcedurePrims.callCommand("check-for-wall-collision"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2634, 2637, R); return R; }
  }
  if (!Prims.equality(world.observer.getGlobal("colliding-particle-1"), Nobody)) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2724, 2727, 1904, world.observer.getGlobal("colliding-particle-1")), function() {
      var R = ProcedurePrims.callCommand("check-for-particle-collision"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2724, 2727, R); return R; }
  }
  var R = ProcedurePrims.callCommand("sort-collisions"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() {
    SelfManager.self().jumpIfAble(PrimChecks.math.mult(2829, 2830, PrimChecks.validator.checkArg('*', 2829, 2830, 1, PrimChecks.turtle.getVariable(2823, 2828, "speed")), PrimChecks.validator.checkArg('*', 2829, 2830, 1, world.observer.getGlobal("tick-length"))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2802, 2805, R); return R; }
  var R = ProcedurePrims.callCommand("collide-winners"); if (R === DeathInterrupt) { return R; }
  world.ticker.tickAdvance(world.observer.getGlobal("tick-length"));
  if (world.observer.getGlobal("manage-view-updates?")) {
    if (Prims.gt(PrimChecks.math.minus(3338, 3339, world.ticker.tickCount(), PrimChecks.validator.checkArg('-', 3338, 3339, 1, world.observer.getGlobal("last-view-update"))), world.observer.getGlobal("view-update-rate"))) {
      Prims.display();
      world.observer.setGlobal("last-view-update", world.ticker.tickCount());
    }
  }
}))
ProcedurePrims.defineReporter("convert-heading-x", 3449, 3510, (function(headingHangle) {
  return PrimChecks.procedure.report(3485, 3491, PrimChecks.math.sin(PrimChecks.validator.checkArg('SIN', 3492, 3495, 1, headingHangle)));
}))
ProcedurePrims.defineReporter("convert-heading-y", 3525, 3586, (function(headingHangle) {
  return PrimChecks.procedure.report(3561, 3567, PrimChecks.math.cos(PrimChecks.validator.checkArg('COS', 3568, 3571, 1, headingHangle)));
}))
ProcedurePrims.defineCommand("check-for-particle-collision", 3595, 10888, (function() {
  let myHx = PrimChecks.turtle.getVariable(4064, 4068, "xcor"); ProcedurePrims.stack().currentContext().registerStringRunVar("MY-X", myHx);
  let myHy = PrimChecks.turtle.getVariable(4080, 4084, "ycor"); ProcedurePrims.stack().currentContext().registerStringRunVar("MY-Y", myHy);
  let myHparticleHsize = PrimChecks.turtle.getVariable(4108, 4112, "size"); ProcedurePrims.stack().currentContext().registerStringRunVar("MY-PARTICLE-SIZE", myHparticleHsize);
  let myHxHspeed = PrimChecks.math.mult(4137, 4138, PrimChecks.validator.checkArg('*', 4137, 4138, 1, PrimChecks.turtle.getVariable(4131, 4136, "speed")), PrimChecks.validator.checkArg('*', 4137, 4138, 1, PrimChecks.procedure.callReporter(4139, 4156, "convert-heading-x", PrimChecks.turtle.getVariable(4157, 4164, "heading")))); ProcedurePrims.stack().currentContext().registerStringRunVar("MY-X-SPEED", myHxHspeed);
  let myHyHspeed = PrimChecks.math.mult(4190, 4191, PrimChecks.validator.checkArg('*', 4190, 4191, 1, PrimChecks.turtle.getVariable(4184, 4189, "speed")), PrimChecks.validator.checkArg('*', 4190, 4191, 1, PrimChecks.procedure.callReporter(4192, 4209, "convert-heading-y", PrimChecks.turtle.getVariable(4210, 4217, "heading")))); ProcedurePrims.stack().currentContext().registerStringRunVar("MY-Y-SPEED", myHyHspeed);
  var R = ProcedurePrims.ask(SelfPrims.other(world.turtleManager.turtlesOfBreed("PARTICLES")), function() {
    let dpx = PrimChecks.math.minus(4270, 4271, PrimChecks.validator.checkArg('-', 4270, 4271, 1, PrimChecks.turtle.getVariable(4265, 4269, "xcor")), PrimChecks.validator.checkArg('-', 4270, 4271, 1, myHx)); ProcedurePrims.stack().currentContext().registerStringRunVar("DPX", dpx);
    let dpy = PrimChecks.math.minus(4361, 4362, PrimChecks.validator.checkArg('-', 4361, 4362, 1, PrimChecks.turtle.getVariable(4356, 4360, "ycor")), PrimChecks.validator.checkArg('-', 4361, 4362, 1, myHy)); ProcedurePrims.stack().currentContext().registerStringRunVar("DPY", dpy);
    let xHspeed = PrimChecks.math.mult(4458, 4459, PrimChecks.validator.checkArg('*', 4458, 4459, 1, PrimChecks.turtle.getVariable(4452, 4457, "speed")), PrimChecks.validator.checkArg('*', 4458, 4459, 1, PrimChecks.procedure.callReporter(4460, 4477, "convert-heading-x", PrimChecks.turtle.getVariable(4478, 4485, "heading")))); ProcedurePrims.stack().currentContext().registerStringRunVar("X-SPEED", xHspeed);
    let yHspeed = PrimChecks.math.mult(4561, 4562, PrimChecks.validator.checkArg('*', 4561, 4562, 1, PrimChecks.turtle.getVariable(4555, 4560, "speed")), PrimChecks.validator.checkArg('*', 4561, 4562, 1, PrimChecks.procedure.callReporter(4563, 4580, "convert-heading-y", PrimChecks.turtle.getVariable(4581, 4588, "heading")))); ProcedurePrims.stack().currentContext().registerStringRunVar("Y-SPEED", yHspeed);
    let dvx = PrimChecks.math.minus(4662, 4663, PrimChecks.validator.checkArg('-', 4662, 4663, 1, xHspeed), PrimChecks.validator.checkArg('-', 4662, 4663, 1, myHxHspeed)); ProcedurePrims.stack().currentContext().registerStringRunVar("DVX", dvx);
    let dvy = PrimChecks.math.minus(4768, 4769, PrimChecks.validator.checkArg('-', 4768, 4769, 1, yHspeed), PrimChecks.validator.checkArg('-', 4768, 4769, 1, myHyHspeed)); ProcedurePrims.stack().currentContext().registerStringRunVar("DVY", dvy);
    let sumHr = PrimChecks.math.plus(4894, 4895, PrimChecks.math.div(4888, 4889, PrimChecks.validator.checkArg('/', 4888, 4889, 1, myHparticleHsize), 2), PrimChecks.math.div(4914, 4915, PrimChecks.validator.checkArg('/', 4914, 4915, 1, PrimChecks.agentset.of(SelfManager.self(), function() { return PrimChecks.turtle.getVariable(4899, 4903, "size"); })), 2)); ProcedurePrims.stack().currentContext().registerStringRunVar("SUM-R", sumHr);
    let pHsquared = PrimChecks.math.minus(6541, 6542, PrimChecks.math.plus(6526, 6527, PrimChecks.math.mult(6519, 6520, PrimChecks.validator.checkArg('*', 6519, 6520, 1, dpx), PrimChecks.validator.checkArg('*', 6519, 6520, 1, dpx)), PrimChecks.math.mult(6533, 6534, PrimChecks.validator.checkArg('*', 6533, 6534, 1, dpy), PrimChecks.validator.checkArg('*', 6533, 6534, 1, dpy))), PrimChecks.math.pow(6550, 6551, PrimChecks.validator.checkArg('^', 6550, 6551, 1, sumHr), 2)); ProcedurePrims.stack().currentContext().registerStringRunVar("P-SQUARED", pHsquared);
    let pv = PrimChecks.math.mult(6824, 6825, 2, PrimChecks.math.plus(6839, 6840, PrimChecks.math.mult(6832, 6833, PrimChecks.validator.checkArg('*', 6832, 6833, 1, dpx), PrimChecks.validator.checkArg('*', 6832, 6833, 1, dvx)), PrimChecks.math.mult(6846, 6847, PrimChecks.validator.checkArg('*', 6846, 6847, 1, dpy), PrimChecks.validator.checkArg('*', 6846, 6847, 1, dvy)))); ProcedurePrims.stack().currentContext().registerStringRunVar("PV", pv);
    let vHsquared = PrimChecks.math.plus(6949, 6950, PrimChecks.math.mult(6942, 6943, PrimChecks.validator.checkArg('*', 6942, 6943, 1, dvx), PrimChecks.validator.checkArg('*', 6942, 6943, 1, dvx)), PrimChecks.math.mult(6956, 6957, PrimChecks.validator.checkArg('*', 6956, 6957, 1, dvy), PrimChecks.validator.checkArg('*', 6956, 6957, 1, dvy))); ProcedurePrims.stack().currentContext().registerStringRunVar("V-SQUARED", vHsquared);
    let d1 = PrimChecks.math.minus(8268, 8269, PrimChecks.math.pow(8264, 8265, PrimChecks.validator.checkArg('^', 8264, 8265, 1, pv), 2), PrimChecks.math.mult(8286, 8287, PrimChecks.math.mult(8274, 8275, 4, PrimChecks.validator.checkArg('*', 8274, 8275, 1, vHsquared)), PrimChecks.validator.checkArg('*', 8286, 8287, 1, pHsquared))); ProcedurePrims.stack().currentContext().registerStringRunVar("D1", d1);
    let timeHtoHcollision = -1; ProcedurePrims.stack().currentContext().registerStringRunVar("TIME-TO-COLLISION", timeHtoHcollision);
    if (Prims.gte(d1, 0)) {
      timeHtoHcollision = PrimChecks.math.div(9547, 9548, PrimChecks.math.minus(9536, 9537, PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 9531, 9532, 1, pv)), PrimChecks.math.sqrt(9538, 9542, PrimChecks.validator.checkArg('SQRT', 9538, 9542, 1, d1))), PrimChecks.math.mult(9552, 9553, 2, PrimChecks.validator.checkArg('*', 9552, 9553, 1, vHsquared))); ProcedurePrims.stack().currentContext().updateStringRunVar("TIME-TO-COLLISION", timeHtoHcollision);
    }
    if (Prims.gt(timeHtoHcollision, 0)) {
      let collidingHpair = ListPrims.list(PrimChecks.math.plus(10404, 10405, PrimChecks.validator.checkArg('+', 10404, 10405, 1, timeHtoHcollision), world.ticker.tickCount()), SelfManager.self(), SelfManager.myself()); ProcedurePrims.stack().currentContext().registerStringRunVar("COLLIDING-PAIR", collidingHpair);
      world.observer.setGlobal("colliding-particles", PrimChecks.list.fput(collidingHpair, PrimChecks.validator.checkArg('FPUT', 10596, 10600, 8, world.observer.getGlobal("colliding-particles"))));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4222, 4225, R); return R; }
}))
ProcedurePrims.defineCommand("check-for-wall-collision", 10897, 13047, (function() {
  let xHspeed = PrimChecks.math.mult(11069, 11070, PrimChecks.validator.checkArg('*', 11069, 11070, 1, PrimChecks.turtle.getVariable(11063, 11068, "speed")), PrimChecks.validator.checkArg('*', 11069, 11070, 1, PrimChecks.procedure.callReporter(11071, 11088, "convert-heading-x", PrimChecks.turtle.getVariable(11089, 11096, "heading")))); ProcedurePrims.stack().currentContext().registerStringRunVar("X-SPEED", xHspeed);
  let yHspeed = PrimChecks.math.mult(11119, 11120, PrimChecks.validator.checkArg('*', 11119, 11120, 1, PrimChecks.turtle.getVariable(11113, 11118, "speed")), PrimChecks.validator.checkArg('*', 11119, 11120, 1, PrimChecks.procedure.callReporter(11121, 11138, "convert-heading-y", PrimChecks.turtle.getVariable(11139, 11146, "heading")))); ProcedurePrims.stack().currentContext().registerStringRunVar("Y-SPEED", yHspeed);
  let xposHplane = PrimChecks.math.minus(11175, 11176, PrimChecks.validator.checkArg('-', 11175, 11176, 1, world.observer.getGlobal("box-edge")), 0.5); ProcedurePrims.stack().currentContext().registerStringRunVar("XPOS-PLANE", xposHplane);
  let xnegHplane = PrimChecks.math.plus(11259, 11260, PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 11248, 11249, 1, world.observer.getGlobal("box-edge"))), 0.5); ProcedurePrims.stack().currentContext().registerStringRunVar("XNEG-PLANE", xnegHplane);
  let yposHplane = PrimChecks.math.minus(11338, 11339, PrimChecks.validator.checkArg('-', 11338, 11339, 1, world.observer.getGlobal("box-edge")), 0.5); ProcedurePrims.stack().currentContext().registerStringRunVar("YPOS-PLANE", yposHplane);
  let ynegHplane = PrimChecks.math.plus(11420, 11421, PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 11409, 11410, 1, world.observer.getGlobal("box-edge"))), 0.5); ProcedurePrims.stack().currentContext().registerStringRunVar("YNEG-PLANE", ynegHplane);
  let contactHpointHxpos = PrimChecks.math.plus(11674, 11675, PrimChecks.validator.checkArg('+', 11674, 11675, 1, PrimChecks.turtle.getVariable(11669, 11673, "xcor")), PrimChecks.math.div(11682, 11683, PrimChecks.validator.checkArg('/', 11682, 11683, 1, PrimChecks.turtle.getVariable(11677, 11681, "size")), 2)); ProcedurePrims.stack().currentContext().registerStringRunVar("CONTACT-POINT-XPOS", contactHpointHxpos);
  let contactHpointHxneg = PrimChecks.math.minus(11719, 11720, PrimChecks.validator.checkArg('-', 11719, 11720, 1, PrimChecks.turtle.getVariable(11714, 11718, "xcor")), PrimChecks.math.div(11727, 11728, PrimChecks.validator.checkArg('/', 11727, 11728, 1, PrimChecks.turtle.getVariable(11722, 11726, "size")), 2)); ProcedurePrims.stack().currentContext().registerStringRunVar("CONTACT-POINT-XNEG", contactHpointHxneg);
  let contactHpointHypos = PrimChecks.math.plus(11764, 11765, PrimChecks.validator.checkArg('+', 11764, 11765, 1, PrimChecks.turtle.getVariable(11759, 11763, "ycor")), PrimChecks.math.div(11772, 11773, PrimChecks.validator.checkArg('/', 11772, 11773, 1, PrimChecks.turtle.getVariable(11767, 11771, "size")), 2)); ProcedurePrims.stack().currentContext().registerStringRunVar("CONTACT-POINT-YPOS", contactHpointHypos);
  let contactHpointHyneg = PrimChecks.math.minus(11809, 11810, PrimChecks.validator.checkArg('-', 11809, 11810, 1, PrimChecks.turtle.getVariable(11804, 11808, "ycor")), PrimChecks.math.div(11817, 11818, PrimChecks.validator.checkArg('/', 11817, 11818, 1, PrimChecks.turtle.getVariable(11812, 11816, "size")), 2)); ProcedurePrims.stack().currentContext().registerStringRunVar("CONTACT-POINT-YNEG", contactHpointHyneg);
  let dpxpos = PrimChecks.math.minus(11925, 11926, PrimChecks.validator.checkArg('-', 11925, 11926, 1, xposHplane), PrimChecks.validator.checkArg('-', 11925, 11926, 1, contactHpointHxpos)); ProcedurePrims.stack().currentContext().registerStringRunVar("DPXPOS", dpxpos);
  let dpxneg = PrimChecks.math.minus(11972, 11973, PrimChecks.validator.checkArg('-', 11972, 11973, 1, xnegHplane), PrimChecks.validator.checkArg('-', 11972, 11973, 1, contactHpointHxneg)); ProcedurePrims.stack().currentContext().registerStringRunVar("DPXNEG", dpxneg);
  let dpypos = PrimChecks.math.minus(12019, 12020, PrimChecks.validator.checkArg('-', 12019, 12020, 1, yposHplane), PrimChecks.validator.checkArg('-', 12019, 12020, 1, contactHpointHypos)); ProcedurePrims.stack().currentContext().registerStringRunVar("DPYPOS", dpypos);
  let dpyneg = PrimChecks.math.minus(12066, 12067, PrimChecks.validator.checkArg('-', 12066, 12067, 1, ynegHplane), PrimChecks.validator.checkArg('-', 12066, 12067, 1, contactHpointHyneg)); ProcedurePrims.stack().currentContext().registerStringRunVar("DPYNEG", dpyneg);
  let tHplaneHxpos = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("T-PLANE-XPOS", tHplaneHxpos);
  if (!Prims.equality(xHspeed, 0)) {
    tHplaneHxpos = PrimChecks.math.div(12327, 12328, PrimChecks.validator.checkArg('/', 12327, 12328, 1, dpxpos), PrimChecks.validator.checkArg('/', 12327, 12328, 1, xHspeed)); ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-XPOS", tHplaneHxpos);
  }
  else {
    tHplaneHxpos = 0; ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-XPOS", tHplaneHxpos);
  }
  if (Prims.gt(tHplaneHxpos, 0)) {
    var R = ProcedurePrims.callCommand("assign-colliding-wall", tHplaneHxpos, "plane-xpos"); if (R === DeathInterrupt) { return R; }
  }
  let tHplaneHxneg = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("T-PLANE-XNEG", tHplaneHxneg);
  if (!Prims.equality(xHspeed, 0)) {
    tHplaneHxneg = PrimChecks.math.div(12525, 12526, PrimChecks.validator.checkArg('/', 12525, 12526, 1, dpxneg), PrimChecks.validator.checkArg('/', 12525, 12526, 1, xHspeed)); ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-XNEG", tHplaneHxneg);
  }
  else {
    tHplaneHxneg = 0; ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-XNEG", tHplaneHxneg);
  }
  if (Prims.gt(tHplaneHxneg, 0)) {
    var R = ProcedurePrims.callCommand("assign-colliding-wall", tHplaneHxneg, "plane-xneg"); if (R === DeathInterrupt) { return R; }
  }
  let tHplaneHypos = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("T-PLANE-YPOS", tHplaneHypos);
  if (!Prims.equality(yHspeed, 0)) {
    tHplaneHypos = PrimChecks.math.div(12722, 12723, PrimChecks.validator.checkArg('/', 12722, 12723, 1, dpypos), PrimChecks.validator.checkArg('/', 12722, 12723, 1, yHspeed)); ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-YPOS", tHplaneHypos);
  }
  else {
    tHplaneHypos = 0; ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-YPOS", tHplaneHypos);
  }
  if (Prims.gt(tHplaneHypos, 0)) {
    var R = ProcedurePrims.callCommand("assign-colliding-wall", tHplaneHypos, "plane-ypos"); if (R === DeathInterrupt) { return R; }
  }
  let tHplaneHyneg = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("T-PLANE-YNEG", tHplaneHyneg);
  if (!Prims.equality(yHspeed, 0)) {
    tHplaneHyneg = PrimChecks.math.div(12920, 12921, PrimChecks.validator.checkArg('/', 12920, 12921, 1, dpyneg), PrimChecks.validator.checkArg('/', 12920, 12921, 1, yHspeed)); ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-YNEG", tHplaneHyneg);
  }
  else {
    tHplaneHyneg = 0; ProcedurePrims.stack().currentContext().updateStringRunVar("T-PLANE-YNEG", tHplaneHyneg);
  }
  if (Prims.gt(tHplaneHyneg, 0)) {
    var R = ProcedurePrims.callCommand("assign-colliding-wall", tHplaneHyneg, "plane-yneg"); if (R === DeathInterrupt) { return R; }
  }
}))
ProcedurePrims.defineCommand("assign-colliding-wall", 13055, 13589, (function(timeHtoHcollision, wall) {
  let collidingHpair = ListPrims.list(PrimChecks.math.plus(13502, 13503, PrimChecks.validator.checkArg('+', 13502, 13503, 1, timeHtoHcollision), world.ticker.tickCount()), SelfManager.self(), wall); ProcedurePrims.stack().currentContext().registerStringRunVar("COLLIDING-PAIR", collidingHpair);
  world.observer.setGlobal("colliding-particles", PrimChecks.list.fput(collidingHpair, PrimChecks.validator.checkArg('FPUT', 13548, 13552, 8, world.observer.getGlobal("colliding-particles"))));
}))
ProcedurePrims.defineCommand("sort-collisions", 13598, 15397, (function() {
  world.observer.setGlobal("colliding-particles", PrimChecks.list.filter(13920, 13926, PrimChecks.task.checked(13927, 13928, function(collision) {
    PrimChecks.procedure.runArgCountCheck('runresult', 13948, 14036, 1, arguments.length);
    return (!Prims.equality(PrimChecks.list.item(13948, 13952, 1, PrimChecks.validator.checkArg('ITEM', 13948, 13952, 12, collision)), world.observer.getGlobal("colliding-particle-1")) || !Prims.equality(PrimChecks.list.item(13996, 14000, 2, PrimChecks.validator.checkArg('ITEM', 13996, 14000, 12, collision)), world.observer.getGlobal("colliding-particle-2")));
  }, "[ [collision] -> item 1 collision != colliding-particle-1 or item 2 collision != colliding-particle-2 ]", true, false), PrimChecks.validator.checkArg('FILTER', 13920, 13926, 8, world.observer.getGlobal("colliding-particles"))));
  world.observer.setGlobal("colliding-particle-1", Nobody);
  world.observer.setGlobal("colliding-particle-2", Nobody);
  world.observer.setGlobal("tick-length", world.observer.getGlobal("original-tick-length"));
  if (Prims.equality(world.observer.getGlobal("colliding-particles"), [])) {
    return PrimChecks.procedure.stop(14199, 14203);
  }
  let winner = PrimChecks.list.first(14503, 14508, PrimChecks.validator.checkArg('FIRST', 14503, 14508, 12, world.observer.getGlobal("colliding-particles"))); ProcedurePrims.stack().currentContext().registerStringRunVar("WINNER", winner);
  var R = PrimChecks.task.forEach(14531, 14538, PrimChecks.validator.checkArg('FOREACH', 14531, 14538, 8, world.observer.getGlobal("colliding-particles")), PrimChecks.task.checked(14559, 14560, function(collision) {
    PrimChecks.procedure.runArgCountCheck('run', 14559, 14633, 1, arguments.length);
    if (Prims.lt(PrimChecks.list.first(14579, 14584, PrimChecks.validator.checkArg('FIRST', 14579, 14584, 12, collision)), PrimChecks.list.first(14597, 14602, PrimChecks.validator.checkArg('FIRST', 14597, 14602, 12, winner)))) {
      winner = collision; ProcedurePrims.stack().currentContext().updateStringRunVar("WINNER", winner);
    }
  }, "[ [collision] -> if first collision < first winner [ set winner collision ] ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(14531, 14538, R); return R; }
  let dt = PrimChecks.list.item(14696, 14700, 0, PrimChecks.validator.checkArg('ITEM', 14696, 14700, 12, winner)); ProcedurePrims.stack().currentContext().registerStringRunVar("DT", dt);
  if (Prims.gt(dt, 0)) {
    if (Prims.lte(PrimChecks.math.minus(14921, 14922, PrimChecks.validator.checkArg('-', 14921, 14922, 1, dt), world.ticker.tickCount()), 1)) {
      world.observer.setGlobal("tick-length", PrimChecks.math.minus(15108, 15109, PrimChecks.validator.checkArg('-', 15108, 15109, 1, dt), world.ticker.tickCount()));
      world.observer.setGlobal("colliding-particle-1", PrimChecks.list.item(15146, 15150, 1, PrimChecks.validator.checkArg('ITEM', 15146, 15150, 12, winner)));
      world.observer.setGlobal("colliding-particle-2", PrimChecks.list.item(15190, 15194, 2, PrimChecks.validator.checkArg('ITEM', 15190, 15194, 12, winner)));
    }
    else {
      world.observer.setGlobal("tick-length", 1);
    }
  }
}))
ProcedurePrims.defineCommand("collide-winners", 15406, 16178, (function() {
  if (Prims.equality(world.observer.getGlobal("colliding-particle-1"), Nobody)) {
    return PrimChecks.procedure.stop(15595, 15599);
  }
  if ((Prims.equality(world.observer.getGlobal("colliding-particle-2"), "plane-xpos") || Prims.equality(world.observer.getGlobal("colliding-particle-2"), "plane-xneg"))) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 15785, 15788, 1904, world.observer.getGlobal("colliding-particle-1")), function() {
      PrimChecks.turtle.setVariable(15815, 15822, "heading", PrimChecks.math.unaryminus(PrimChecks.validator.checkArg('-', 15824, 15825, 1, PrimChecks.turtle.getVariable(15826, 15833, "heading"))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15785, 15788, R); return R; }
    return PrimChecks.procedure.stop(15846, 15850);
  }
  if ((Prims.equality(world.observer.getGlobal("colliding-particle-2"), "plane-ypos") || Prims.equality(world.observer.getGlobal("colliding-particle-2"), "plane-yneg"))) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 15944, 15947, 1904, world.observer.getGlobal("colliding-particle-1")), function() {
      PrimChecks.turtle.setVariable(15974, 15981, "heading", PrimChecks.math.minus(15987, 15988, 180, PrimChecks.validator.checkArg('-', 15987, 15988, 1, PrimChecks.turtle.getVariable(15989, 15996, "heading"))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(15944, 15947, R); return R; }
    return PrimChecks.procedure.stop(16009, 16013);
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 16116, 16119, 1904, world.observer.getGlobal("colliding-particle-1")), function() {
    var R = ProcedurePrims.callCommand("collide-with", world.observer.getGlobal("colliding-particle-2")); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(16116, 16119, R); return R; }
}))
ProcedurePrims.defineCommand("collide-with", 16187, 18316, (function(otherHparticle) {
  let mass2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 16358, 16360, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(16352, 16356, "mass"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("MASS2", mass2);
  let speed2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 16399, 16401, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(16392, 16397, "speed"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("SPEED2", speed2);
  let heading2 = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 16444, 16446, 1904, otherHparticle), function() { return PrimChecks.turtle.getVariable(16435, 16442, "heading"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("HEADING2", heading2);
  let theta = PrimChecks.turtle.towards(16535, 16542, PrimChecks.validator.checkArg('TOWARDS', 16535, 16542, 768, otherHparticle)); ProcedurePrims.stack().currentContext().registerStringRunVar("THETA", theta);
  let v1t = PrimChecks.math.mult(16769, 16770, PrimChecks.validator.checkArg('*', 16769, 16770, 1, PrimChecks.turtle.getVariable(16763, 16768, "speed")), PrimChecks.math.cos(PrimChecks.math.minus(16782, 16783, PrimChecks.validator.checkArg('-', 16782, 16783, 1, theta), PrimChecks.validator.checkArg('-', 16782, 16783, 1, PrimChecks.turtle.getVariable(16784, 16791, "heading"))))); ProcedurePrims.stack().currentContext().registerStringRunVar("V1T", v1t);
  let v1l = PrimChecks.math.mult(16811, 16812, PrimChecks.validator.checkArg('*', 16811, 16812, 1, PrimChecks.turtle.getVariable(16805, 16810, "speed")), PrimChecks.math.sin(PrimChecks.math.minus(16824, 16825, PrimChecks.validator.checkArg('-', 16824, 16825, 1, theta), PrimChecks.validator.checkArg('-', 16824, 16825, 1, PrimChecks.turtle.getVariable(16826, 16833, "heading"))))); ProcedurePrims.stack().currentContext().registerStringRunVar("V1L", v1l);
  let v2t = PrimChecks.math.mult(16891, 16892, PrimChecks.validator.checkArg('*', 16891, 16892, 1, speed2), PrimChecks.math.cos(PrimChecks.math.minus(16904, 16905, PrimChecks.validator.checkArg('-', 16904, 16905, 1, theta), PrimChecks.validator.checkArg('-', 16904, 16905, 1, heading2)))); ProcedurePrims.stack().currentContext().registerStringRunVar("V2T", v2t);
  let v2l = PrimChecks.math.mult(16935, 16936, PrimChecks.validator.checkArg('*', 16935, 16936, 1, speed2), PrimChecks.math.sin(PrimChecks.math.minus(16948, 16949, PrimChecks.validator.checkArg('-', 16948, 16949, 1, theta), PrimChecks.validator.checkArg('-', 16948, 16949, 1, heading2)))); ProcedurePrims.stack().currentContext().registerStringRunVar("V2L", v2l);
  let vcm = PrimChecks.math.div(17131, 17132, PrimChecks.math.plus(17114, 17115, PrimChecks.math.mult(17107, 17108, PrimChecks.validator.checkArg('*', 17107, 17108, 1, PrimChecks.turtle.getVariable(17102, 17106, "mass")), PrimChecks.validator.checkArg('*', 17107, 17108, 1, v1t)), PrimChecks.math.mult(17123, 17124, PrimChecks.validator.checkArg('*', 17123, 17124, 1, mass2), PrimChecks.validator.checkArg('*', 17123, 17124, 1, v2t))), PrimChecks.math.plus(17139, 17140, PrimChecks.validator.checkArg('+', 17139, 17140, 1, PrimChecks.turtle.getVariable(17134, 17138, "mass")), PrimChecks.validator.checkArg('+', 17139, 17140, 1, mass2))); ProcedurePrims.stack().currentContext().registerStringRunVar("VCM", vcm);
  v1t = PrimChecks.math.minus(17505, 17506, PrimChecks.math.mult(17499, 17500, 2, PrimChecks.validator.checkArg('*', 17499, 17500, 1, vcm)), PrimChecks.validator.checkArg('-', 17505, 17506, 1, v1t)); ProcedurePrims.stack().currentContext().updateStringRunVar("V1T", v1t);
  v2t = PrimChecks.math.minus(17531, 17532, PrimChecks.math.mult(17525, 17526, 2, PrimChecks.validator.checkArg('*', 17525, 17526, 1, vcm)), PrimChecks.validator.checkArg('-', 17531, 17532, 1, v2t)); ProcedurePrims.stack().currentContext().updateStringRunVar("V2T", v2t);
  PrimChecks.turtle.setVariable(17665, 17670, "speed", PrimChecks.math.sqrt(17671, 17675, PrimChecks.math.plus(17689, 17690, PrimChecks.math.mult(17682, 17683, PrimChecks.validator.checkArg('*', 17682, 17683, 1, v1t), PrimChecks.validator.checkArg('*', 17682, 17683, 1, v1t)), PrimChecks.math.mult(17696, 17697, PrimChecks.validator.checkArg('*', 17696, 17697, 1, v1l), PrimChecks.validator.checkArg('*', 17696, 17697, 1, v1l)))));
  if ((!Prims.equality(v1l, 0) || !Prims.equality(v1t, 0))) {
    PrimChecks.turtle.setVariable(17930, 17937, "heading", PrimChecks.math.minus(17945, 17946, PrimChecks.validator.checkArg('-', 17945, 17946, 1, theta), PrimChecks.math.atan(17948, 17952, PrimChecks.validator.checkArg('ATAN', 17948, 17952, 1, v1l), PrimChecks.validator.checkArg('ATAN', 17948, 17952, 1, v1t))));
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 18008, 18011, 1904, otherHparticle), function() {
    PrimChecks.turtle.setVariable(18033, 18038, "speed", PrimChecks.math.sqrt(18039, 18043, PrimChecks.math.plus(18058, 18059, PrimChecks.math.mult(18051, 18052, PrimChecks.validator.checkArg('*', 18051, 18052, 1, v2t), PrimChecks.validator.checkArg('*', 18051, 18052, 1, v2t)), PrimChecks.math.mult(18065, 18066, PrimChecks.validator.checkArg('*', 18065, 18066, 1, v2l), PrimChecks.validator.checkArg('*', 18065, 18066, 1, v2l)))));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18008, 18011, R); return R; }
  if ((!Prims.equality(v2l, 0) || !Prims.equality(v2t, 0))) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 18108, 18111, 1904, otherHparticle), function() {
      PrimChecks.turtle.setVariable(18133, 18140, "heading", PrimChecks.math.minus(18148, 18149, PrimChecks.validator.checkArg('-', 18148, 18149, 1, theta), PrimChecks.math.atan(18151, 18155, PrimChecks.validator.checkArg('ATAN', 18151, 18155, 1, v2l), PrimChecks.validator.checkArg('ATAN', 18151, 18155, 1, v2t))));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18108, 18111, R); return R; }
  }
  var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 18285, 18288, 1904, otherHparticle), function() { var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(18285, 18288, R); return R; }
}))
ProcedurePrims.defineCommand("recolor", 18325, 18498, (function() {
  if (Prims.equality(world.observer.getGlobal("color-scheme"), "red-green-blue")) {
    var R = ProcedurePrims.callCommand("recolor-banded"); if (R === DeathInterrupt) { return R; }
  }
  if (Prims.equality(world.observer.getGlobal("color-scheme"), "blue shades")) {
    var R = ProcedurePrims.callCommand("recolor-shaded"); if (R === DeathInterrupt) { return R; }
  }
  if (Prims.equality(world.observer.getGlobal("color-scheme"), "one color")) {
    var R = ProcedurePrims.callCommand("recolor-none"); if (R === DeathInterrupt) { return R; }
  }
}))
ProcedurePrims.defineCommand("recolor-banded", 18507, 19156, (function() {
  let avgHspeed = 1; ProcedurePrims.stack().currentContext().registerStringRunVar("AVG-SPEED", avgHspeed);
  if (Prims.lt(PrimChecks.turtle.getVariable(18810, 18815, "speed"), PrimChecks.math.mult(18823, 18824, 0.5, PrimChecks.validator.checkArg('*', 18823, 18824, 1, avgHspeed)))) {
    PrimChecks.turtleOrLink.setVariable(18887, 18892, "color", 105);
  }
  else {
    if (Prims.gt(PrimChecks.turtle.getVariable(18954, 18959, "speed"), PrimChecks.math.mult(18967, 18968, 1.5, PrimChecks.validator.checkArg('*', 18967, 18968, 1, avgHspeed)))) {
      PrimChecks.turtleOrLink.setVariable(19030, 19035, "color", 15);
    }
    else {
      PrimChecks.turtleOrLink.setVariable(19092, 19097, "color", 55);
    }
  }
}))
ProcedurePrims.defineCommand("recolor-shaded", 19165, 19568, (function() {
  let avgHspeed = 1; ProcedurePrims.stack().currentContext().registerStringRunVar("AVG-SPEED", avgHspeed);
  if (Prims.lt(PrimChecks.turtle.getVariable(19453, 19458, "speed"), PrimChecks.math.mult(19464, 19465, 3, PrimChecks.validator.checkArg('*', 19464, 19465, 1, avgHspeed)))) {
    PrimChecks.turtleOrLink.setVariable(19485, 19490, "color", PrimChecks.math.plus(19505, 19506, PrimChecks.math.minus(19496, 19497, 95, 3.001), PrimChecks.math.div(19518, 19519, PrimChecks.math.mult(19510, 19511, 8, PrimChecks.validator.checkArg('*', 19510, 19511, 1, PrimChecks.turtle.getVariable(19512, 19517, "speed"))), PrimChecks.math.mult(19523, 19524, 3, PrimChecks.validator.checkArg('*', 19523, 19524, 1, avgHspeed)))));
  }
  else {
    PrimChecks.turtleOrLink.setVariable(19547, 19552, "color", PrimChecks.math.plus(19558, 19559, 95, 4.999));
  }
}))
ProcedurePrims.defineCommand("recolor-none", 19576, 19611, (function() {
  PrimChecks.turtleOrLink.setVariable(19595, 19600, "color", PrimChecks.math.minus(19607, 19608, 55, 1));
}))
ProcedurePrims.defineCommand("make-box", 19652, 19840, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(19675, 19679, world.patches(), function() {
    return ((Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 19684, 19687, 1, PrimChecks.patch.getVariable(19688, 19693, "pxcor"))), world.observer.getGlobal("box-edge")) && Prims.lte(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 19711, 19714, 1, PrimChecks.patch.getVariable(19715, 19720, "pycor"))), world.observer.getGlobal("box-edge"))) || (Prims.equality(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 19761, 19764, 1, PrimChecks.patch.getVariable(19765, 19770, "pycor"))), world.observer.getGlobal("box-edge")) && Prims.lte(PrimChecks.math.abs(PrimChecks.validator.checkArg('ABS', 19788, 19791, 1, PrimChecks.patch.getVariable(19792, 19797, "pxcor"))), world.observer.getGlobal("box-edge"))));
  }), function() { PrimChecks.patch.setVariable(19824, 19830, "pcolor", 45); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19663, 19666, R); return R; }
}))
ProcedurePrims.defineCommand("make-particles", 19874, 20194, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.createOrderedTurtles(world.observer.getGlobal("number"), "PARTICLES"), function() {
    PrimChecks.turtle.setVariable(19933, 19938, "speed", 1);
    PrimChecks.turtle.setVariable(19949, 19953, "size", PrimChecks.math.plus(19977, 19978, PrimChecks.validator.checkArg('+', 19977, 19978, 1, world.observer.getGlobal("smallest-particle-size")), PrimChecks.math.randomFloat(PrimChecks.math.minus(20015, 20016, PrimChecks.validator.checkArg('-', 20015, 20016, 1, world.observer.getGlobal("largest-particle-size")), PrimChecks.validator.checkArg('-', 20015, 20016, 1, world.observer.getGlobal("smallest-particle-size"))))));
    PrimChecks.turtle.setVariable(20049, 20053, "mass", PrimChecks.math.mult(20060, 20061, PrimChecks.validator.checkArg('*', 20060, 20061, 1, PrimChecks.turtle.getVariable(20055, 20059, "size")), PrimChecks.validator.checkArg('*', 20060, 20061, 1, PrimChecks.turtle.getVariable(20062, 20066, "size"))));
    var R = ProcedurePrims.callCommand("recolor"); if (R === DeathInterrupt) { return R; }
    PrimChecks.turtle.setVariable(20145, 20152, "heading", PrimChecks.math.randomFloat(360));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(19891, 19915, R); return R; }
  var R = ProcedurePrims.callCommand("arrange", world.turtleManager.turtlesOfBreed("PARTICLES")); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("arrange", 20651, 20792, (function(particleHset) {
  if (PrimChecks.math.not(PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 20683, 20687, 112, particleHset)))) {
    return PrimChecks.procedure.stop(20703, 20707);
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 20712, 20715, 1904, particleHset), function() { var R = ProcedurePrims.callCommand("random-position"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(20712, 20715, R); return R; }
  var R = ProcedurePrims.callCommand("arrange", PrimChecks.agentset.with(20772, 20776, PrimChecks.validator.checkArg('WITH', 20772, 20776, 112, particleHset), function() { return PrimChecks.procedure.callReporter(20778, 20790, "overlapping?"); })); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineReporter("overlapping?", 20807, 21057, (function() {
  return PrimChecks.procedure.report(20897, 20903, PrimChecks.agentset.anyOtherWith(null, null, SelfManager.self().inRadius(world.turtleManager.turtlesOfBreed("PARTICLES"), PrimChecks.math.div(20967, 20968, PrimChecks.math.plus(20942, 20943, PrimChecks.validator.checkArg('+', 20942, 20943, 1, PrimChecks.turtle.getVariable(20937, 20941, "size")), PrimChecks.validator.checkArg('+', 20942, 20943, 1, world.observer.getGlobal("largest-particle-size"))), 2)), function() {
    return Prims.lt(SelfManager.self().distance(SelfManager.myself()), PrimChecks.math.div(21052, 21053, PrimChecks.math.plus(21032, 21033, PrimChecks.validator.checkArg('+', 21032, 21033, 1, PrimChecks.turtle.getVariable(21027, 21031, "size")), PrimChecks.validator.checkArg('+', 21032, 21033, 1, PrimChecks.agentset.of(SelfManager.myself(), function() { return PrimChecks.turtle.getVariable(21035, 21039, "size"); }))), 2));
  }));
}))
ProcedurePrims.defineCommand("random-position", 21118, 21287, (function() {
  PrimChecks.turtle.setXY(21159, 21164, PrimChecks.math.mult(21179, 21180, PrimChecks.validator.checkArg('*', 21179, 21180, 1, PrimChecks.list.oneOf(21165, 21171, [1, -1])), PrimChecks.math.randomFloat(PrimChecks.math.minus(21210, 21211, PrimChecks.math.minus(21204, 21205, PrimChecks.validator.checkArg('-', 21204, 21205, 1, world.observer.getGlobal("box-edge")), 0.5), PrimChecks.math.div(21217, 21218, PrimChecks.validator.checkArg('/', 21217, 21218, 1, PrimChecks.turtle.getVariable(21212, 21216, "size")), 2)))), PrimChecks.math.mult(21244, 21245, PrimChecks.validator.checkArg('*', 21244, 21245, 1, PrimChecks.list.oneOf(21230, 21236, [1, -1])), PrimChecks.math.randomFloat(PrimChecks.math.minus(21275, 21276, PrimChecks.math.minus(21269, 21270, PrimChecks.validator.checkArg('-', 21269, 21270, 1, world.observer.getGlobal("box-edge")), 0.5), PrimChecks.math.div(21282, 21283, PrimChecks.validator.checkArg('/', 21282, 21283, 1, PrimChecks.turtle.getVariable(21277, 21281, "size")), 2)))));
}))
ProcedurePrims.defineCommand("reverse-time", 21338, 22048, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { SelfManager.self().right(180); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(21353, 21356, R); return R; }
  var R = ProcedurePrims.callCommand("rebuild-collision-list"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("collide-winners"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("test-time-reversal", 22865, 23061, (function(n) {
  var R = ProcedurePrims.callCommand("setup"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { SelfManager.self().stamp(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(22898, 22901, R); return R; }
  while (Prims.lt(world.ticker.tickCount(), n)) {
    var R = ProcedurePrims.callCommand("go"); if (R === DeathInterrupt) { return R; }
  }
  let oldHclock = world.ticker.tickCount(); ProcedurePrims.stack().currentContext().registerStringRunVar("OLD-CLOCK", oldHclock);
  var R = ProcedurePrims.callCommand("reverse-time"); if (R === DeathInterrupt) { return R; }
  while (Prims.lt(world.ticker.tickCount(), PrimChecks.math.mult(23005, 23006, 2, PrimChecks.validator.checkArg('*', 23005, 23006, 1, oldHclock)))) {
    var R = ProcedurePrims.callCommand("go"); if (R === DeathInterrupt) { return R; }
  }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PARTICLES"), function() { PrimChecks.turtleOrLink.setVariable(23047, 23052, "color", 9.9); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(23027, 23030, R); return R; }
}))
world.observer.setGlobal("number", 200);
world.observer.setGlobal("largest-particle-size", 4);
world.observer.setGlobal("color-scheme", "red-green-blue");
world.observer.setGlobal("smallest-particle-size", 1);