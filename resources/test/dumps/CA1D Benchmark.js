var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])([], [])('globals [   row           ;; current row   old-rule      ;; previous rule   rules-shown?  ;; flag to check if rules have been displayed   gone?         ;; flag to check if go has already been pressed   result ]  patches-own [on?]  to startup  ;; initially, nothing has been displayed   set rules-shown? false   set gone? false   set old-rule rule end  to benchmark   random-seed 4378   setup-random   reset-timer   repeat 10 * world-height [ go ]   set result timer end  ;;;;;;;;;;;;;;;;;;;;;;;; ;;; Setup Procedures ;;; ;;;;;;;;;;;;;;;;;;;;;;;;  to setup-general  ;; setup general working environment   cp ct   set row max-pycor   ;; reset current row   refresh-rules   set gone? false   set rules-shown? false  ;; rules are no longer shown since the screen has been cleared end  to single-cell   setup-general   ask patches with [pycor = row] [set on? false set pcolor background]  ;; initialize top row   ask patch 0 row [ set pcolor foreground                     set on? true ]   reset-ticks end  to setup-random   setup-general   ask patches with [pycor = row]  ;; randomly place cells across the top of the screen   [     set on? ((random 100) < density)     color-patch   ]   reset-ticks end  to setup-continue   let on?-list []   if not gone?  ;; make sure go has already been called     [ stop ]   set on?-list map [[p] -> [on?] of p] sort patches with [pycor = row]  ;; copy cell states from the                                                                  ;; current row to a list   setup-general   ask patches with [ pycor = row ]   [     set on? item (pxcor + max-pxcor) on?-list  ;; copy states from list to top row     color-patch   ]   set gone? true end   ;;;;;;;;;;;;;;;;;;;;;;;;;; ;;; GO Procedures      ;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;  to go   if (rules-shown?)  ;; don\'t do unless we are properly set up     [ stop ]   if (row = min-pycor)  ;; if we reach the end, continue from the top or stop   [     ifelse auto-continue?       [ display         setup-continue ]       [ stop ]   ]   ask patches with [ pycor = row ]  ;; apply rule     [ do-rule ]   set row (row - 1)   ask patches with [ pycor = row ]  ;; color in changed cells     [ color-patch ]   set gone? true   tick end   to do-rule  ;; patch procedure   let left-on? [on?] of patch-at -1 0  ;; set to true if the patch to the left is on   let right-on? [on?] of patch-at 1 0  ;; set to true if the patch to the right is on    ;; each of these lines checks the local area and (possibly)   ;; sets the lower cell according to the corresponding switch   let new-value     (iii and left-on?       and on?       and right-on?)          or     (iio and left-on?       and on?       and (not right-on?))    or     (ioi and left-on?       and (not on?) and right-on?)          or     (ioo and left-on?       and (not on?) and (not right-on?))    or     (oii and (not left-on?) and on?       and right-on?)          or     (oio and (not left-on?) and on?       and (not right-on?))    or     (ooi and (not left-on?) and (not on?) and right-on?)          or     (ooo and (not left-on?) and (not on?) and (not right-on?))   ask patch-at 0 -1 [ set on? new-value ] end   ;;;;;;;;;;;;;;;;;;;;;;;;;; ;;; Utility Procedures ;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;  to color-patch  ;;patch procedure   ifelse on?     [ set pcolor foreground ]     [ set pcolor background ] end   to-report bindigit [number power-of-two]   ifelse (power-of-two = 0)     [ report floor number mod 2 ]     [ report bindigit (floor number / 2) (power-of-two - 1) ] end  to refresh-rules  ;; update either switches or slider depending on which has been changed last   ifelse (rule = old-rule)   [     if (rule != calculate-rule)       [ set rule calculate-rule ]   ]   [ extrapolate-switches ]   set old-rule rule end  to extrapolate-switches   ;; set the switches based on the slider   set ooo ((bindigit rule 0) = 1)   set ooi ((bindigit rule 1) = 1)   set oio ((bindigit rule 2) = 1)   set oii ((bindigit rule 3) = 1)   set ioo ((bindigit rule 4) = 1)   set ioi ((bindigit rule 5) = 1)   set iio ((bindigit rule 6) = 1)   set iii ((bindigit rule 7) = 1) end  to-report calculate-rule   ;; set the slider based on the switches   let rresult 0   if ooo [ set rresult rresult +   1 ]   if ooi [ set rresult rresult +   2 ]   if oio [ set rresult rresult +   4 ]   if oii [ set rresult rresult +   8 ]   if ioo [ set rresult rresult +  16 ]   if ioi [ set rresult rresult +  32 ]   if iio [ set rresult rresult +  64 ]   if iii [ set rresult rresult + 128 ]   report rresult end   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; SHOW-RULES RELATED PROCEDURES ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to show-rules  ;; preview cell state transitions   setup-general   let rules list-rules    ask patches with [pycor > max-pycor - 5]     [ set pcolor gray ]    ;; create 8 turtles evenly spaced across the screen   ask patches with [ pycor = max-pycor and                     ((pxcor + 1) mod (floor (world-width / 8))) = 0 ]   [     sprout 1     [       set heading 270       fd 18  ;;16px offset + 2px       print-block (item 0 (item who rules))  ;; right cell       fd 2       print-block (item 1 (item who rules))  ;; center cell       fd 2       print-block (item 2 (item who rules))  ;; left cell       bk 2       set heading 180       fd 2       set heading 90       print-block (item 3 (item who rules))  ;; next cell state       die     ]   ]   set rules-shown? true end  ;; turtle procedure to print-block [ state ]  ;; draw a 2x2 block of with a color determined by the state   ifelse state     [ set color foreground ]     [ set color background ]   set heading 90   repeat 4   [     set pcolor color     rt 90     fd 1   ] end  to-report list-rules  ;; return a list of state-transition 4-tuples corresponding to the switches   let rules []   set rules (lput (lput ooo [false false false]) rules)   set rules (lput (lput ooi [false false true ]) rules)   set rules (lput (lput oio [false true  false]) rules)   set rules (lput (lput oii [false true  true ]) rules)   set rules (lput (lput ioo [true  false false]) rules)   set rules (lput (lput ioi [true  false true ]) rules)   set rules (lput (lput iio [true  true  false]) rules)   set rules (lput (lput iii [true  true  true ]) rules)   report rules end')([{"x":244,"y":11,"width":809,"height":610,"dimensions":{"minPxcor":-400,"maxPxcor":400,"minPycor":-300,"maxPycor":300,"patchSize":1,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"single-cell\"); if (R === StopInterrupt) { return R; }","type":"button","source":"single-cell","x":6,"y":10,"width":108,"height":33,"oldSize":true,"display":"Setup Single","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup-random\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup-random","x":120,"y":10,"width":105,"height":33,"oldSize":true,"display":"Setup Random","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"variable":"OOO","x":5,"y":187,"width":98,"height":33,"oldSize":true,"display":"OOO","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"OOI","x":103,"y":187,"width":100,"height":33,"oldSize":true,"display":"OOI","on":false,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"OIO","x":5,"y":220,"width":98,"height":33,"oldSize":true,"display":"OIO","on":false,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"OII","x":103,"y":220,"width":100,"height":33,"oldSize":true,"display":"OII","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"IOO","x":5,"y":253,"width":98,"height":33,"oldSize":true,"display":"IOO","on":false,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"IOI","x":103,"y":253,"width":100,"height":33,"oldSize":true,"display":"IOI","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"IIO","x":5,"y":286,"width":98,"height":33,"oldSize":true,"display":"IIO","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"variable":"III","x":103,"y":286,"width":100,"height":33,"oldSize":true,"display":"III","on":false,"type":"switch","compilation":{"success":true,"messages":[]}}, {"display":"Rule Switches:","x":6,"y":133,"width":90,"height":18,"fontSize":11,"markdown":false,"textColorLight":-16777216,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 139; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"foreground","x":7,"y":390,"width":115,"height":33,"oldSize":true,"display":"foreground","min":"0","max":"139","default":55,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 139; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"background","x":7,"y":423,"width":115,"height":33,"oldSize":true,"display":"background","min":"0","max":"139","default":0,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"display":"Colors:","x":10,"y":371,"width":90,"height":18,"fontSize":11,"markdown":false,"textColorLight":-16777216,"type":"textBox","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 255; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"rule","x":5,"y":154,"width":198,"height":33,"oldSize":true,"display":"rule","min":"0","max":"255","default":105,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 100; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 0; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"density","x":119,"y":46,"width":106,"height":33,"oldSize":true,"display":"density","min":"0","max":"100","default":10,"step":"1","units":"%","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup-continue\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup-continue","x":6,"y":46,"width":108,"height":33,"oldSize":true,"display":"Setup Continue","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":160,"y":83,"width":65,"height":33,"oldSize":true,"display":"Go","forever":true,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"show-rules\"); if (R === StopInterrupt) { return R; }","type":"button","source":"show-rules","x":5,"y":319,"width":99,"height":33,"oldSize":true,"display":"Show Rules","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"variable":"auto-continue?","x":7,"y":83,"width":140,"height":33,"oldSize":true,"display":"auto-continue?","on":true,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"benchmark\"); if (R === StopInterrupt) { return R; }","type":"button","source":"benchmark","x":123,"y":321,"width":119,"height":195,"oldSize":true,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"result\"); })","type":"monitor","source":"result","x":134,"y":465,"width":101,"height":45,"oldSize":true,"precision":17,"fontSize":11,"compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["ooo", "ooi", "oio", "oii", "ioo", "ioi", "iio", "iii", "foreground", "background", "rule", "density", "auto-continue?", "row", "old-rule", "rules-shown?", "gone?", "result"], ["ooo", "ooi", "oio", "oii", "ioo", "ioi", "iio", "iii", "foreground", "background", "rule", "density", "auto-continue?"], ["on?"], -400, 400, -300, 300, 1, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("startup", 234, 347, (function() {
  world.observer.setGlobal("rules-shown?", false);
  world.observer.setGlobal("gone?", false);
  world.observer.setGlobal("old-rule", world.observer.getGlobal("rule"));
}))
ProcedurePrims.defineCommand("benchmark", 355, 466, (function() {
  PrimChecks.math.randomSeed(367, 378, 4378);
  var R = ProcedurePrims.callCommand("setup-random"); if (R === DeathInterrupt) { return R; }
  workspace.timer.reset();
  for (let _index_415_421 = 0, _repeatcount_415_421 = StrictMath.floor(PrimChecks.math.mult(425, 426, 10, world.topology.height)); _index_415_421 < _repeatcount_415_421; _index_415_421++) {
    var R = ProcedurePrims.callCommand("go"); if (R === DeathInterrupt) { return R; }
  }
  world.observer.setGlobal("result", workspace.timer.elapsed());
}))
ProcedurePrims.defineCommand("setup-general", 550, 776, (function() {
  world.clearPatches();
  world.turtleManager.clearTurtles();
  world.observer.setGlobal("row", world.topology.maxPycor);
  var R = ProcedurePrims.callCommand("refresh-rules"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("gone?", false);
  world.observer.setGlobal("rules-shown?", false);
}))
ProcedurePrims.defineCommand("single-cell", 784, 997, (function() {
  var R = ProcedurePrims.callCommand("setup-general"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world._optimalPatchRow(world.observer.getGlobal("row")), function() {
    PrimChecks.patch.setVariable(850, 853, "on?", false);
    PrimChecks.patch.setVariable(864, 870, "pcolor", world.observer.getGlobal("background"));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(814, 817, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 908, 911, 1904, world.getPatchAt(0, PrimChecks.validator.checkArg('PATCH', 912, 917, 1, world.observer.getGlobal("row")))), function() {
    PrimChecks.patch.setVariable(930, 936, "pcolor", world.observer.getGlobal("foreground"));
    PrimChecks.patch.setVariable(972, 975, "on?", true);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(908, 911, R); return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-random", 1005, 1196, (function() {
  var R = ProcedurePrims.callCommand("setup-general"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world._optimalPatchRow(world.observer.getGlobal("row")), function() {
    PrimChecks.patch.setVariable(1133, 1136, "on?", Prims.lt(RandomPrims.randomLong(100), world.observer.getGlobal("density")));
    var R = ProcedurePrims.callCommand("color-patch"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1036, 1039, R); return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-continue", 1204, 1672, (function() {
  let on_QHlist = []; ProcedurePrims.stack().currentContext().registerStringRunVar("ON?-LIST", on_QHlist);
  if (PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 1242, 1245, 2, world.observer.getGlobal("gone?")))) {
    return PrimChecks.procedure.stop(1299, 1303);
  }
  on_QHlist = PrimChecks.task.map(1321, 1324, PrimChecks.task.checked(1325, 1326, function(p) {
    PrimChecks.procedure.runArgCountCheck('runresult', 1333, 1343, 1, arguments.length);
    return PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 1339, 1341, 1904, p), function() { return PrimChecks.patch.getVariable(1334, 1337, "on?"); });
  }, "[ [p] -> [ on? ] of p ]", true, false), PrimChecks.list.sort(world._optimalPatchRow(world.observer.getGlobal("row")))); ProcedurePrims.stack().currentContext().updateStringRunVar("ON?-LIST", on_QHlist);
  var R = ProcedurePrims.callCommand("setup-general"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world._optimalPatchRow(world.observer.getGlobal("row")), function() {
    PrimChecks.patch.setVariable(1560, 1563, "on?", PrimChecks.list.item(1564, 1568, PrimChecks.math.plus(1576, 1577, PrimChecks.validator.checkArg('+', 1576, 1577, 1, PrimChecks.patch.getVariable(1570, 1575, "pxcor")), world.topology.maxPxcor), PrimChecks.validator.checkArg('ITEM', 1564, 1568, 12, on_QHlist)));
    var R = ProcedurePrims.callCommand("color-patch"); if (R === DeathInterrupt) { return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1515, 1518, R); return R; }
  world.observer.setGlobal("gone?", true);
}))
ProcedurePrims.defineCommand("go", 1763, 2202, (function() {
  if (world.observer.getGlobal("rules-shown?")) {
    return PrimChecks.procedure.stop(1835, 1839);
  }
  if (Prims.equality(world.observer.getGlobal("row"), world.topology.minPycor)) {
    if (world.observer.getGlobal("auto-continue?")) {
      Prims.display();
      var R = ProcedurePrims.callCommand("setup-continue"); if (R === DeathInterrupt) { return R; }
    }
    else {
      return PrimChecks.procedure.stop(1999, 2003);
    }
  }
  var R = ProcedurePrims.ask(world._optimalPatchRow(world.observer.getGlobal("row")), function() { var R = ProcedurePrims.callCommand("do-rule"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2012, 2015, R); return R; }
  world.observer.setGlobal("row", PrimChecks.math.minus(2091, 2092, PrimChecks.validator.checkArg('-', 2091, 2092, 1, world.observer.getGlobal("row")), 1));
  var R = ProcedurePrims.ask(world._optimalPatchRow(world.observer.getGlobal("row")), function() { var R = ProcedurePrims.callCommand("color-patch"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2098, 2101, R); return R; }
  world.observer.setGlobal("gone?", true);
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("do-rule", 2211, 3140, (function() {
  let leftHon_Q = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 2260, 2262, 1904, SelfManager.self()._optimalPatchWest()), function() { return PrimChecks.patch.getVariable(2255, 2258, "on?"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("LEFT-ON?", leftHon_Q);
  let rightHon_Q = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 2346, 2348, 1904, SelfManager.self()._optimalPatchEast()), function() { return PrimChecks.patch.getVariable(2341, 2344, "on?"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("RIGHT-ON?", rightHon_Q);
  let newHvalue = ((((((((((PrimChecks.validator.checkArg('AND', 2561, 2564, 2, world.observer.getGlobal("iii")) && PrimChecks.validator.checkArg('AND', 2561, 2564, 2, leftHon_Q)) && PrimChecks.validator.checkArg('AND', 2580, 2583, 2, PrimChecks.patch.getVariable(2584, 2587, "on?"))) && PrimChecks.validator.checkArg('AND', 2594, 2597, 2, rightHon_Q)) || (((PrimChecks.validator.checkArg('AND', 2630, 2633, 2, world.observer.getGlobal("iio")) && PrimChecks.validator.checkArg('AND', 2630, 2633, 2, leftHon_Q)) && PrimChecks.validator.checkArg('AND', 2649, 2652, 2, PrimChecks.patch.getVariable(2653, 2656, "on?"))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2668, 2671, 2, rightHon_Q)))) || (((PrimChecks.validator.checkArg('AND', 2699, 2702, 2, world.observer.getGlobal("ioi")) && PrimChecks.validator.checkArg('AND', 2699, 2702, 2, leftHon_Q)) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2723, 2726, 2, PrimChecks.patch.getVariable(2727, 2730, "on?")))) && PrimChecks.validator.checkArg('AND', 2732, 2735, 2, rightHon_Q))) || (((PrimChecks.validator.checkArg('AND', 2768, 2771, 2, world.observer.getGlobal("ioo")) && PrimChecks.validator.checkArg('AND', 2768, 2771, 2, leftHon_Q)) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2792, 2795, 2, PrimChecks.patch.getVariable(2796, 2799, "on?")))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2806, 2809, 2, rightHon_Q)))) || (((PrimChecks.validator.checkArg('AND', 2837, 2840, 2, world.observer.getGlobal("oii")) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2842, 2845, 2, leftHon_Q))) && PrimChecks.validator.checkArg('AND', 2856, 2859, 2, PrimChecks.patch.getVariable(2860, 2863, "on?"))) && PrimChecks.validator.checkArg('AND', 2870, 2873, 2, rightHon_Q))) || (((PrimChecks.validator.checkArg('AND', 2906, 2909, 2, world.observer.getGlobal("oio")) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2911, 2914, 2, leftHon_Q))) && PrimChecks.validator.checkArg('AND', 2925, 2928, 2, PrimChecks.patch.getVariable(2929, 2932, "on?"))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2944, 2947, 2, rightHon_Q)))) || (((PrimChecks.validator.checkArg('AND', 2975, 2978, 2, world.observer.getGlobal("ooi")) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2980, 2983, 2, leftHon_Q))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 2999, 3002, 2, PrimChecks.patch.getVariable(3003, 3006, "on?")))) && PrimChecks.validator.checkArg('AND', 3008, 3011, 2, rightHon_Q))) || (((PrimChecks.validator.checkArg('AND', 3044, 3047, 2, world.observer.getGlobal("ooo")) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 3049, 3052, 2, leftHon_Q))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 3068, 3071, 2, PrimChecks.patch.getVariable(3072, 3075, "on?")))) && PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 3082, 3085, 2, rightHon_Q)))); ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-VALUE", newHvalue);
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 3100, 3103, 1904, SelfManager.self()._optimalPatchSouth()), function() { PrimChecks.patch.setVariable(3124, 3127, "on?", newHvalue); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3100, 3103, R); return R; }
}))
ProcedurePrims.defineCommand("color-patch", 3231, 3335, (function() {
  if (PrimChecks.patch.getVariable(3271, 3274, "on?")) {
    PrimChecks.patch.setVariable(3285, 3291, "pcolor", world.observer.getGlobal("foreground"));
  }
  else {
    PrimChecks.patch.setVariable(3315, 3321, "pcolor", world.observer.getGlobal("background"));
  }
}))
ProcedurePrims.defineReporter("bindigit", 3351, 3506, (function(number, powerHofHtwo) {
  if (Prims.equality(powerHofHtwo, 0)) {
    return PrimChecks.procedure.report(3416, 3422, PrimChecks.math.mod(3436, 3439, PrimChecks.math.floor(PrimChecks.validator.checkArg('FLOOR', 3423, 3428, 1, number)), 2));
  }
  else {
    return PrimChecks.procedure.report(3450, 3456, PrimChecks.procedure.callReporter(3457, 3465, "bindigit", PrimChecks.math.div(3480, 3481, PrimChecks.math.floor(PrimChecks.validator.checkArg('FLOOR', 3467, 3472, 1, number)), 2), PrimChecks.math.minus(3499, 3500, PrimChecks.validator.checkArg('-', 3499, 3500, 1, powerHofHtwo), 1)));
  }
}))
ProcedurePrims.defineCommand("refresh-rules", 3514, 3754, (function() {
  if (Prims.equality(world.observer.getGlobal("rule"), world.observer.getGlobal("old-rule"))) {
    if (!Prims.equality(world.observer.getGlobal("rule"), PrimChecks.procedure.callReporter(3653, 3667, "calculate-rule"))) {
      world.observer.setGlobal("rule", PrimChecks.procedure.callReporter(3686, 3700, "calculate-rule"));
    }
  }
  else {
    var R = ProcedurePrims.callCommand("extrapolate-switches"); if (R === DeathInterrupt) { return R; }
  }
  world.observer.setGlobal("old-rule", world.observer.getGlobal("rule"));
}))
ProcedurePrims.defineCommand("extrapolate-switches", 3762, 4097, (function() {
  world.observer.setGlobal("ooo", Prims.equality(PrimChecks.procedure.callReporter(3837, 3845, "bindigit", world.observer.getGlobal("rule"), 0), 1));
  world.observer.setGlobal("ooi", Prims.equality(PrimChecks.procedure.callReporter(3871, 3879, "bindigit", world.observer.getGlobal("rule"), 1), 1));
  world.observer.setGlobal("oio", Prims.equality(PrimChecks.procedure.callReporter(3905, 3913, "bindigit", world.observer.getGlobal("rule"), 2), 1));
  world.observer.setGlobal("oii", Prims.equality(PrimChecks.procedure.callReporter(3939, 3947, "bindigit", world.observer.getGlobal("rule"), 3), 1));
  world.observer.setGlobal("ioo", Prims.equality(PrimChecks.procedure.callReporter(3973, 3981, "bindigit", world.observer.getGlobal("rule"), 4), 1));
  world.observer.setGlobal("ioi", Prims.equality(PrimChecks.procedure.callReporter(4007, 4015, "bindigit", world.observer.getGlobal("rule"), 5), 1));
  world.observer.setGlobal("iio", Prims.equality(PrimChecks.procedure.callReporter(4041, 4049, "bindigit", world.observer.getGlobal("rule"), 6), 1));
  world.observer.setGlobal("iii", Prims.equality(PrimChecks.procedure.callReporter(4075, 4083, "bindigit", world.observer.getGlobal("rule"), 7), 1));
}))
ProcedurePrims.defineReporter("calculate-rule", 4112, 4514, (function() {
  let rresult = 0; ProcedurePrims.stack().currentContext().registerStringRunVar("RRESULT", rresult);
  if (world.observer.getGlobal("ooo")) {
    rresult = PrimChecks.math.plus(4216, 4217, PrimChecks.validator.checkArg('+', 4216, 4217, 1, rresult), 1); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("ooi")) {
    rresult = PrimChecks.math.plus(4255, 4256, PrimChecks.validator.checkArg('+', 4255, 4256, 1, rresult), 2); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("oio")) {
    rresult = PrimChecks.math.plus(4294, 4295, PrimChecks.validator.checkArg('+', 4294, 4295, 1, rresult), 4); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("oii")) {
    rresult = PrimChecks.math.plus(4333, 4334, PrimChecks.validator.checkArg('+', 4333, 4334, 1, rresult), 8); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("ioo")) {
    rresult = PrimChecks.math.plus(4372, 4373, PrimChecks.validator.checkArg('+', 4372, 4373, 1, rresult), 16); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("ioi")) {
    rresult = PrimChecks.math.plus(4411, 4412, PrimChecks.validator.checkArg('+', 4411, 4412, 1, rresult), 32); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("iio")) {
    rresult = PrimChecks.math.plus(4450, 4451, PrimChecks.validator.checkArg('+', 4450, 4451, 1, rresult), 64); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  if (world.observer.getGlobal("iii")) {
    rresult = PrimChecks.math.plus(4489, 4490, PrimChecks.validator.checkArg('+', 4489, 4490, 1, rresult), 128); ProcedurePrims.stack().currentContext().updateStringRunVar("RRESULT", rresult);
  }
  return PrimChecks.procedure.report(4499, 4505, rresult);
}))
ProcedurePrims.defineCommand("show-rules", 4632, 5403, (function() {
  var R = ProcedurePrims.callCommand("setup-general"); if (R === DeathInterrupt) { return R; }
  let rules = PrimChecks.procedure.callReporter(4706, 4716, "list-rules"); ProcedurePrims.stack().currentContext().registerStringRunVar("RULES", rules);
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(4732, 4736, world.patches(), function() {
    return Prims.gt(PrimChecks.patch.getVariable(4738, 4743, "pycor"), PrimChecks.math.minus(4756, 4757, world.topology.maxPycor, 5));
  }), function() { PrimChecks.patch.setVariable(4771, 4777, "pcolor", 5); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4720, 4723, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(4854, 4858, world.patches(), function() {
    return (Prims.equality(PrimChecks.patch.getVariable(4861, 4866, "pycor"), world.topology.maxPycor) && Prims.equality(PrimChecks.math.mod(4916, 4919, PrimChecks.math.plus(4911, 4912, PrimChecks.validator.checkArg('+', 4911, 4912, 1, PrimChecks.patch.getVariable(4905, 4910, "pxcor")), 1), PrimChecks.math.floor(PrimChecks.math.div(4940, 4941, world.topology.width, 8))), 0));
  }), function() {
    var R = ProcedurePrims.ask(SelfManager.self().sprout(1, "TURTLES"), function() {
      PrimChecks.turtle.setVariable(4986, 4993, "heading", 270);
      SelfManager.self().fd(18);
      var R = ProcedurePrims.callCommand("print-block", PrimChecks.list.item(5050, 5054, 0, PrimChecks.validator.checkArg('ITEM', 5050, 5054, 12, PrimChecks.list.item(5058, 5062, PrimChecks.validator.checkArg('ITEM', 5058, 5062, 1, PrimChecks.turtle.getVariable(5063, 5066, "who")), PrimChecks.validator.checkArg('ITEM', 5058, 5062, 12, rules))))); if (R === DeathInterrupt) { return R; }
      SelfManager.self().fd(2);
      var R = ProcedurePrims.callCommand("print-block", PrimChecks.list.item(5120, 5124, 1, PrimChecks.validator.checkArg('ITEM', 5120, 5124, 12, PrimChecks.list.item(5128, 5132, PrimChecks.validator.checkArg('ITEM', 5128, 5132, 1, PrimChecks.turtle.getVariable(5133, 5136, "who")), PrimChecks.validator.checkArg('ITEM', 5128, 5132, 12, rules))))); if (R === DeathInterrupt) { return R; }
      SelfManager.self().fd(2);
      var R = ProcedurePrims.callCommand("print-block", PrimChecks.list.item(5191, 5195, 2, PrimChecks.validator.checkArg('ITEM', 5191, 5195, 12, PrimChecks.list.item(5199, 5203, PrimChecks.validator.checkArg('ITEM', 5199, 5203, 1, PrimChecks.turtle.getVariable(5204, 5207, "who")), PrimChecks.validator.checkArg('ITEM', 5199, 5203, 12, rules))))); if (R === DeathInterrupt) { return R; }
      SelfManager.self().fd(-(2));
      PrimChecks.turtle.setVariable(5251, 5258, "heading", 180);
      SelfManager.self().fd(2);
      PrimChecks.turtle.setVariable(5284, 5291, "heading", 90);
      var R = ProcedurePrims.callCommand("print-block", PrimChecks.list.item(5314, 5318, 3, PrimChecks.validator.checkArg('ITEM', 5314, 5318, 12, PrimChecks.list.item(5322, 5326, PrimChecks.validator.checkArg('ITEM', 5322, 5326, 1, PrimChecks.turtle.getVariable(5327, 5330, "who")), PrimChecks.validator.checkArg('ITEM', 5322, 5326, 12, rules))))); if (R === DeathInterrupt) { return R; }
      return SelfManager.self().die();
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4961, 4967, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4842, 4845, R); return R; }
  world.observer.setGlobal("rules-shown?", true);
}))
ProcedurePrims.defineCommand("print-block", 5431, 5663, (function(state) {
  if (state) {
    PrimChecks.turtleOrLink.setVariable(5539, 5544, "color", world.observer.getGlobal("foreground"));
  }
  else {
    PrimChecks.turtleOrLink.setVariable(5568, 5573, "color", world.observer.getGlobal("background"));
  }
  PrimChecks.turtle.setVariable(5593, 5600, "heading", 90);
  for (let _index_5606_5612 = 0, _repeatcount_5606_5612 = StrictMath.floor(4); _index_5606_5612 < _repeatcount_5606_5612; _index_5606_5612++) {
    PrimChecks.patch.setVariable(5627, 5633, "pcolor", PrimChecks.turtleOrLink.getVariable(5634, 5639, "color"));
    SelfManager.self().right(90);
    SelfManager.self()._optimalFdOne();
  }
}))
ProcedurePrims.defineReporter("list-rules", 5678, 6244, (function() {
  let rules = []; ProcedurePrims.stack().currentContext().registerStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("ooo"), [false, false, false]), PrimChecks.validator.checkArg('LPUT', 5794, 5798, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("ooi"), [false, false, true]), PrimChecks.validator.checkArg('LPUT', 5850, 5854, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("oio"), [false, true, false]), PrimChecks.validator.checkArg('LPUT', 5906, 5910, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("oii"), [false, true, true]), PrimChecks.validator.checkArg('LPUT', 5962, 5966, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("ioo"), [true, false, false]), PrimChecks.validator.checkArg('LPUT', 6018, 6022, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("ioi"), [true, false, true]), PrimChecks.validator.checkArg('LPUT', 6074, 6078, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("iio"), [true, true, false]), PrimChecks.validator.checkArg('LPUT', 6130, 6134, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  rules = PrimChecks.list.lput(PrimChecks.list.lput(world.observer.getGlobal("iii"), [true, true, true]), PrimChecks.validator.checkArg('LPUT', 6186, 6190, 8, rules)); ProcedurePrims.stack().currentContext().updateStringRunVar("RULES", rules);
  return PrimChecks.procedure.report(6231, 6237, rules);
}))
world.observer.setGlobal("ooo", true);
world.observer.setGlobal("ooi", false);
world.observer.setGlobal("oio", false);
world.observer.setGlobal("oii", true);
world.observer.setGlobal("ioo", false);
world.observer.setGlobal("ioi", true);
world.observer.setGlobal("iio", true);
world.observer.setGlobal("iii", false);
world.observer.setGlobal("foreground", 55);
world.observer.setGlobal("background", 0);
world.observer.setGlobal("rule", 105);
world.observer.setGlobal("density", 10);
world.observer.setGlobal("auto-continue?", true);