var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"1-flagella":{"name":"1-flagella","editableColorIndex":0,"rotate":true,"elements":[{"xmin":144,"ymin":150,"xmax":159,"ymax":225,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"bacteria":{"name":"bacteria","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[60,60,75,105,150,195,225,240,240,225,180,150,120,90],"ycors":[60,210,270,300,300,300,270,225,60,30,0,0,0,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"xcors":[75,75,90,105,150,195,210,225,225,210,180,150,120,90],"ycors":[60,225,270,285,285,285,270,225,60,30,15,15,15,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"bird":{"name":"bird","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[151,136,123,143,156,179,166],"ycors":[170,170,229,244,244,229,170],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[152,137,125,140,159,179,167],"ycors":[154,154,213,229,229,214,154],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[151,136,126,139,159,176,166],"ycors":[140,140,202,214,214,200,140],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,134,128,140,161,174,166],"ycors":[125,124,188,198,197,188,125],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[152,227,286,272,294,276,287,270,278,264,267,228,153],"ycors":[86,72,97,101,117,118,131,131,141,138,145,150,147],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[160,159,149,130,139,133,127,129,134,150,168,172,169],"ycors":[74,61,54,53,62,81,113,149,177,206,179,147,111],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":55,"diam":7,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[129,135,139],"ycors":[53,58,54],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[148,73,14,28,6,24,13,30,22,36,33,72,147],"ycors":[86,72,97,101,117,118,131,131,141,138,145,150,147],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(215, 50, 41, 1)","filled":false,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flagella":{"name":"flagella","editableColorIndex":0,"rotate":true,"elements":[{"xmin":144,"ymin":150,"xmax":159,"ymax":225,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"flagella-1":{"name":"flagella-1","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":150,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flagella-2":{"name":"flagella-2","editableColorIndex":0,"rotate":true,"elements":[{"x1":135,"y1":150,"x2":105,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":165,"y1":150,"x2":180,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flagella-3":{"name":"flagella-3","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":150,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":150,"x2":60,"y2":270,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":180,"y1":150,"x2":240,"y2":270,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flagella-4":{"name":"flagella-4","editableColorIndex":0,"rotate":true,"elements":[{"x1":135,"y1":150,"x2":105,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":165,"y1":150,"x2":180,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":195,"y1":135,"x2":255,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":105,"y1":135,"x2":45,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flagella-5":{"name":"flagella-5","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":150,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":120,"y1":150,"x2":60,"y2":270,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":210,"x2":105,"y2":120,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":180,"y1":150,"x2":240,"y2":270,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":285,"y1":210,"x2":195,"y2":120,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flagella-6":{"name":"flagella-6","editableColorIndex":0,"rotate":true,"elements":[{"x1":135,"y1":150,"x2":105,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":165,"y1":150,"x2":180,"y2":285,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":195,"y1":135,"x2":255,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":105,"y1":135,"x2":45,"y2":255,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":300,"y1":195,"x2":210,"y2":105,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":0,"y1":195,"x2":90,"y2":105,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [(function() {
  var name    = '# of bacteria for each variation';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('1 ', plotOps.makePenOps, false, new PenBundle.State(115, 1, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('2 ', plotOps.makePenOps, false, new PenBundle.State(105, 1, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('3 ', plotOps.makePenOps, false, new PenBundle.State(55, 1, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('4 ', plotOps.makePenOps, false, new PenBundle.State(44.2, 1, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('5 ', plotOps.makePenOps, false, new PenBundle.State(25, 1, PenBundle.DisplayMode.Bar), function() {}, function() {}),
  new PenBundle.Pen('6 ', plotOps.makePenOps, false, new PenBundle.State(15, 1, PenBundle.DisplayMode.Bar), function() {}, function() {})];
  var setup   = function() {};
  var update  = function() {
    return ProcedurePrims.runInPlotContext('# of bacteria for each variation', undefined, function() {
      plotManager.clearPlot();
      var R = PrimChecks.task.forEach(153, 160, [1, 2, 3, 4, 5, 6], PrimChecks.task.checked(175, 176, function(thisHvariation) {
        PrimChecks.procedure.runArgCountCheck('run', 175, 317, 1, arguments.length);
        plotManager.setCurrentPen(StringPrims.word(thisHvariation, " "));
        plotManager.plotPoint(thisHvariation, PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed("BACTERIA"), function() { return Prims.equality(PrimChecks.turtle.getVariable(288, 297, "variation"), thisHvariation); }));
      }, "[ this-variation -> set-current-plot-pen word this-variation \" \" plotxy this-variation count bacteria with [ variation = this-variation ] ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(153, 160, R); return R; };
    });
  };
  return new Plot(name, pens, plotOps, "# of flagella", "# of bacteria", false, true, true, 0, 8, 0, 10, setup, update);
})(), (function() {
  var name    = 'Avg. # of flagella per bacteria';
  var plotOps = (typeof modelPlotOps[name] !== "undefined" && modelPlotOps[name] !== null) ? modelPlotOps[name] : new PlotOps(function() {}, function() {}, function() {}, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; }, function() { return function() {}; });
  var pens    = [new PenBundle.Pen('pen 1', plotOps.makePenOps, false, new PenBundle.State(0, 1, PenBundle.DisplayMode.Line), function() {}, function() {
    return ProcedurePrims.runInPlotContext('Avg. # of flagella per bacteria', 'pen 1', function() {
      if (PrimChecks.agentset.any(world.turtleManager.turtlesOfBreed("BACTERIA"))) {
        plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.list.mean(64, 68, PrimChecks.validator.checkArg('MEAN', 64, 68, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed("BACTERIA"), function() { return PrimChecks.turtle.getVariable(70, 79, "variation"); }))));
      };
    });
  })];
  var setup   = function() {};
  var update  = function() {};
  return new Plot(name, pens, plotOps, "time", "# of flagella", false, true, true, 0, 1000, 1, 6, setup, update);
})()];
var workspace = tortoise_require('engine/workspace')(modelConfig)([{ name: "removal-spots", singular: "removal-spot", varNames: ["countdown"] }, { name: "bacteria", singular: "bacterium", varNames: ["variation"] }, { name: "flagella", singular: "flagellum", varNames: [] }, { name: "predators", singular: "predator", varNames: [] }, { name: "connectors", singular: "connector", varNames: [], isDirected: true }])([], [])('breed [removal-spots removal-spot] breed [bacteria  bacterium] breed [flagella  flagellum] breed [predators predator]  directed-link-breed [connectors connector]  bacteria-own [variation] removal-spots-own [countdown]  globals [   bacteria-caught           ;;  count of total bacteria caught   wiggle?                   ;;  boolean for whether the bacteria wiggle back and forth randomly as they move   camouflage?               ;;  boolean that keeps track of whether the predator (mouse cursor) is visible to the bacteria   tick-counter              ;;  counter to keep track of how long the predator (mouse cursor) has remained stationary   predator-location         ;;  patch where the predator (the player) has placed the mouse cursor   speed-scalar              ;;  scales the speed of all bacteria movement   predator-color-visible    ;;  color of predator when bacteria can detect it   predator-color-invisible  ;;  color of predator when bacteria can not detect it   bacteria-default-color    ;;  color of bacteria when color is not used in visualize-variation setting   flagella-size             ;;  size of the flagella ]  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;  Setup Procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to setup   clear-all    set predator-color-visible   [255 0 0 100]   set predator-color-invisible [200 200 200 100]   set bacteria-default-color   [100 100 100 200]    set-default-shape bacteria \"bacteria\"   set-default-shape flagella \"flagella\"   set-default-shape removal-spots \"x\"    set bacteria-caught 0   set speed-scalar 0.04   set flagella-size 1.2   set wiggle? true   set camouflage? true   ask patches [ set pcolor white ]    setup-bacteria   setup-predator   reset-ticks end  to setup-bacteria   foreach [1 2 3 4 5 6] [ this-variation ->     create-bacteria initial-bacteria-per-variation [       set label-color black       set size 1       set variation this-variation       make-flagella       setxy random-xcor random-ycor     ]   ]   visualize-bacteria end  to setup-predator   create-predators 1 [     set shape \"circle\"     set color predator-color-visible     set size 1     set heading 315     bk 1     hide-turtle   ] end  to make-flagella ;; bacteria procedure   let flagella-shape word \"flagella-\" variation   hatch 1 [     set breed flagella     set color bacteria-default-color     set label \"\"     set shape flagella-shape     bk 0.4     set size flagella-size     create-connector-from myself [       set hidden? true       tie     ]   ] end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;  Runtime Procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to go   check-caught   move-predator   move-bacteria   ask flagella [ move-flagella ]   visualize-bacteria   visualize-removal-spots   tick end  to death   ;; mark where a bacterium was caught and then remove the bacterium and its attached flagella   set bacteria-caught bacteria-caught + 1   make-a-removal-spot   ask out-link-neighbors [die]   die end  to make-a-removal-spot   hatch 1 [     set breed removal-spots     set size 1.5     set countdown 30   ] end  to move-bacteria   ask bacteria [     if wiggle? [ right (random-float 25 - random-float 25) ]     fd variation * speed-scalar     let predators-in-front-of-me predators in-cone 2 120     if not camouflage? and any? predators-in-front-of-me [       face one-of predators-in-front-of-me       right 180     ]   ] end  to move-predator   ifelse patch mouse-xcor mouse-ycor = predator-location     [ set tick-counter tick-counter + 1 ]     [ set predator-location patch mouse-xcor mouse-ycor set tick-counter 0 ]   ask predators [     ifelse tick-counter < 100       [ set camouflage? false set color predator-color-visible ]       [ set camouflage? true set color predator-color-invisible ]     setxy mouse-xcor mouse-ycor     ;; only show the predator if the mouse pointer is actually inside the view     set predator-location patch xcor ycor     set hidden? not mouse-inside?   ] end  to move-flagella   let flagella-swing 15 ;; magnitude of angle that the flagella swing back and forth   let flagella-speed 60 ;; speed of flagella swinging back and forth   let new-swing flagella-swing * sin (flagella-speed * ticks)   let my-bacteria one-of in-link-neighbors   set heading [ heading ] of my-bacteria + new-swing end  to check-caught   if not mouse-down? or not mouse-inside? [ stop ]   let prey [bacteria in-radius (size / 2)] of one-of predators   if not any? prey [ stop ] ;; no prey here? oh well   ask one-of prey [ death ] ;; eat only one of the bacteria at the mouse location   ;; replace the bacterium that was eating with a offspring selected from a random parent remaining in the remaining population   ask one-of bacteria [ hatch 1 [ rt random 360 make-flagella ] ] end  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;visualization procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  to visualize-bacteria   ask bacteria [     ifelse visualize-variation = \"# flagella as label\"       [ set label word variation \"     \" ]       [ set label \"\" ]     ifelse member? visualize-variation [\"flagella and color\" \"as color only\"]       [ set color item (variation - 1) [violet blue green brown orange red] ]       [ set color bacteria-default-color ]   ]   ask flagella [     set hidden? member? visualize-variation [\"as color only\" \"# flagella as label\" \"none\"]   ] end  to visualize-removal-spots   ask removal-spots [     set countdown countdown - 1     set color lput (countdown * 4) [0 100 0]  ;; sets the transparency of this spot to progressivley more transparent as countdown decreases     if countdown <= 0 [die]   ] end   ; Copyright 2015 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":280,"y":10,"width":472,"height":473,"dimensions":{"minPxcor":-14,"maxPxcor":14,"minPycor":-14,"maxPycor":14,"patchSize":16,"wrappingAllowedInX":true,"wrappingAllowedInY":true},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","source":"setup","x":10,"y":10,"width":125,"height":33,"forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","source":"go","x":145,"y":10,"width":125,"height":33,"display":"go/pause","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"type":"button","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('# of bacteria for each variation', undefined, function() {     plotManager.clearPlot();     var R = PrimChecks.task.forEach(153, 160, [1, 2, 3, 4, 5, 6], PrimChecks.task.checked(175, 176, function(thisHvariation) {       PrimChecks.procedure.runArgCountCheck('run', 175, 317, 1, arguments.length);       plotManager.setCurrentPen(StringPrims.word(thisHvariation, \" \"));       plotManager.plotPoint(thisHvariation, PrimChecks.agentset.countWith(null, null, world.turtleManager.turtlesOfBreed(\"BACTERIA\"), function() { return Prims.equality(PrimChecks.turtle.getVariable(288, 297, \"variation\"), thisHvariation); }));     }, \"[ this-variation -> set-current-plot-pen word this-variation \\\" \\\" plotxy this-variation count bacteria with [ variation = this-variation ] ]\", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(153, 160, R); return R; };   }); }","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"1 ","interval":1,"mode":1,"color":-8630108,"inLegend":true,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"2 ","interval":1,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"3 ","interval":1,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"4 ","interval":1,"mode":1,"color":-3355648,"inLegend":true,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"5 ","interval":1,"mode":1,"color":-955883,"inLegend":true,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}},{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","display":"6 ","interval":1,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"# of bacteria for each variation","x":10,"y":350,"width":260,"height":155,"oldSize":true,"xAxis":"# of flagella","yAxis":"# of bacteria","xmin":0,"xmax":8,"ymin":0,"ymax":10,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":";; the HISTOGRAM primitive can't make a multi-colored histogram, ;; so instead we plot each bar individually clear-plot foreach [1 2 3 4 5 6] [ this-variation ->   set-current-plot-pen word this-variation  \" \"   plotxy this-variation count bacteria with [variation = this-variation] ]","pens":[{"display":"1 ","interval":1,"mode":1,"color":-8630108,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"2 ","interval":1,"mode":1,"color":-13345367,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"3 ","interval":1,"mode":1,"color":-10899396,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"4 ","interval":1,"mode":1,"color":-3355648,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"5 ","interval":1,"mode":1,"color":-955883,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"},{"display":"6 ","interval":1,"mode":1,"color":-2674135,"inLegend":true,"setupCode":"","updateCode":"","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {}","compiledPens":[{"compiledSetupCode":"function() {}","compiledUpdateCode":"function() {   return ProcedurePrims.runInPlotContext('Avg. # of flagella per bacteria', 'pen 1', function() {     if (PrimChecks.agentset.any(world.turtleManager.turtlesOfBreed(\"BACTERIA\"))) {       plotManager.plotPoint(world.ticker.tickCount(), PrimChecks.list.mean(64, 68, PrimChecks.validator.checkArg('MEAN', 64, 68, 8, PrimChecks.agentset.of(world.turtleManager.turtlesOfBreed(\"BACTERIA\"), function() { return PrimChecks.turtle.getVariable(70, 79, \"variation\"); }))));     };   }); }","display":"pen 1","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if any? bacteria [plotxy ticks mean [variation] of bacteria ]","type":"pen","compilation":{"success":true,"messages":[]}}],"display":"Avg. # of flagella per bacteria","x":10,"y":190,"width":260,"height":155,"oldSize":true,"xAxis":"time","yAxis":"# of flagella","xmin":0,"xmax":1000,"ymin":1,"ymax":6,"autoPlotX":true,"autoPlotY":true,"legendOn":false,"setupCode":"","updateCode":"","pens":[{"display":"pen 1","interval":1,"mode":0,"color":-16777216,"inLegend":true,"setupCode":"","updateCode":"if any? bacteria [plotxy ticks mean [variation] of bacteria ]","type":"pen"}],"type":"plot","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 10; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","variable":"initial-bacteria-per-variation","x":10,"y":50,"width":260,"height":33,"oldSize":true,"display":"initial-bacteria-per-variation","min":"1","max":"10","default":5,"step":"1","direction":"horizontal","type":"slider","compilation":{"success":true,"messages":[]}}, {"variable":"visualize-variation","x":10,"y":85,"width":260,"height":45,"oldSize":true,"display":"visualize-variation","choices":["flagella and color","flagella only","as color only","# flagella as label","none"],"currentChoice":0,"type":"chooser","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return PrimChecks.agentset.count(world.turtleManager.turtlesOfBreed(\"BACTERIA\")); })","source":"count bacteria","x":10,"y":140,"width":125,"height":45,"oldSize":true,"display":"# alive","precision":17,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"bacteria-caught\"); })","source":"bacteria-caught","x":145,"y":140,"width":125,"height":45,"oldSize":true,"display":"# caught","precision":17,"fontSize":11,"type":"monitor","compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["initial-bacteria-per-variation", "visualize-variation", "bacteria-caught", "wiggle?", "camouflage?", "tick-counter", "predator-location", "speed-scalar", "predator-color-visible", "predator-color-invisible", "bacteria-default-color", "flagella-size"], ["initial-bacteria-per-variation", "visualize-variation"], [], -14, 14, -14, 14, 16, true, true, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 1375, 1855, (function() {
  world.clearAll();
  world.observer.setGlobal("predator-color-visible", [255, 0, 0, 100]);
  world.observer.setGlobal("predator-color-invisible", [200, 200, 200, 100]);
  world.observer.setGlobal("bacteria-default-color", [100, 100, 100, 200]);
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("BACTERIA").getSpecialName(), "bacteria")
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("FLAGELLA").getSpecialName(), "flagella")
  BreedManager.setDefaultShape(world.turtleManager.turtlesOfBreed("REMOVAL-SPOTS").getSpecialName(), "x")
  world.observer.setGlobal("bacteria-caught", 0);
  world.observer.setGlobal("speed-scalar", 0.04);
  world.observer.setGlobal("flagella-size", 1.2);
  world.observer.setGlobal("wiggle?", true);
  world.observer.setGlobal("camouflage?", true);
  var R = ProcedurePrims.ask(world.patches(), function() { PrimChecks.patch.setVariable(1791, 1797, "pcolor", 9.9); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1773, 1776, R); return R; }
  var R = ProcedurePrims.callCommand("setup-bacteria"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("setup-predator"); if (R === DeathInterrupt) { return R; }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-bacteria", 1863, 2142, (function() {
  var R = PrimChecks.task.forEach(1880, 1887, [1, 2, 3, 4, 5, 6], PrimChecks.task.checked(1902, 1903, function(thisHvariation) {
    PrimChecks.procedure.runArgCountCheck('run', 1902, 2120, 1, arguments.length);
    var R = ProcedurePrims.ask(world.turtleManager.createTurtles(world.observer.getGlobal("initial-bacteria-per-variation"), "BACTERIA"), function() {
      PrimChecks.turtleOrLink.setVariable(1985, 1996, "label-color", 0);
      PrimChecks.turtle.setVariable(2013, 2017, "size", 1);
      PrimChecks.turtle.setVariable(2030, 2039, "variation", thisHvariation);
      var R = ProcedurePrims.callCommand("make-flagella"); if (R === DeathInterrupt) { return R; }
      PrimChecks.turtle.setXY(2081, 2086, RandomPrims.randomFloatInRange(world.topology.minPxcor, world.topology.maxPxcor), RandomPrims.randomFloatInRange(world.topology.minPycor, world.topology.maxPycor));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1926, 1941, R); return R; }
  }, "[ this-variation -> create-bacteria initial-bacteria-per-variation [ set label-color black set size 1 set variation this-variation make-flagella setxy random-xcor random-ycor ] ]", false, false)); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1880, 1887, R); return R; }
  var R = ProcedurePrims.callCommand("visualize-bacteria"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("setup-predator", 2150, 2312, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.createTurtles(1, "PREDATORS"), function() {
    PrimChecks.turtleOrLink.setVariable(2196, 2201, "shape", "circle");
    PrimChecks.turtleOrLink.setVariable(2219, 2224, "color", world.observer.getGlobal("predator-color-visible"));
    PrimChecks.turtle.setVariable(2256, 2260, "size", 1);
    PrimChecks.turtle.setVariable(2271, 2278, "heading", 315);
    SelfManager.self().fd(-(1));
    SelfManager.self().hideTurtle(true);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2167, 2183, R); return R; }
}))
ProcedurePrims.defineCommand("make-flagella", 2320, 2638, (function() {
  let flagellaHshape = StringPrims.word("flagella-", PrimChecks.turtle.getVariable(2394, 2403, "variation")); ProcedurePrims.stack().currentContext().registerStringRunVar("FLAGELLA-SHAPE", flagellaHshape);
  var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
    PrimChecks.turtleOrLink.setVariable(2424, 2429, "breed", world.turtleManager.turtlesOfBreed("FLAGELLA"));
    PrimChecks.turtleOrLink.setVariable(2447, 2452, "color", world.observer.getGlobal("bacteria-default-color"));
    PrimChecks.turtleOrLink.setVariable(2484, 2489, "label", "");
    PrimChecks.turtleOrLink.setVariable(2501, 2506, "shape", flagellaHshape);
    SelfManager.self().fd(-(0.4));
    PrimChecks.turtle.setVariable(2541, 2545, "size", world.observer.getGlobal("flagella-size"));
    var R = ProcedurePrims.ask(LinkPrims.createLinkFrom(SelfManager.myself(), "CONNECTORS"), function() {
      PrimChecks.turtleOrLink.setVariable(2605, 2612, "hidden?", true);
      SelfManager.self().tie();
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2564, 2585, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2406, 2411, R); return R; }
}))
ProcedurePrims.defineCommand("go", 2884, 3021, (function() {
  var R = ProcedurePrims.callCommand("check-caught"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("move-predator"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("move-bacteria"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("FLAGELLA"), function() { var R = ProcedurePrims.callCommand("move-flagella"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2936, 2939, R); return R; }
  var R = ProcedurePrims.callCommand("visualize-bacteria"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("visualize-removal-spots"); if (R === DeathInterrupt) { return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("death", 3029, 3231, (function() {
  world.observer.setGlobal("bacteria-caught", PrimChecks.math.plus(3168, 3169, PrimChecks.validator.checkArg('+', 3168, 3169, 1, world.observer.getGlobal("bacteria-caught")), 1));
  var R = ProcedurePrims.callCommand("make-a-removal-spot"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.ask(LinkPrims.outLinkNeighbors("LINKS"), function() { return SelfManager.self().die(); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3196, 3199, R); return R; }
  return SelfManager.self().die();
}))
ProcedurePrims.defineCommand("make-a-removal-spot", 3239, 3341, (function() {
  var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
    PrimChecks.turtleOrLink.setVariable(3279, 3284, "breed", world.turtleManager.turtlesOfBreed("REMOVAL-SPOTS"));
    PrimChecks.turtle.setVariable(3307, 3311, "size", 1.5);
    PrimChecks.turtle.setVariable(3324, 3333, "countdown", 30);
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3261, 3266, R); return R; }
}))
ProcedurePrims.defineCommand("move-bacteria", 3349, 3658, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("BACTERIA"), function() {
    if (world.observer.getGlobal("wiggle?")) {
      SelfManager.self().right(PrimChecks.math.minus(3420, 3421, PrimChecks.math.randomFloat(25), PrimChecks.math.randomFloat(25)));
    }
    SelfManager.self().fd(PrimChecks.math.mult(3458, 3459, PrimChecks.validator.checkArg('*', 3458, 3459, 1, PrimChecks.turtle.getVariable(3448, 3457, "variation")), PrimChecks.validator.checkArg('*', 3458, 3459, 1, world.observer.getGlobal("speed-scalar"))));
    let predatorsHinHfrontHofHme = SelfManager.self().inCone(world.turtleManager.turtlesOfBreed("PREDATORS"), 2, 120); ProcedurePrims.stack().currentContext().registerStringRunVar("PREDATORS-IN-FRONT-OF-ME", predatorsHinHfrontHofHme);
    if ((PrimChecks.math.not(PrimChecks.validator.checkArg('NOT', 3537, 3540, 2, world.observer.getGlobal("camouflage?"))) && PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 3557, 3561, 112, predatorsHinHfrontHofHme)))) {
      SelfManager.self().face(PrimChecks.validator.checkArg('FACE', 3595, 3599, 768, PrimChecks.list.oneOf(3600, 3606, PrimChecks.validator.checkArg('ONE-OF', 3600, 3606, 120, predatorsHinHfrontHofHme))));
      SelfManager.self().right(180);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3365, 3368, R); return R; }
}))
ProcedurePrims.defineCommand("move-predator", 3666, 4226, (function() {
  if (Prims.equality(world.getPatchAt(MousePrims.getX(), MousePrims.getY()), world.observer.getGlobal("predator-location"))) {
    world.observer.setGlobal("tick-counter", PrimChecks.math.plus(3773, 3774, PrimChecks.validator.checkArg('+', 3773, 3774, 1, world.observer.getGlobal("tick-counter")), 1));
  }
  else {
    world.observer.setGlobal("predator-location", world.getPatchAt(MousePrims.getX(), MousePrims.getY()));
    world.observer.setGlobal("tick-counter", 0);
  }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("PREDATORS"), function() {
    if (Prims.lt(world.observer.getGlobal("tick-counter"), 100)) {
      world.observer.setGlobal("camouflage?", false);
      PrimChecks.turtleOrLink.setVariable(3938, 3943, "color", world.observer.getGlobal("predator-color-visible"));
    }
    else {
      world.observer.setGlobal("camouflage?", true);
      PrimChecks.turtleOrLink.setVariable(4002, 4007, "color", world.observer.getGlobal("predator-color-invisible"));
    }
    PrimChecks.turtle.setXY(4039, 4044, MousePrims.getX(), MousePrims.getY());
    world.observer.setGlobal("predator-location", world.getPatchAt(PrimChecks.validator.checkArg('PATCH', 4172, 4177, 1, PrimChecks.turtle.getVariable(4178, 4182, "xcor")), PrimChecks.validator.checkArg('PATCH', 4172, 4177, 1, PrimChecks.turtle.getVariable(4183, 4187, "ycor"))));
    PrimChecks.turtleOrLink.setVariable(4196, 4203, "hidden?", PrimChecks.math.not(MousePrims.isInside()));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3858, 3861, R); return R; }
}))
ProcedurePrims.defineCommand("move-flagella", 4234, 4560, (function() {
  let flagellaHswing = 15; ProcedurePrims.stack().currentContext().registerStringRunVar("FLAGELLA-SWING", flagellaHswing);
  let flagellaHspeed = 60; ProcedurePrims.stack().currentContext().registerStringRunVar("FLAGELLA-SPEED", flagellaHspeed);
  let newHswing = PrimChecks.math.mult(4433, 4434, PrimChecks.validator.checkArg('*', 4433, 4434, 1, flagellaHswing), PrimChecks.math.sin(PrimChecks.math.mult(4455, 4456, PrimChecks.validator.checkArg('*', 4455, 4456, 1, flagellaHspeed), world.ticker.tickCount()))); ProcedurePrims.stack().currentContext().registerStringRunVar("NEW-SWING", newHswing);
  let myHbacteria = PrimChecks.list.oneOf(4482, 4488, LinkPrims.inLinkNeighbors("LINKS")); ProcedurePrims.stack().currentContext().registerStringRunVar("MY-BACTERIA", myHbacteria);
  PrimChecks.turtle.setVariable(4513, 4520, "heading", PrimChecks.math.plus(4548, 4549, PrimChecks.validator.checkArg('+', 4548, 4549, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4533, 4535, 1904, myHbacteria), function() { return PrimChecks.turtle.getVariable(4523, 4530, "heading"); })), PrimChecks.validator.checkArg('+', 4548, 4549, 1, newHswing)));
}))
ProcedurePrims.defineCommand("check-caught", 4568, 5024, (function() {
  if ((PrimChecks.math.not(MousePrims.isDown()) || PrimChecks.math.not(MousePrims.isInside()))) {
    return PrimChecks.procedure.stop(4625, 4629);
  }
  let prey = PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4675, 4677, 1904, PrimChecks.list.oneOf(4678, 4684, world.turtleManager.turtlesOfBreed("PREDATORS"))), function() {
    return SelfManager.self().inRadius(world.turtleManager.turtlesOfBreed("BACTERIA"), PrimChecks.math.div(4669, 4670, PrimChecks.validator.checkArg('/', 4669, 4670, 1, PrimChecks.turtle.getVariable(4664, 4668, "size")), 2));
  }); ProcedurePrims.stack().currentContext().registerStringRunVar("PREY", prey);
  if (PrimChecks.math.not(PrimChecks.agentset.any(PrimChecks.validator.checkArg('ANY?', 4704, 4708, 112, prey)))) {
    return PrimChecks.procedure.stop(4716, 4720);
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4750, 4753, 1904, PrimChecks.list.oneOf(4754, 4760, PrimChecks.validator.checkArg('ONE-OF', 4754, 4760, 120, prey))), function() { var R = ProcedurePrims.callCommand("death"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4750, 4753, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4960, 4963, 1904, PrimChecks.list.oneOf(4964, 4970, world.turtleManager.turtlesOfBreed("BACTERIA"))), function() {
    var R = ProcedurePrims.ask(SelfManager.self().hatch(1, ""), function() {
      SelfManager.self().right(RandomPrims.randomLong(360));
      var R = ProcedurePrims.callCommand("make-flagella"); if (R === DeathInterrupt) { return R; }
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4982, 4987, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4960, 4963, R); return R; }
}))
ProcedurePrims.defineCommand("visualize-bacteria", 5270, 5742, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("BACTERIA"), function() {
    if (Prims.equality(world.observer.getGlobal("visualize-variation"), "# flagella as label")) {
      PrimChecks.turtleOrLink.setVariable(5373, 5378, "label", StringPrims.word(PrimChecks.turtle.getVariable(5384, 5393, "variation"), "     "));
    }
    else {
      PrimChecks.turtleOrLink.setVariable(5416, 5421, "label", "");
    }
    if (PrimChecks.list.member(world.observer.getGlobal("visualize-variation"), ["flagella and color", "as color only"])) {
      PrimChecks.turtleOrLink.setVariable(5517, 5522, "color", PrimChecks.list.item(5523, 5527, PrimChecks.math.minus(5539, 5540, PrimChecks.validator.checkArg('-', 5539, 5540, 1, PrimChecks.turtle.getVariable(5529, 5538, "variation")), 1), [115, 105, 55, 35, 25, 15]));
    }
    else {
      PrimChecks.turtleOrLink.setVariable(5595, 5600, "color", world.observer.getGlobal("bacteria-default-color"));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5291, 5294, R); return R; }
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("FLAGELLA"), function() {
    PrimChecks.turtleOrLink.setVariable(5655, 5662, "hidden?", PrimChecks.list.member(world.observer.getGlobal("visualize-variation"), ["as color only", "# flagella as label", "none"]));
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5632, 5635, R); return R; }
}))
ProcedurePrims.defineCommand("visualize-removal-spots", 5750, 6001, (function() {
  var R = ProcedurePrims.ask(world.turtleManager.turtlesOfBreed("REMOVAL-SPOTS"), function() {
    PrimChecks.turtle.setVariable(5804, 5813, "countdown", PrimChecks.math.minus(5824, 5825, PrimChecks.validator.checkArg('-', 5824, 5825, 1, PrimChecks.turtle.getVariable(5814, 5823, "countdown")), 1));
    PrimChecks.turtleOrLink.setVariable(5836, 5841, "color", PrimChecks.list.lput(PrimChecks.math.mult(5858, 5859, PrimChecks.validator.checkArg('*', 5858, 5859, 1, PrimChecks.turtle.getVariable(5848, 5857, "countdown")), 4), [0, 100, 0]));
    if (Prims.lte(PrimChecks.turtle.getVariable(5976, 5985, "countdown"), 0)) {
      return SelfManager.self().die();
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5776, 5779, R); return R; }
}))
world.observer.setGlobal("initial-bacteria-per-variation", 5);
world.observer.setGlobal("visualize-variation", "flagella and color");