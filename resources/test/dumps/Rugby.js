var AgentModel = tortoise_require('agentmodel');
var ColorModel = tortoise_require('engine/core/colormodel');
var Exception = tortoise_require('util/exception');
var Link = tortoise_require('engine/core/link');
var LinkSet = tortoise_require('engine/core/linkset');
var Meta = tortoise_require('meta');
var NLMath = tortoise_require('util/nlmath');
var NLType = tortoise_require('engine/core/typechecker');
var PatchSet = tortoise_require('engine/core/patchset');
var PenBundle = tortoise_require('engine/plot/pen');
var Plot = tortoise_require('engine/plot/plot');
var PlotOps = tortoise_require('engine/plot/plotops');
var StrictMath = tortoise_require('shim/strictmath');
var Tasks = tortoise_require('engine/prim/tasks');
var Turtle = tortoise_require('engine/core/turtle');
var TurtleSet = tortoise_require('engine/core/turtleset');
var notImplemented = tortoise_require('util/notimplemented');
var { DeathInterrupt, StopInterrupt } = tortoise_require('util/interrupts');

var linkShapes = {"default":{"name":"default","direction-indicator":{"name":"link direction","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":150,"x2":90,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":150,"x2":210,"y2":180,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"curviness":0,"lines":[{"x-offset":-0.2,"is-visible":false,"dash-pattern":[0,1]},{"x-offset":0,"is-visible":true,"dash-pattern":[1,0]},{"x-offset":0.2,"is-visible":false,"dash-pattern":[0,1]}]}};
var turtleShapes = {"default":{"name":"default","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,40,150,260],"ycors":[5,250,205,250],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"airplane":{"name":"airplane","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,135,120,120,15,15,120,135,105,120,150,180,210,165,180,285,285,180,180,165],"ycors":[0,15,60,105,165,195,180,240,270,285,270,285,270,240,180,195,165,105,60,15],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"arrow":{"name":"arrow","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,0,105,105,195,195,300],"ycors":[0,150,150,293,293,150,150],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"box":{"name":"box","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,285,285,150],"ycors":[285,225,75,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,15,150,285],"ycors":[135,75,15,75],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[15,15,150,150],"ycors":[75,225,285,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":285,"x2":150,"y2":135,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":15,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":135,"x2":285,"y2":75,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"bug":{"name":"bug","editableColorIndex":0,"rotate":true,"elements":[{"x":96,"y":182,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":127,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":110,"y":75,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":150,"y1":100,"x2":80,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":150,"y1":100,"x2":220,"y2":30,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"butterfly":{"name":"butterfly","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[150,209,225,225,195,165,150],"ycors":[165,199,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,89,75,75,105,135,150],"ycors":[165,198,225,255,270,255,240],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[139,100,55,25,10,10,25,40,85,139],"ycors":[148,105,90,90,105,135,180,195,194,163],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[162,200,245,275,290,290,275,260,215,162],"ycors":[150,105,90,90,105,135,180,195,195,165],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[150,135,120,135,150,165,180,165],"ycors":[255,225,150,120,105,120,150,225],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":135,"y":90,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":105,"x2":195,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false},{"x1":150,"y1":105,"x2":105,"y2":60,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"car":{"name":"car","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[300,279,261,240,226,213,203,185,159,135,75,0,0,0,300,300],"ycors":[180,164,144,135,132,106,84,63,50,50,60,150,165,225,225,180],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":180,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":30,"y":180,"diam":90,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[162,132,134,209,194,189,180],"ycors":[80,78,135,135,105,96,89],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":47,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":195,"y":195,"diam":58,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle":{"name":"circle","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"circle 2":{"name":"circle 2","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"cow":{"name":"cow","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[200,197,179,177,166,140,93,78,72,49,48,37,25,25,45,103,179,198,252,272,293,285,255,242,224],"ycors":[193,249,249,196,187,189,191,179,211,209,181,149,120,89,72,84,75,76,64,81,103,121,121,118,167],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[73,86,62,48],"ycors":[210,251,249,208],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[25,16,9,23,25,39],"ycors":[114,195,204,213,200,123],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"cylinder":{"name":"cylinder","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"dot":{"name":"dot","editableColorIndex":0,"rotate":false,"elements":[{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"face happy":{"name":"face happy","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[255,239,213,191,179,203,218,225,218,203,181,194,217,240],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face neutral":{"name":"face neutral","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":7,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":60,"ymin":195,"xmax":240,"ymax":225,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"face sad":{"name":"face sad","editableColorIndex":0,"rotate":false,"elements":[{"x":8,"y":8,"diam":285,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":60,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":180,"y":75,"diam":60,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[150,90,62,47,67,90,109,150,192,210,227,251,236,212],"ycors":[168,184,210,232,244,220,205,198,205,220,242,229,206,183],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"fish":{"name":"fish","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[44,21,15,0,15,0,13,20,45],"ycors":[131,87,86,120,150,180,214,212,166],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[135,119,95,76,46,60],"ycors":[195,235,218,210,204,165],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[75,83,71,86,166,135],"ycors":[45,77,103,114,78,60],"type":"polygon","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[30,151,226,280,292,292,287,270,195,151,30],"ycors":[136,77,81,119,146,160,170,195,210,212,166],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":215,"y":106,"diam":30,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"flag":{"name":"flag","editableColorIndex":0,"rotate":false,"elements":[{"xmin":60,"ymin":15,"xmax":75,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[90,270,90],"ycors":[150,90,30],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":75,"y1":135,"x2":90,"y2":135,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":75,"y1":45,"x2":90,"y2":45,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"flower":{"name":"flower","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[135,165,180,180,150,165,195,195,165],"ycors":[120,165,210,240,300,300,240,195,135],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"x":85,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":147,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":192,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":85,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":40,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":177,"y":132,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":70,"y":85,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":130,"y":25,"diam":38,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":96,"y":51,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":113,"y":68,"diam":74,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[189,219,249,279,234],"ycors":[233,188,173,188,218],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[180,150,105,75,135],"ycors":[255,210,210,240,240],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false}]},"house":{"name":"house","editableColorIndex":0,"rotate":false,"elements":[{"xmin":45,"ymin":120,"xmax":255,"ymax":285,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":210,"xmax":180,"ymax":285,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xcors":[15,150,285],"ycors":[120,15,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":30,"y1":120,"x2":270,"y2":120,"type":"line","color":"rgba(0, 0, 0, 1)","filled":false,"marked":false}]},"leaf":{"name":"leaf","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,135,120,60,30,60,60,15,30,15,40,45,60,90,105,120,105,120,135,150,165,180,195,180,195,210,240,255,263,285,270,285,240,240,270,240,180,165],"ycors":[210,195,210,210,195,180,165,135,120,105,104,90,90,105,120,120,60,60,30,15,30,60,60,120,120,105,90,90,104,105,120,135,165,180,195,210,210,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,135,120,105,105,135,165,165],"ycors":[195,240,255,255,285,285,240,195],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"line":{"name":"line","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":300,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"line half":{"name":"line half","editableColorIndex":0,"rotate":true,"elements":[{"x1":150,"y1":0,"x2":150,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"pentagon":{"name":"pentagon","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,60,240,285],"ycors":[15,120,285,285,120],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"person":{"name":"person","editableColorIndex":0,"rotate":false,"elements":[{"x":110,"y":5,"diam":80,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,120,90,105,135,150,165,195,210,180,195],"ycors":[90,195,285,300,300,225,300,300,285,195,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":127,"ymin":79,"xmax":172,"ymax":94,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[195,240,225,165],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[105,60,75,135],"ycors":[90,150,180,105],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"plant":{"name":"plant","editableColorIndex":0,"rotate":false,"elements":[{"xmin":135,"ymin":90,"xmax":165,"ymax":300,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,210,255,225,165],"ycors":[255,210,195,255,285],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[180,135,120,180,210],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[180,210,180,120,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,90,45,75,135],"ycors":[105,60,45,105,135],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[165,165,225,255,210],"ycors":[105,135,105,45,60],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[135,120,150,180,165],"ycors":[90,45,15,45,90],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square":{"name":"square","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"square 2":{"name":"square 2","editableColorIndex":0,"rotate":false,"elements":[{"xmin":30,"ymin":30,"xmax":270,"ymax":270,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":60,"ymin":60,"xmax":240,"ymax":240,"type":"rectangle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"star":{"name":"star","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[151,185,298,207,242,151,59,94,3,116],"ycors":[1,108,108,175,282,216,282,175,108,108],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"target":{"name":"target","editableColorIndex":0,"rotate":false,"elements":[{"x":0,"y":0,"diam":300,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":60,"y":60,"diam":180,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":90,"y":90,"diam":120,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"tree":{"name":"tree","editableColorIndex":0,"rotate":false,"elements":[{"x":118,"y":3,"diam":94,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":120,"ymin":195,"xmax":180,"ymax":300,"type":"rectangle","color":"rgba(157, 110, 72, 1)","filled":true,"marked":false},{"x":65,"y":21,"diam":108,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":116,"y":41,"diam":127,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":45,"y":90,"diam":120,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":104,"y":74,"diam":152,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle":{"name":"triangle","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"triangle 2":{"name":"triangle 2","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[150,15,285],"ycors":[30,255,255],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[151,225,75],"ycors":[99,223,224],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false}]},"truck":{"name":"truck","editableColorIndex":0,"rotate":false,"elements":[{"xmin":4,"ymin":45,"xmax":195,"ymax":187,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[296,296,259,244,208,207],"ycors":[193,150,134,104,104,194],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xmin":195,"ymin":60,"xmax":195,"ymax":105,"type":"rectangle","color":"rgba(255, 255, 255, 1)","filled":true,"marked":false},{"xcors":[238,252,219,218],"ycors":[112,141,141,112],"type":"polygon","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"xmin":181,"ymin":185,"xmax":214,"ymax":194,"type":"rectangle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x":24,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":144,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":234,"y":174,"diam":42,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"turtle":{"name":"turtle","editableColorIndex":0,"rotate":true,"elements":[{"xcors":[215,240,246,228,215,193],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[195,225,245,260,269,261,240,225,210],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[105,75,55,40,31,39,60,75,90],"ycors":[90,75,75,89,108,124,105,105,105],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[132,134,107,108,150,192,192,169,172],"ycors":[85,64,51,17,2,18,52,65,87],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[85,60,54,72,85,107],"ycors":[204,233,254,266,252,210],"type":"polygon","color":"rgba(89, 176, 60, 1)","filled":true,"marked":false},{"xcors":[119,179,209,224,220,175,128,81,74,88],"ycors":[75,75,101,135,225,261,261,224,135,99],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]},"wheel":{"name":"wheel","editableColorIndex":0,"rotate":false,"elements":[{"x":3,"y":3,"diam":294,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x":30,"y":30,"diam":240,"type":"circle","color":"rgba(0, 0, 0, 1)","filled":true,"marked":false},{"x1":150,"y1":285,"x2":150,"y2":15,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":15,"y1":150,"x2":285,"y2":150,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x":120,"y":120,"diam":60,"type":"circle","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"x1":216,"y1":40,"x2":79,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":84,"x2":269,"y2":221,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":40,"y1":216,"x2":269,"y2":79,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true},{"x1":84,"y1":40,"x2":221,"y2":269,"type":"line","color":"rgba(141, 141, 141, 1)","filled":false,"marked":true}]},"x":{"name":"x","editableColorIndex":0,"rotate":false,"elements":[{"xcors":[270,225,30,75],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true},{"xcors":[30,75,270,225],"ycors":[75,30,225,270],"type":"polygon","color":"rgba(141, 141, 141, 1)","filled":true,"marked":true}]}};
var modelConfig =
  (
    (typeof global !== "undefined" && global !== null) ? global :
    (typeof window !== "undefined" && window !== null) ? window :
    {}
  ).modelConfig || {};
var modelPlotOps = (typeof modelConfig.plotOps !== "undefined" && modelConfig.plotOps !== null) ? modelConfig.plotOps : {};
modelConfig.plots = [];
var workspace = tortoise_require('engine/workspace')(modelConfig)([])(["start-patch"], [])('turtles-own [start-patch] ;; original position of ball on kick line patches-own [score        ;; score for this position along the kick line              left-angle   ;; angle towards left goal-post              right-angle  ;; angle towards right goal-post              goal-angle   ;; size of arc between left-angle and right-angle              slope]       ;; slope of line from this patch towards a goal-post globals [current-max      ;; the best patch-score so far          col              ;; current color for our level-curves          ang              ;; viewing angle of the current level curve          best-dist        ;; distance from try-line of best kick          analytic         ;; what the best distance should be, analytically          try-line         ;; agentset containing only those patches on the try line          histogram-area   ;; agentset containing only patches inside the histogram          kicks            ;; total number of balls kicked          goals]           ;; total number of goals scored  ;; the origin of this model is set in the bottom left corner so ;; the y distance to the goal corresponds to the y-coordinate of the patch ;; this makes many of the calculations simpler.  to setup   clear-all   setup-field   setup-balls   set current-max 0   set best-dist -1   set kicks 0   ask try-line [ set score 0 ]   find-analytic-solution   if show-level-curves? [ draw-level-curves ]   reset-ticks end  to setup-field   ;; Draw lines for border, kick line, and goal line   ask patches [     if count neighbors != 8      [set pcolor red ]     if (pycor = min-pycor) and        (pxcor >= goal-pos) and        (pxcor < (goal-pos + goal-size))      [set pcolor green]   ]   set try-line patches with [ pxcor = kick-line and pcolor = black ]   ask try-line [ set pcolor yellow ]   set histogram-area patches with [ pxcor < kick-line and pcolor = black ] end  ;; turtle procedure that resets all balls to kick line at end of each round to setup-balls   set-default-shape turtles \"circle\"   ask try-line     [ sprout 1         [ set color orange           set start-patch patch-here           set heading (random-float 90) + 90 ] ]   plot-scores end  to go   while [any? turtles] [     ask turtles [ move ]     display   ]   set kicks kicks + count try-line   set goals sum [score] of try-line   setup-balls   tick end  ;; turtle procedure that moves all balls to move   ;; for speed, only check success/failure once we\'re near the   ;; edge of the playing field   if pxcor >= max-pxcor - 1 or pycor >= min-pycor + 1      [ ;; in this model we approximate continuous motion by making        ;; the turtles jump forward a step at a time.  but this can        ;; throw the results off a little because sometimes a ball        ;; will jump over the corner of a patch.  so to get correct        ;; results, we need to check two patches.  \"next-patch\" is        ;; the patch we would hit if we actually moved continuously.        ;; \"patch-ahead 1\" is the patch we\'re going to land on when        ;; we make our discrete jump.        check-patch next-patch        check-patch patch-ahead 1 ]   fd 1 end  to check-patch [the-patch]  ;; turtle procedure   if ([pcolor] of the-patch = red)     [ die ]       ;; the ball has hit the border wall   if ([pcolor] of the-patch = green) ;; the ball has reached the goal     [ ;; increment the number of times a goal has been scored from this point on the kick line       ask start-patch         [ set score score + 1 ]       die ] end  ;; see Next Patch Example, in the Code Examples section of ;; the Models Library, for a discussion of this code. to-report next-patch  ;; turtle procedure   if heading < towardsxy (pxcor + 0.5) (pycor + 0.5)     [ report patch-at 0 1 ]   if heading < towardsxy (pxcor + 0.5) (pycor - 0.5)     [ report patch-at 1 0 ]   if heading < towardsxy (pxcor - 0.5) (pycor - 0.5)     [ report patch-at 0 -1 ]   if heading < towardsxy (pxcor - 0.5) (pycor + 0.5)     [ report patch-at -1 0 ]   report patch-at 0 1 end  ;; do histogramming in the view to plot-scores   ;; set the maximum goals scored from any patch   set current-max (max [score] of try-line)   if current-max = 0   [     ask histogram-area [ set pcolor black ]     stop  ; otherwise we\'ll get division-by-zero errors below   ]   ask try-line [     ifelse score = current-max       [ set best-dist pycor         ask patch-at 2 0 [ set plabel pycor ] ]       [ if pcolor != magenta         [ ask patch-at 2 0 [ set plabel \"\" ] ] ]   ]   ask histogram-area   [;; make the histogram bar     ifelse  pxcor > (kick-line - (([score] of patch-at (kick-line - pxcor) 0) * (kick-line - min-pxcor) / current-max))     ;; make the yellow histogram bars at the maximal locations     [ifelse ([score] of patch-at (kick-line - pxcor) 0 = current-max)       [set pcolor yellow]       ;; other locations get blue bars       [set pcolor blue] ]     [set pcolor black]   ] end  to find-analytic-solution   ask patches with [pycor > min-pycor]     [ calc-goal-angle ]   ;; calculate the analytic solution for best kicking point   let winning-patch min-one-of try-line [goal-angle]   ask winning-patch   [ set pcolor magenta     ask patch-at 2 0 [ set plabel pycor ] ]   set analytic [ pycor ] of winning-patch end  to draw-level-curves   ask patches with [(pxcor > kick-line) and (pcolor < 10) ]     [ if goal-angle > 270       [ set pcolor (360 - goal-angle mod 10) * 0.8 ] ] end  ;; calculate angle between patch and goal to calc-goal-angle   set left-angle  towardsxy (goal-pos - 0.5)                             (min-pycor + 0.5)   set right-angle towardsxy (goal-pos + goal-size - 0.5)                             (min-pycor + 0.5)   set goal-angle (right-angle - left-angle) mod 360 end   ; Copyright 1997 Uri Wilensky. ; See Info tab for full copyright and license.')([{"x":317,"y":10,"width":374,"height":495,"dimensions":{"minPxcor":0,"maxPxcor":60,"minPycor":0,"maxPycor":80,"patchSize":6,"wrappingAllowedInX":false,"wrappingAllowedInY":false},"fontSize":10,"updateMode":"TickBased","showTickCounter":true,"tickCounterLabel":"ticks","frameRate":30,"type":"view","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"setup\"); if (R === StopInterrupt) { return R; }","type":"button","source":"setup","x":83,"y":192,"width":65,"height":33,"oldSize":true,"display":"setup","forever":false,"buttonKind":"Observer","disableUntilTicksStart":false,"compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 59; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"kick-line","x":18,"y":84,"width":137,"height":33,"oldSize":true,"display":"kick-line","min":"1","max":"59","default":20,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 22; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"goal-size","x":82,"y":121,"width":137,"height":33,"oldSize":true,"display":"goal-size","min":"1","max":"22","default":11,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledMin":"ProcedurePrims.rng.withAux(function() { return 49; })","compiledMax":"ProcedurePrims.rng.withAux(function() { return 1; })","compiledStep":"ProcedurePrims.rng.withAux(function() { return 1; })","type":"slider","variable":"goal-pos","x":159,"y":84,"width":137,"height":33,"oldSize":true,"display":"goal-pos","min":"1","max":"49","default":40,"step":"1","direction":"horizontal","compilation":{"success":true,"messages":[]}}, {"compiledSource":"var R = ProcedurePrims.callCommand(\"go\"); if (R === StopInterrupt) { return R; }","type":"button","source":"go","x":160,"y":192,"width":66,"height":33,"oldSize":true,"display":"go","forever":true,"buttonKind":"Observer","disableUntilTicksStart":true,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"best-dist\"); })","type":"monitor","source":"best-dist","x":132,"y":258,"width":169,"height":45,"oldSize":true,"display":"best distance (experimental)","precision":2,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"analytic\"); })","type":"monitor","source":"analytic","x":132,"y":308,"width":169,"height":45,"oldSize":true,"display":"best distance (analytic)","precision":2,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"variable":"show-level-curves?","x":63,"y":47,"width":176,"height":33,"oldSize":true,"display":"show-level-curves?","on":false,"type":"switch","compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"kicks\"); })","type":"monitor","source":"kicks","x":15,"y":258,"width":101,"height":45,"oldSize":true,"precision":0,"fontSize":11,"compilation":{"success":true,"messages":[]}}, {"compiledSource":"ProcedurePrims.rng.withAux(function() { return world.observer.getGlobal(\"goals\"); })","type":"monitor","source":"goals","x":15,"y":308,"width":101,"height":45,"oldSize":true,"precision":0,"fontSize":11,"compilation":{"success":true,"messages":[]}}])(tortoise_require("extensions/all").porters())(["kick-line", "goal-size", "goal-pos", "show-level-curves?", "current-max", "col", "ang", "best-dist", "analytic", "try-line", "histogram-area", "kicks", "goals"], ["kick-line", "goal-size", "goal-pos", "show-level-curves?"], ["score", "left-angle", "right-angle", "goal-angle", "slope"], 0, 60, 0, 80, 6, false, false, turtleShapes, linkShapes, function(){});
var Extensions = tortoise_require('extensions/all').initialize(workspace);
var BreedManager = workspace.breedManager;
var ImportExportPrims = workspace.importExportPrims;
var InspectionPrims = workspace.inspectionPrims;
var LayoutManager = workspace.layoutManager;
var LinkPrims = workspace.linkPrims;
var ListPrims = workspace.listPrims;
var MousePrims = workspace.mousePrims;
var OutputPrims = workspace.outputPrims;
var PrimChecks = workspace.primChecks;
var Prims = workspace.prims;
var PrintPrims = workspace.printPrims;
var ProcedurePrims = workspace.procedurePrims;
var RandomPrims = workspace.randomPrims;
var SelfManager = workspace.selfManager;
var SelfPrims = workspace.selfPrims;
var StringPrims = workspace.stringPrims;
var Updater = workspace.updater;
var UserDialogPrims = workspace.userDialogPrims;
var plotManager = workspace.plotManager;
var world = workspace.world;
ProcedurePrims.defineCommand("setup", 1220, 1435, (function() {
  world.clearAll();
  var R = ProcedurePrims.callCommand("setup-field"); if (R === DeathInterrupt) { return R; }
  var R = ProcedurePrims.callCommand("setup-balls"); if (R === DeathInterrupt) { return R; }
  world.observer.setGlobal("current-max", 0);
  world.observer.setGlobal("best-dist", -1);
  world.observer.setGlobal("kicks", 0);
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1321, 1324, 1904, world.observer.getGlobal("try-line")), function() { PrimChecks.patch.setVariable(1340, 1345, "score", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1321, 1324, R); return R; }
  var R = ProcedurePrims.callCommand("find-analytic-solution"); if (R === DeathInterrupt) { return R; }
  if (world.observer.getGlobal("show-level-curves?")) {
    var R = ProcedurePrims.callCommand("draw-level-curves"); if (R === DeathInterrupt) { return R; }
  }
  world.ticker.reset();
}))
ProcedurePrims.defineCommand("setup-field", 1443, 1886, (function() {
  var R = ProcedurePrims.ask(world.patches(), function() {
    if (PrimChecks.agentset.optimizeCount(null, null, SelfManager.self().getNeighbors(), 8, (a, b) => a !== b)) {
      PrimChecks.patch.setVariable(1562, 1568, "pcolor", 15);
    }
    if (((Prims.equality(PrimChecks.patch.getVariable(1583, 1588, "pycor"), world.topology.minPycor) && Prims.gte(PrimChecks.patch.getVariable(1614, 1619, "pxcor"), world.observer.getGlobal("goal-pos"))) && Prims.lt(PrimChecks.patch.getVariable(1645, 1650, "pxcor"), PrimChecks.math.plus(1663, 1664, PrimChecks.validator.checkArg('+', 1663, 1664, 1, world.observer.getGlobal("goal-pos")), PrimChecks.validator.checkArg('+', 1663, 1664, 1, world.observer.getGlobal("goal-size")))))) {
      PrimChecks.patch.setVariable(1687, 1693, "pcolor", 55);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1510, 1513, R); return R; }
  world.observer.setGlobal("try-line", PrimChecks.agentset.with(1728, 1732, world.patches(), function() {
    return (Prims.equality(PrimChecks.patch.getVariable(1735, 1740, "pxcor"), world.observer.getGlobal("kick-line")) && Prims.equality(PrimChecks.patch.getVariable(1757, 1763, "pcolor"), 0));
  }));
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 1776, 1779, 1904, world.observer.getGlobal("try-line")), function() { PrimChecks.patch.setVariable(1795, 1801, "pcolor", 45); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(1776, 1779, R); return R; }
  world.observer.setGlobal("histogram-area", PrimChecks.agentset.with(1840, 1844, world.patches(), function() {
    return (Prims.lt(PrimChecks.patch.getVariable(1847, 1852, "pxcor"), world.observer.getGlobal("kick-line")) && Prims.equality(PrimChecks.patch.getVariable(1869, 1875, "pcolor"), 0));
  }));
}))
ProcedurePrims.defineCommand("setup-balls", 1970, 2176, (function() {
  BreedManager.setDefaultShape(world.turtles().getSpecialName(), "circle")
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 2021, 2024, 1904, world.observer.getGlobal("try-line")), function() {
    var R = ProcedurePrims.ask(SelfManager.self().sprout(1, "TURTLES"), function() {
      PrimChecks.turtleOrLink.setVariable(2063, 2068, "color", 25);
      PrimChecks.turtle.setVariable(2090, 2101, "start-patch", SelfManager.self().getPatchHere());
      PrimChecks.turtle.setVariable(2127, 2134, "heading", PrimChecks.math.plus(2153, 2154, PrimChecks.math.randomFloat(90), 90));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2040, 2046, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2021, 2024, R); return R; }
  var R = ProcedurePrims.callCommand("plot-scores"); if (R === DeathInterrupt) { return R; }
}))
ProcedurePrims.defineCommand("go", 2184, 2345, (function() {
  while (PrimChecks.agentset.any(world.turtles())) {
    var R = ProcedurePrims.ask(world.turtles(), function() { var R = ProcedurePrims.callCommand("move"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(2216, 2219, R); return R; }
    Prims.display();
  }
  world.observer.setGlobal("kicks", PrimChecks.math.plus(2271, 2272, PrimChecks.validator.checkArg('+', 2271, 2272, 1, world.observer.getGlobal("kicks")), PrimChecks.agentset.count(PrimChecks.validator.checkArg('COUNT', 2273, 2278, 112, world.observer.getGlobal("try-line")))));
  world.observer.setGlobal("goals", PrimChecks.list.sum(2300, 2303, PrimChecks.validator.checkArg('SUM', 2300, 2303, 8, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 2312, 2314, 1904, world.observer.getGlobal("try-line")), function() { return PrimChecks.patch.getVariable(2305, 2310, "score"); }))));
  var R = ProcedurePrims.callCommand("setup-balls"); if (R === DeathInterrupt) { return R; }
  world.ticker.tick();
}))
ProcedurePrims.defineCommand("move", 2394, 3124, (function() {
  if ((Prims.gte(PrimChecks.patch.getVariable(2498, 2503, "pxcor"), PrimChecks.math.minus(2517, 2518, world.topology.maxPxcor, 1)) || Prims.gte(PrimChecks.patch.getVariable(2524, 2529, "pycor"), PrimChecks.math.plus(2543, 2544, world.topology.minPycor, 1)))) {
    var R = ProcedurePrims.callCommand("check-patch", PrimChecks.procedure.callReporter(3071, 3081, "next-patch")); if (R === DeathInterrupt) { return R; }
    var R = ProcedurePrims.callCommand("check-patch", SelfManager.self().patchAhead(1)); if (R === DeathInterrupt) { return R; }
  }
  SelfManager.self()._optimalFdOne();
}))
ProcedurePrims.defineCommand("check-patch", 3132, 3497, (function(theHpatch) {
  if (Prims.equality(PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 3192, 3194, 1904, theHpatch), function() { return PrimChecks.patch.getVariable(3184, 3190, "pcolor"); }), 15)) {
    return SelfManager.self().die();
  }
  if (Prims.equality(PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 3281, 3283, 1904, theHpatch), function() { return PrimChecks.patch.getVariable(3273, 3279, "pcolor"); }), 55)) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 3437, 3440, 1904, PrimChecks.turtle.getVariable(3441, 3452, "start-patch")), function() {
      PrimChecks.patch.setVariable(3467, 3472, "score", PrimChecks.math.plus(3479, 3480, PrimChecks.validator.checkArg('+', 3479, 3480, 1, PrimChecks.patch.getVariable(3473, 3478, "score")), 1));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(3437, 3440, R); return R; }
    return SelfManager.self().die();
  }
}))
ProcedurePrims.defineReporter("next-patch", 3625, 4005, (function() {
  if (Prims.lt(PrimChecks.turtle.getVariable(3662, 3669, "heading"), PrimChecks.turtle.towardsXY(3672, 3681, PrimChecks.math.plus(3689, 3690, PrimChecks.validator.checkArg('+', 3689, 3690, 1, PrimChecks.patch.getVariable(3683, 3688, "pxcor")), 0.5), PrimChecks.math.plus(3703, 3704, PrimChecks.validator.checkArg('+', 3703, 3704, 1, PrimChecks.patch.getVariable(3697, 3702, "pycor")), 0.5)))) {
    return PrimChecks.procedure.report(3716, 3722, SelfManager.self()._optimalPatchNorth());
  }
  if (Prims.lt(PrimChecks.turtle.getVariable(3743, 3750, "heading"), PrimChecks.turtle.towardsXY(3753, 3762, PrimChecks.math.plus(3770, 3771, PrimChecks.validator.checkArg('+', 3770, 3771, 1, PrimChecks.patch.getVariable(3764, 3769, "pxcor")), 0.5), PrimChecks.math.minus(3784, 3785, PrimChecks.validator.checkArg('-', 3784, 3785, 1, PrimChecks.patch.getVariable(3778, 3783, "pycor")), 0.5)))) {
    return PrimChecks.procedure.report(3797, 3803, SelfManager.self()._optimalPatchEast());
  }
  if (Prims.lt(PrimChecks.turtle.getVariable(3824, 3831, "heading"), PrimChecks.turtle.towardsXY(3834, 3843, PrimChecks.math.minus(3851, 3852, PrimChecks.validator.checkArg('-', 3851, 3852, 1, PrimChecks.patch.getVariable(3845, 3850, "pxcor")), 0.5), PrimChecks.math.minus(3865, 3866, PrimChecks.validator.checkArg('-', 3865, 3866, 1, PrimChecks.patch.getVariable(3859, 3864, "pycor")), 0.5)))) {
    return PrimChecks.procedure.report(3878, 3884, SelfManager.self()._optimalPatchSouth());
  }
  if (Prims.lt(PrimChecks.turtle.getVariable(3906, 3913, "heading"), PrimChecks.turtle.towardsXY(3916, 3925, PrimChecks.math.minus(3933, 3934, PrimChecks.validator.checkArg('-', 3933, 3934, 1, PrimChecks.patch.getVariable(3927, 3932, "pxcor")), 0.5), PrimChecks.math.plus(3947, 3948, PrimChecks.validator.checkArg('+', 3947, 3948, 1, PrimChecks.patch.getVariable(3941, 3946, "pycor")), 0.5)))) {
    return PrimChecks.procedure.report(3960, 3966, SelfManager.self()._optimalPatchWest());
  }
  return PrimChecks.procedure.report(3985, 3991, SelfManager.self()._optimalPatchNorth());
}))
ProcedurePrims.defineCommand("plot-scores", 4045, 4912, (function() {
  world.observer.setGlobal("current-max", PrimChecks.list.max(4125, 4128, PrimChecks.validator.checkArg('MAX', 4125, 4128, 8, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4137, 4139, 1904, world.observer.getGlobal("try-line")), function() { return PrimChecks.patch.getVariable(4130, 4135, "score"); }))));
  if (Prims.equality(world.observer.getGlobal("current-max"), 0)) {
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4179, 4182, 1904, world.observer.getGlobal("histogram-area")), function() { PrimChecks.patch.setVariable(4204, 4210, "pcolor", 0); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4179, 4182, R); return R; }
    return PrimChecks.procedure.stop(4223, 4227);
  }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4287, 4290, 1904, world.observer.getGlobal("try-line")), function() {
    if (Prims.equality(PrimChecks.patch.getVariable(4313, 4318, "score"), world.observer.getGlobal("current-max"))) {
      world.observer.setGlobal("best-dist", PrimChecks.patch.getVariable(4355, 4360, "pycor"));
      var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4369, 4372, 1904, SelfManager.self().patchAt(2, 0)), function() {
        PrimChecks.patch.setVariable(4392, 4398, "plabel", PrimChecks.patch.getVariable(4399, 4404, "pycor"));
      }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4369, 4372, R); return R; }
    }
    else {
      if (!Prims.equality(PrimChecks.patch.getVariable(4420, 4426, "pcolor"), 125)) {
        var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4448, 4451, 1904, SelfManager.self().patchAt(2, 0)), function() { PrimChecks.patch.setVariable(4471, 4477, "plabel", ""); }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4448, 4451, R); return R; }
      }
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4287, 4290, R); return R; }
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 4493, 4496, 1904, world.observer.getGlobal("histogram-area")), function() {
    if (Prims.gt(PrimChecks.patch.getVariable(4553, 4558, "pxcor"), PrimChecks.math.minus(4572, 4573, PrimChecks.validator.checkArg('-', 4572, 4573, 1, world.observer.getGlobal("kick-line")), PrimChecks.math.div(4645, 4646, PrimChecks.math.mult(4619, 4620, PrimChecks.validator.checkArg('*', 4619, 4620, 1, PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4584, 4586, 1904, SelfManager.self().patchAt(PrimChecks.math.minus(4607, 4608, PrimChecks.validator.checkArg('-', 4607, 4608, 1, world.observer.getGlobal("kick-line")), PrimChecks.validator.checkArg('-', 4607, 4608, 1, PrimChecks.patch.getVariable(4609, 4614, "pxcor"))), 0)), function() { return PrimChecks.patch.getVariable(4577, 4582, "score"); })), PrimChecks.math.minus(4632, 4633, PrimChecks.validator.checkArg('-', 4632, 4633, 1, world.observer.getGlobal("kick-line")), world.topology.minPxcor)), PrimChecks.validator.checkArg('/', 4645, 4646, 1, world.observer.getGlobal("current-max")))))) {
      if (Prims.equality(PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 4745, 4747, 1904, SelfManager.self().patchAt(PrimChecks.math.minus(4768, 4769, PrimChecks.validator.checkArg('-', 4768, 4769, 1, world.observer.getGlobal("kick-line")), PrimChecks.validator.checkArg('-', 4768, 4769, 1, PrimChecks.patch.getVariable(4770, 4775, "pxcor"))), 0)), function() { return PrimChecks.patch.getVariable(4738, 4743, "score"); }), world.observer.getGlobal("current-max"))) {
        PrimChecks.patch.setVariable(4805, 4811, "pcolor", 45);
      }
      else {
        PrimChecks.patch.setVariable(4870, 4876, "pcolor", 105);
      }
    }
    else {
      PrimChecks.patch.setVariable(4894, 4900, "pcolor", 0);
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4493, 4496, R); return R; }
}))
ProcedurePrims.defineCommand("find-analytic-solution", 4920, 5248, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(4957, 4961, world.patches(), function() { return Prims.gt(PrimChecks.patch.getVariable(4963, 4968, "pycor"), world.topology.minPycor); }), function() { var R = ProcedurePrims.callCommand("calc-goal-angle"); if (R === DeathInterrupt) { return R; } }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(4945, 4948, R); return R; }
  let winningHpatch = PrimChecks.agentset.minOneOf(PrimChecks.validator.checkArg('MIN-ONE-OF', 5086, 5096, 112, world.observer.getGlobal("try-line")), function() { return PrimChecks.patch.getVariable(5107, 5117, "goal-angle"); }); ProcedurePrims.stack().currentContext().registerStringRunVar("WINNING-PATCH", winningHpatch);
  var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5121, 5124, 1904, winningHpatch), function() {
    PrimChecks.patch.setVariable(5147, 5153, "pcolor", 125);
    var R = ProcedurePrims.ask(PrimChecks.validator.checkArg('ASK', 5166, 5169, 1904, SelfManager.self().patchAt(2, 0)), function() {
      PrimChecks.patch.setVariable(5189, 5195, "plabel", PrimChecks.patch.getVariable(5196, 5201, "pycor"));
    }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5166, 5169, R); return R; }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5121, 5124, R); return R; }
  world.observer.setGlobal("analytic", PrimChecks.agentset.of(PrimChecks.validator.checkArg('OF', 5231, 5233, 1904, winningHpatch), function() { return PrimChecks.patch.getVariable(5223, 5228, "pycor"); }));
}))
ProcedurePrims.defineCommand("draw-level-curves", 5256, 5415, (function() {
  var R = ProcedurePrims.ask(PrimChecks.agentset.with(5288, 5292, world.patches(), function() {
    return (Prims.gt(PrimChecks.patch.getVariable(5295, 5300, "pxcor"), world.observer.getGlobal("kick-line")) && Prims.lt(PrimChecks.patch.getVariable(5319, 5325, "pcolor"), 10));
  }), function() {
    if (Prims.gt(PrimChecks.patch.getVariable(5343, 5353, "goal-angle"), 270)) {
      PrimChecks.patch.setVariable(5372, 5378, "pcolor", PrimChecks.math.mult(5405, 5406, PrimChecks.math.minus(5384, 5385, 360, PrimChecks.math.mod(5397, 5400, PrimChecks.validator.checkArg('MOD', 5397, 5400, 1, PrimChecks.patch.getVariable(5386, 5396, "goal-angle")), 10)), 0.8));
    }
  }, true); if (R !== undefined) { PrimChecks.procedure.preReturnCheck(5276, 5279, R); return R; }
}))
ProcedurePrims.defineCommand("calc-goal-angle", 5465, 5727, (function() {
  PrimChecks.patch.setVariable(5487, 5497, "left-angle", PrimChecks.turtle.towardsXY(5499, 5508, PrimChecks.math.minus(5519, 5520, PrimChecks.validator.checkArg('-', 5519, 5520, 1, world.observer.getGlobal("goal-pos")), 0.5), PrimChecks.math.plus(5565, 5566, world.topology.minPycor, 0.5)));
  PrimChecks.patch.setVariable(5578, 5589, "right-angle", PrimChecks.turtle.towardsXY(5590, 5599, PrimChecks.math.minus(5622, 5623, PrimChecks.math.plus(5610, 5611, PrimChecks.validator.checkArg('+', 5610, 5611, 1, world.observer.getGlobal("goal-pos")), PrimChecks.validator.checkArg('+', 5610, 5611, 1, world.observer.getGlobal("goal-size"))), 0.5), PrimChecks.math.plus(5668, 5669, world.topology.minPycor, 0.5)));
  PrimChecks.patch.setVariable(5681, 5691, "goal-angle", PrimChecks.math.mod(5719, 5722, PrimChecks.math.minus(5705, 5706, PrimChecks.validator.checkArg('-', 5705, 5706, 1, PrimChecks.patch.getVariable(5693, 5704, "right-angle")), PrimChecks.validator.checkArg('-', 5705, 5706, 1, PrimChecks.patch.getVariable(5707, 5717, "left-angle"))), 360));
}))
world.observer.setGlobal("kick-line", 20);
world.observer.setGlobal("goal-size", 11);
world.observer.setGlobal("goal-pos", 40);
world.observer.setGlobal("show-level-curves?", false);